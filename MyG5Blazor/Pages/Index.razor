@page "/"
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq; 
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data

@inject NavigationManager NavMan
@inject Costumer cst  
@inject Transaction trans
@inject Menu menu 
@inject Config config 

<div class="main-panel bg-home">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="navbar-form">
                <div class="input-group no-border">
                    <button type="submit" class="btn btn-white btn-round btn-just-icon" style="font-size: 15px; margin-top: -40px;">
                        ID
                    </button>
                    <button type="submit" class="btn btn-white btn-round btn-just-icon" style="font-size: 15px; margin-top: -40px;">
                        EN
                    </button>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="centered-2">Silakan Tekan Menu yang Anda Inginkan</div>
                </div>

                <div class="col-md-6">
                    <div class="card-body" style="margin-top: 10%;">
                        @if (Menu[0])
                        {
                            @if (MenuCount == 0)
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[0],apiURL[0],arrayTrans[0]))" src="../assets/image/Menu Utama/@AssetsPNG[0]" width=@WidthPNG height=@HeightPNG style=@strStyle[0]>
                            }
                            else
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[0],apiURL[0],arrayTrans[0]))" src="../assets/image/Menu Utama/@AssetsPNG[0]" width=@WidthPNG style=@strStyle[0]>
                            }
                            MenuCount += 1;
                        }
                        @if (Menu[1])
                        {
                            @if (MenuCount == 0)
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[1],apiURL[1],arrayTrans[1]))" src="../assets/image/Menu Utama/@AssetsPNG[1]" width=@WidthPNG height=@HeightPNG style=@strStyle[1]>
                            }
                            else
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[1],apiURL[1],arrayTrans[1]))" src="../assets/image/Menu Utama/@AssetsPNG[1]" width=@WidthPNG style=@strStyle[1]>
                            }
                            MenuCount += 1;
                        }
                        @if (Menu[2])
                        {
                            @if (MenuCount == 0)
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[2],apiURL[2],arrayTrans[2]))" src="../assets/image/Menu Utama/@AssetsPNG[2]" width=@WidthPNG height=@HeightPNG style=@strStyle[2]>
                            }
                            else
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[2],apiURL[2],arrayTrans[2]))" src="../assets/image/Menu Utama/@AssetsPNG[2]" width=@WidthPNG style=@strStyle[2]>
                            }
                            MenuCount += 1;
                        }
                        @if (Menu[3])
                        {
                            @if (MenuCount == 0)
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[3],apiURL[3],arrayTrans[3]))" src="../assets/image/Menu Utama/@AssetsPNG[3]" width=@WidthPNG height=@HeightPNG style=@strStyle[3]>
                            }
                            else
                            {
                                <img @onclick="@(()=>CheckStatus(hrefMenu[3],apiURL[3],arrayTrans[3]))" src="../assets/image/Menu Utama/@AssetsPNG[3]" width=@WidthPNG style=@strStyle[3]>
                            }
                            MenuCount += 1;
                        }

                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
@if (IsLoading)
{
<div id="myModal" class="modal">
    <div class="modal-blank">
        <img class="lds-spinner" src="../../assets/image/loader.gif">
        <p><br>Mohon tunggu</p>
        <p>proses sedang berlangsung...</p>
    </div>
</div>
}
@code
{
    //@(()=>CheckStatus(hrefMenu[1],apiURL[1],arrayTrans[1]))
    private string[] hrefMenu = { "bth/1", "u4g/1", "bpp/1", "gk/1" };
    private string[] AssetsPNG = { "Menu_Bayar_Tagihan.png", "Menu_Upgrade4G.png", "Menu_Beli_Pulsa.png", "Menu_Ganti_kartu.png" };
    private string[] arrayTrans = { "PB", "U4G", "PR", "GK" };

    private string WidthPNG = "40%";
    private string HeightPNG = "20%";

    private string[] StylePNG = { "margin-left: 10%;", "margin-left: 5%;", "margin-left: 10%; margin-top: 5%;", "margin-left: 5%; margin-top: 5%;" };
    private string[] strStyle = { "", "", "", "" };
    private int MenuCount = 0;
    private int intMenu = 0;

    private bool IsLoading = false;
    //private static string _myURL = "https://mygrapari.telkomsel.co.id/trilogi/";
    public string _myURL = "https://843dcbe7.ngrok.io/";
    private string[] apiURL = { "mygrapari/bayar-halo/v1/init", "mygrapari/upgrade-4g/v1/init", "mygrapari/isi-pulsa/v1/init", "mygrapari/ganti-kartu/v1/init" };
    private string _termID = string.Empty;

    private bool[] Menu = { true, true, true, true };

    protected override async Task OnInitializedAsync()
    {
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        Switcher.DOWN_eKTP("500");
        Switcher.DOWN_Reader_1("500");
        cst.Clear();
        trans.ClearTransaction();
        CheckMenuStatus();

        intMenu = 0;
    }

    private void CheckMenuStatus()
    {
        for (int i = 0; i < 4; i++)
        {
            if (Menu[i])
            {
                strStyle[i] = StylePNG[intMenu];
                intMenu += 1;
            }
        }
    }

    
    private async Task CheckStatus(string strURL, string strAPIURL, string strTrans)
    {
        IsLoading = true;
        _termID = "T9999999";
        string myJson = "{\"terminalId\": \"" + _termID + "\"}";
        string myURL = _myURL + strAPIURL;

        OurUtility.Write_Log("= Get Menu Status Code", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await PostCallAPI(myURL, myJson);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != null)
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"]["statusCode"] == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Success}", "step-action");
                    trans.SetTransaction((string)jobjResult["config"]["apiBuid"], (string)jobjResult["terminal"]["terminalId"],strTrans);
                    config.Terminal((string)jobjResult["terminal"]["terminalId"], (string)jobjResult["terminal"]["terminalDesc"], (string)jobjResult["terminal"]["terminalLocation"], (string)jobjResult["terminal"]["areaCode"], (string)jobjResult["terminal"]["regionalCode"], (string)jobjResult["terminal"]["unitId"], (string)jobjResult["terminal"]["unitName"]);
                    config.ConfigIn((string)jobjResult["config"]["menuConfigId"], (string)jobjResult["config"]["maxRetryPerso"], (string)jobjResult["config"]["tidEdc"], (string)jobjResult["config"]["midEdc"], (string)jobjResult["config"]["snEdc"], (string)jobjResult["config"]["apiBuid"], (string)jobjResult["config"]["apiUid"], (string)jobjResult["config"]["cardDispenser"], (string)jobjResult["config"]["bahasa"], (string)jobjResult["config"]["edc"], (string)jobjResult["config"]["cash"]);
                    OurUtility.Write_Log("== BUID : "+trans.buID + ", Terminal ID : " + trans.termID + ", Event : "+trans.jenisTrans+" {Success}", "step-action");

                    NavMan.NavigateTo(strURL);
                }
                else
                {
                    if ((string)jobjResult["transaction"]["errorCode"] != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusDesc"] + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"]["statusDesc"];
                    }
                    else
                    {
                        string _statusDescSub = ((string)jobjResult["transaction"]["statusDesc"]);
                        string statusDescSub = _statusDescSub.Substring(0, _statusDescSub.IndexOf(":"));
                        OurUtility.Write_Log("== Status Code : " + statusDescSub + " {Error}", "step-action");
                        trans.errorCode = statusDescSub;
                    }
                    NavMan.NavigateTo("/error");
                }
            }
            catch (Exception ex)
            {
                trans.errorCode = strResult;
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                NavMan.NavigateTo("/error");
            }
        } else
        {
            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            NavMan.NavigateTo("/error");
        }
    }

    public static async Task<string> PostCallAPI(string url, string jsonString)
    {
        string ret = string.Empty;
        try
        {
            using (var handler = new HttpClientHandler())
            {
                handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; };
                using (HttpClient client = new HttpClient(handler))
                {
                    var content = new StringContent(jsonString, Encoding.UTF8, "application/json");
                    var response = await client.PostAsync(url, content);
                    if (response != null)
                    {
                        if (response.IsSuccessStatusCode)
                        {
                            var jsonStringResult = await response.Content.ReadAsStringAsync();
                            return jsonStringResult;
                        } else
                        {
                            return response.StatusCode.ToString();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("==" + ex.Message, "step-action");
        }
        return ret;
    }
}