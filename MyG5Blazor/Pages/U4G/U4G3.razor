@page "/UP/3"
@using MyG5Blazor.Data
@using System.Threading
@using System.Net.Http;
@using System.Text;
@using Aratek.TrustFinger;

@inject IJSRuntime JSRuntime
@inject BlazorTimer Timer
@inject Ektp_Data ktp
@inject NavigationManager NavMan
@inject Costumer cst
@inject Config config
@inject Transaction trans
@inject Menu menu
<div class="main-panel bg-home" @onclick="@(()=>InvokeAsync(ResetTimer))">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="col-md-6">
                <div class="input-group no-border">
                    <div class="checklist">
                        @if (IsLoading)
                        {
                            <img src="../../assets/image/loader.gif" />
                        }
                        else if (IsSuccess)
                        {
                            <img src="../../assets/image/tanda_checklist.png" />
                        }
                    </div>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="teks-title">Upgrade dan Ganti Kartu 4G</div>
                    @if (!IsSuccess)
                    {
                        <div id="proses-pindai">
                            <div class="teks-center"> Letakkan <span style="font-weight: bold;"> Telunjuk Kanan/Kiri </span> Anda pada Alat Pemindai Sidik Jari</div>
                        </div>
                    }
                    else
                    {
                        <div id="proses-berhasil">
                            <div class="teks-center">Proses Pindai Sidik Jari Berhasil</div>
                        </div>
                    }
                </div>
                <div class="col-md-6">
                    <img class="ktp" id="myBtn" src="../../assets/image/Scan_Finger-01.png">
                </div>
            </div>
        </div>
    </div>

    <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
    <footer>
        <div class="footer-side1">
            <span class="dot">1</span>
            <span class="dot">2</span>
            <span class="dot" id="dot-active">3</span>
            <span class="dot">4</span>
        </div>
        <div class="footer-side2">
            <button @onclick="Back" class="btn-arrow btn" value="">Kembali</button>
            <button @onclick="MenuUtamaCanceled" class="btn-arrow btn" value="">Menu Utama</button>
            <!-- <sup>Powered By </sup>Trilogi Persada -->
        </div>
    </footer>
    @if (IsVisible)
    {
        <div id="myModal" class="modal">
            <!-- Modal content -->
            <div class="modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        @if (intTryCount <= intTryLimit)
                        {
                            <p class="text-body">Silakan pindai kembali <span style="font-weight: bold;"> Jari Telunjuk Kanan/Kiri </span>Anda, pastikan alat pemindai dalam keadaan bersih.</p>
                            <button class="btn btn-danger modal-button" @onclick="CheckFinger">OK</button>
                        }
                        else
                        {
                            <p class="text-body">Maaf <span style="font-weight: bold;"> Sidik Jari </span>tidak sesuai dengan eKTP yang digunakan. Silakan hubungi <span style="font-weight: bold;"> Customer Service</span> GraPARI untuk bantuan</p>
                            <button @onclick="MenuUtama" class="btn btn-danger modal-button" id="span1">OK</button>
                        }
                        <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                    </div>
                </div>
            </div>

        </div>
    }
    @if (isLoading2)
    {
        <div id="myModal" class="modal">
            <div class="modal-blank">
                <img class="lds-spinner" src="../../assets/image/loader.gif">
                <p><br>Mohon tunggu</p>
                <p>proses sedang berlangsung...</p>
            </div>
        </div>
    }
    @if (isIdle)
    {
        <div id="myModal" class="modal">
            <!-- Modal content -->
            <div class="modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <p class="text-body">
                            Apakah Anda ingin menambah waktu lagi? <br />
                            Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTime</span> detik.
                        </p>
                        <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktu))">Ya</button>
                        <button class="btn btn-light modal-button" @onclick="@(()=>secondCTime=0)">Tidak</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code{
    private bool IsVisible = false;
    private bool IsLoading = false;
    private bool IsSuccess = false;
    private bool IsFail = false;
    private bool isLoading2 = false;
    private bool isInit = true;

    private int intTryCount = 1;
    private int intTryLimit = 3;

    private IntPtr hContext = IntPtr.Zero;
    private CRT_Interface ektpCRT = new CRT_Interface();
    private TrustFingerDevice dev = null;

    /* FIXME: change to the right PCID & CONFIGFILE  */
    byte[] pbPcid;
    private bool translog = true;
    byte[] pbConf;
    public string _myURL = "";
    public string saveURL = "log/v1/save";

    private async Task MenuUtama()
    {
        if (translog)
        {
            translog = false;
            IsLoading = false;
            IsVisible = false;
            isLoading2 = true;
            trans.status = "01";
            trans.errorCode = "FINGERPRINT";
            await OurUtility.AuditTrail(trans, menu, cst);
            isNotIdle = false;
            if (config.ektpType == "c")
            {
                ektpCRT.CloseFPReader();
            }
            NavigateTo("/main");
        }
    }
    private async Task MenuUtamaCanceled()
    {
        if (translog)
        {
            translog = false;
            IsVisible = false;
            isLoading2 = true;
            trans.AddTrail("SCAN FINGERPRINT", "CANCELED", "02");
            trans.status = "02";
            trans.errorCode = "FINGERPRINT";
            await OurUtility.AuditTrail(trans, menu, cst);
            isNotIdle = false;
            if (config.ektpType == "c")
            {
                ektpCRT.CloseFPReader();
            }
            NavigateTo("/main");
        }
    }
    private async Task Back()
    {
        isNotIdle = false;
        if (config.ektpType == "c")
        {
            ektpCRT.CloseFPReader();
        }
        NavigateTo("/UP/2");
    }
    private void NavigateTo(string strURL)
    {
        isNotIdle = false;
        NavMan.NavigateTo(strURL);
    }
    private async Task CheckFinger()
    {
        if (IsVisible || isInit)
        {
            isInit = false;
            IsVisible = false;
            if (config.ektpType == "a")
            {
                await FingerPrintScan();
            }
            else if (config.ektpType == "c")
            {
                await FingerPrintScanC();
            }
            else
            {
                trans.AddTrail("READ EKTP", "FP - 001", "01");
                trans.status = "01";
                await OurUtility.AuditTrail(trans, menu, cst);

                trans.errorCode = "FP - 001";
                OurUtility.Write_Log("== Error : FP - 001", "step-action");
                isNotIdle = false;
                NavMan.NavigateTo("/error");
            }
        }
        else if (!IsLoading && !IsSuccess && !IsFail)
        {
            IsLoading = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        pbPcid = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_PCID), ","));
        pbConf = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_CONF), ","));
        OurUtility.Write_Log("== FingerPrint Scan Page", "step-action");
        counterTime = counterTreshold;
        await CheckFinger();
    }
    private async Task FingerPrintScanC()
    {
        IsLoading = true;
        OurUtility.Write_Log("==== Scan FingerPrint", "step-action");
        OurUtility.Write_Log("===== Ektp_Sdk.EktpConnect", "step-action");

        try
        {
            TrustFingerManager.GlobalInitialize();
        }
        catch
        {
            trans.AddTrail("READ EKTP", "FP - 101", "01");
            trans.status = "01";
            await OurUtility.AuditTrail(trans, menu, cst);

            trans.errorCode = "FP - 101";
            OurUtility.Write_Log("== Error : FP - 101", "step-action");
            isNotIdle = false;
            NavMan.NavigateTo("/error");
            return;
        }
        await Task.Run(() => ektpCRT.FPReader());
        await Task.Run(() => ektpCRT.StartCaptureFingerprint()).ConfigureAwait(false);
        try
        {
            do
            {
                if (ektpCRT.isCaptured)
                {
                    await ResetTimer();

                    Task.Delay(500);
                    byte[] feature = new byte[ektpCRT.ektpData.FPR.Length];
                    feature = ektpCRT.ektpData.FPR;

                    bool result = false;
                    result = ektpCRT.FPMatch(feature, ktp.minutiae1, ktp.minutiae2);

                    if (result)
                    {
                        translog = false;
                        trans.AddTrail("FINGERPRINT", "MATCH", "00");

                        OurUtility.Write_Log("===== -- Try ke-" + intTryCount.ToString() + ", Success", "step-action");
                        cst.EKTPNumber = ktp.Id;
                        IsLoading = false;
                        IsSuccess = true;

                        Timer.SetTimer(1000);
                        Timer.OnElapsed += TimerElapsedHandler;
                        return;
                    }
                    else
                    {
                        trans.AddTrail("FINGERPRINT", "NOT-MATCH", "01");
                        OurUtility.Write_Log("===== -- Try " + intTryCount.ToString() + ", Failed", "step-action");

                        intTryCount += 1;
                        IsLoading = false;
                        IsVisible = true;
                        if (intTryCount > intTryLimit)
                        {
                            IsFail = true;
                        }
                        return;
                    }
                }
            } while (true);
        }
        catch
        {
            IsLoading = false;
            IsFail = true;
            trans.AddTrail("READ EKTP", "FP - 002", "01");
            trans.status = "01";
            await OurUtility.AuditTrail(trans, menu, cst);

            trans.errorCode = "FP - 002";
            OurUtility.Write_Log("== Error : FP - 002", "step-action");
            isNotIdle = false;
            NavMan.NavigateTo("/error");
            return;
        }
    }
    private async Task FingerPrintScan()
    {
        //ektp.InitializeEktp();
        IsLoading = true;
        OurUtility.Write_Log("=== Scan FingerPrint", "step-action");
        OurUtility.Write_Log("===== Ektp_Sdk.EktpConnect", "step-action");
        await Task.Run(() => Ektp_Sdk.EktpConnect(ref hContext, pbPcid, 16, pbConf, 32));

        OurUtility.Write_Log("==== Ektp_Sdk.OpenFingerPrintReader", "step-action");

        // -- Step 2, Open Device Fingerprint
        IntPtr reader = IntPtr.Zero;
        int result = -1;
        result = await Task.Run(() => Ektp_Sdk.OpenFingerPrintReader(ref reader, "uareu")).ConfigureAwait(false);
        if (reader == IntPtr.Zero)
        {
            OurUtility.Write_Log("==== Ektp_Sdk.OpenFingerPrintReader Failed", "step-action");

            //Switcher.DOWN_eKTP(config_MyGraPARI.Read("MyGraPARI", Config.PARAM_DELAY_USB_DOWN));
        }
        else
        {
            OurUtility.Write_Log("==== Ektp_Sdk.OpenFingerPrintReader Success", "step-action");
            OurUtility.Write_Log("==== Ektp_Sdk.StartEngine", "step-action");

            IntPtr engine = IntPtr.Zero;
            int engineType = 0;//engineType = 0, it means that finger print engine is uareu
            result = await Task.Run(() => Ektp_Sdk.StartEngine(engineType, ref engine)).ConfigureAwait(false);
            if (engine == IntPtr.Zero)
            {
                OurUtility.Write_Log("==== Ektp_Sdk.StartEngine Failed", "step-action");
            }
            else
            {
                OurUtility.Write_Log("==== Ektp_Sdk.StartEngine Success", "step-action");

                Thread.Sleep(1500);

                OurUtility.Write_Log("==== -- Try ke-" + intTryCount.ToString() + ", Ektp_Sdk.CaptureFingerPrint", "step-action");

                int size = 120000;
                int score = -1;

                byte[] image = new byte[size];
                result = await Task.Run(() => Ektp_Sdk.CaptureFingerPrint(reader, image, ref size, ref score)).ConfigureAwait(false);
                if (result != 0)
                {
                    OurUtility.Write_Log("==== Ektp_Sdk.CaptureFingerPrint Failed", "step-action");
                    //break;
                }
                else
                {
                    OurUtility.Write_Log("==== -- Try ke-" + intTryCount.ToString() + ", Ektp_Sdk.MatchFingerPrint", "step-action");

                    OurUtility.Write_Log("===== Ektp_Sdk.ReadFingerPrints Success", "step-action");
                    // -- Step 5, Compare

                    int matched = 0;//matched == 1, it means finger print matched
                    int format = 0;//format == 0, it means finger print template type is ISO
                    int threshold = Config.ektpThreshold;

                    Ektp_Sdk.SetMatchFingerPrintThreshold(engine, threshold);
                    Ektp_Sdk.GetMatchFingerPrintThreshold(engine, ref threshold);
                    //matched right finger
                    result = await Task.Run(() => Ektp_Sdk.MatchFingerPrint(engine, image, size,
                                                    ktp.minutiae2, ktp.minu2len,
                                                    ref score, ref matched, format)).ConfigureAwait(false);

                    if (matched == 1)
                    {
                        trans.AddTrail("FINGERPRINT", "MATCH", "00");

                        OurUtility.Write_Log("==== -- Try ke-" + intTryCount.ToString() + ", Success", "step-action");
                        cst.EKTPNumber = ktp.Id;
                        IsLoading = false;
                        IsSuccess = true;
                        OurUtility.Write_Log("===== Ektp_Sdk.CloseReader", "step-action");
                        result = Ektp_Sdk.CloseReader(reader);

                        Timer.SetTimer(1000);
                        Timer.OnElapsed += TimerElapsedHandler;
                        //break;
                    }
                    else
                    {
                        result = await Task.Run(() => Ektp_Sdk.MatchFingerPrint(engine, image, size,
                                                        ktp.minutiae1, ktp.minu1len,
                                                        ref score, ref matched, format)).ConfigureAwait(false);
                        if (matched == 1)
                        {
                            trans.AddTrail("FINGERPRINT", "MATCH", "00");
                            OurUtility.Write_Log("===== -- Try ke-" + intTryCount.ToString() + ", Success", "step-action");
                            cst.EKTPNumber = ktp.Id;

                            //OurUtility.Write_Log("===== NIK : " + cst.EKTPNumber, "step-action");
                            IsLoading = false;
                            IsSuccess = true;

                            OurUtility.Write_Log("===== Ektp_Sdk.CloseReader", "step-action");
                            result = Ektp_Sdk.CloseReader(reader);

                            //OurUtility.Write_Log("=== Switcher.DOWN_eKTP", "step-action");
                            //await Task.Run(() => Switcher.DOWN_eKTP("500"));

                            Timer.SetTimer(1000);
                            Timer.OnElapsed += TimerElapsedHandler;
                            //break;
                        }
                        else
                        {
                            trans.AddTrail("FINGERPRINT", "NOT-MATCH", "02");
                            OurUtility.Write_Log("==== -- Try " + intTryCount.ToString() + ", Failed", "step-action");

                            OurUtility.Write_Log("==== Ektp_Sdk.CloseReader", "step-action");
                            result = Ektp_Sdk.CloseReader(reader);

                            intTryCount += 1;
                            IsLoading = false;
                            IsVisible = true;
                            if (intTryCount > intTryLimit)
                            {
                                IsFail = true;
                            }
                        }
                    }
                }
            }
        }
    }

    private void TimerElapsedHandler()
    {
        OurUtility.Write_Log("===== 9 -- Try ke-" + intTryCount.ToString() + ", Success", "step-action");
        cst.EKTPNumber = ktp.Id;
        //OurUtility.Write_Log("===== NIK : " + cst.EKTPNumber, "step-action");
        isNotIdle = false;
        NavMan.NavigateTo("/UP/4");
    }
    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            #region AfterRenderTimeOut
            await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
            #endregion
        }
    }
    #region TimeOut
    private int counterTime;
    private int counterTreshold = 60;
    private bool isIdle = false;
    private bool isNotIdle = true;
    private async Task IdleTime()
    {
        do
        {
            await Task.Delay(1000);
            //Console.WriteLine("Idle 2 Time Left : " + counterTime.ToString());
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                isIdle = true;
                isNotIdle = false;
                secondCTime = counterTreshold;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdle);
    }
    #endregion

    #region SecondTimeOut
    private int secondCTime;
    private bool isTimeOut = false;

    private async Task TimeOut()
    {
        do
        {
            await Task.Delay(1000);
            //Console.WriteLine("Time 2 Out Left : " + secondCTime.ToString());
            secondCTime = secondCTime - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTime < 0)
            {
                isIdle = false;
                isTimeOut = true;
                isLoading2 = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdle);
    }

    private async Task TambahWaktu()
    {
        //Console.WriteLine("Tambah Waktu");
        counterTime = counterTreshold;
        //secondCTime = 0;
        isIdle = false;
        isTimeOut = false;
        isNotIdle = true;
        await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOut()
    {
        await Task.Run(() => IdleTime()).ConfigureAwait(false);
        if (isIdle)
            await Task.Run(() => TimeOut()).ConfigureAwait(false);

        if (isTimeOut)
        {
            //Console.WriteLine("Time Out 2");
            //NavigateTo("/main");
            await MenuUtamaCanceled();
        }
    }

    private async Task ResetTimer()
    {
        if (!isIdle)
        {
            //Console.WriteLine("Timer Reset");
            counterTime = counterTreshold;
        }
    }
    #endregion
}