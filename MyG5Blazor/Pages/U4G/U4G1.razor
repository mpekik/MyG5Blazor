@page "/UP/1"
@inject IJSRuntime JSRuntime;

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data

@inject Menu menu
@inject Costumer cst
@inject NavigationManager NavMan
@inject Transaction trans
@inject Config config
<div class="main-panel bg-home" @onclick="@(()=>InvokeAsync(ResetTimer))">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>


            <form class="navbar-form">
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <p class="teks-title">Upgrade dan Ganti Kartu 4G</p>
                    <div class="teks-top">
                        <p>Masukan Nomor yang akan Diganti Kartu SIM-nya</p> <br>
                        <p>Pastikan Anda sudah Menyiapkan e-KTP untuk Keperluan Validasi</p> <br>
                        <p>Pastikan Nomor Anda tidak Terdaftar pada Layanan Perbankan</p> <br>
                    </div>
                </div>

                <div class="col-md-6">
                    @if (strNumber == string.Empty)
                    {
                        <input type="text" name="number" placeholder="0811 1234 5678" class="num-field" readonly>
                    }
                    else
                    {
                        <input type="text" name="number" class="num-field" @bind="strNumber" readonly />
                    }
                    <div class="num-button">
                        <button class="key-num btn" value="1" @onclick="@(() => InputPhoneNumber("1"))">1</button>
                        <button class="key-num btn" value="2" @onclick="@(() => InputPhoneNumber("2"))">2</button>
                        <button class="key-num btn" value="3" @onclick="@(() => InputPhoneNumber("3"))">3</button>
                        <button class="key-num btn" value="4" @onclick="@(() => InputPhoneNumber("4"))">4</button>
                        <button class="key-num btn" value="5" @onclick="@(() => InputPhoneNumber("5"))">5</button>
                        <button class="key-num btn" value="6" @onclick="@(() => InputPhoneNumber("6"))">6</button>
                        <button class="key-num btn" value="7" @onclick="@(() => InputPhoneNumber("7"))">7</button>
                        <button class="key-num btn" value="8" @onclick="@(() => InputPhoneNumber("8"))">8</button>
                        <button class="key-num btn" value="9" @onclick="@(() => InputPhoneNumber("9"))">9</button>
                        <button class="key-num btn btn-hapus" value="Hapus" @onclick="RemovePhoneNumber">Hapus</button>
                        <button class="key-num btn" value="0" id="myBtnUndefine" @onclick="@(() => InputPhoneNumber("0"))">0</button>
                        <button class="key-num btn btn-hapus" id="myBtn" value="ok" @onclick="@(()=>OkOnClick(true))">Ok</button>
                    </div>
                    <div class="button-down">
                        <!-- <button class="btn-arrow" value="">Kembali</button>
                        <button class="btn-arrow" value="">Menu Utama</button> -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
</div>

<footer>
    <div class="footer-side1">
        <span class="dot" id="dot-active">1</span>
        <span class="dot">2</span>
        <span class="dot">3</span>
        <span class="dot">4</span>
    </div>
    <div class="footer-side2">
        <button @onclick="@(()=>NavigateTo("/main"))" class="btn-arrow btn" value="">Kembali</button>
        <button @onclick="@(()=>NavigateTo("/main"))" class="btn-arrow btn" value="">Menu Utama</button>
        <!-- <sup>Powered By </sup>Trilogi Persada -->
    </div>
</footer>

<!-- The Modal -->
@if (IsVisible)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">Anda akan melakukan <span style="font-weight: bold;">Ganti Kartu dan Upgrade 4G</span> untuk nomor :</p>
                    <p style="font-size: 25pt; font-weight: bold;">@strNumber</p>
                    <button @onclick="@(()=>CheckNumber("/UP/2"))" class="btn btn-danger modal-button">Lanjut</button>
                    <button class="btn btn-light modal-button" @onclick="@(() => OkOnClick(false))">Batal</button>
                </div>
            </div>
        </div>
    </div>
}

@if (IsInvalid)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">@((MarkupString)strMsgError)</p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => OkOnClick(false))">OK</button>
                </div>
            </div>
        </div>
    </div>
}
@if (IsLoading)
{
    <div id="myModal" class="modal">
        <div class="modal-blank">
            <img class="lds-spinner" src="../../assets/image/loader.gif">
            <p><br>Mohon tunggu</p>
            <p>proses sedang berlangsung...</p>
        </div>
    </div>
}
@if (isIdle)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Apakah Anda ingin menambah waktu lagi? <br />
                        Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTime</span> detik.
                    </p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktu))">Ya</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>secondCTime=0)">Tidak</button>
                </div>
            </div>
        </div>
    </div>
}

@code{
    private string strNumber = string.Empty;
    private bool IsVisible = false;
    private bool IsInvalid = false;
    private bool IsLoading = false;
    private bool isSubmit = true;

    //public string _myURL = "https://mygrapari.telkomsel.co.id/trilogi/";
    public string _myURL = string.Empty;
    public string serviceURL = "upgrade-4g/v1/submit-nohp";
    public string saveURL = "log/v1/save";
    private string _termID = string.Empty;
    private string strMsgError = string.Empty;

    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
            cst.Clear();
            OurUtility.Write_Log("= Upgrade dan Ganti Kartu 4G", "step-action");
            OurUtility.Write_Log("== Step 1. Insert Phone Number Page", "step-action");

            #region AfterRenderTimeOut
            await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
            #endregion
        }
    }

    private void OkOnClick(bool visiblestatus)
    {
        if (visiblestatus)
        {
            if (strNumber.Length > 8 && strNumber.Length < 14)
            {
                IsVisible = visiblestatus;
            }
        }
        else
        {
            IsVisible = visiblestatus;
            IsInvalid = visiblestatus;

        }
        isSubmit = true;
    }

    private void InputPhoneNumber(string strInput)
    {
        strNumber += strInput;
    }

    private void RemovePhoneNumber()
    {
        if (strNumber.Length > 0)
            strNumber = strNumber.Substring(0, strNumber.Length - 1);
    }

    private void NavigateTo(string strURL)
    {
        if (strURL != "/main")
        {
            cst.PhoneNumber = "62" + strNumber.Substring(1);
            OurUtility.Write_Log("=== Get Phone Number", "step-action");
        }
        isNotIdle = false;
        NavMan.NavigateTo(strURL);
    }

    private async Task CheckNumber(string strURL)
    {
        if (isSubmit)
        {
            isSubmit = false;
            //Get Start Time For Audit Trail And Transaction Log
            trans.startTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();

            //Set UI Loading
            IsLoading = true;

            //Capture Image From IP CAM
            byte[] image = OurUtility.CaptureImage();
            string imageBytesStr;
            if (image != null)
                imageBytesStr = Convert.ToBase64String(image);
            else
                imageBytesStr = "";

            cst.PhoneNumber = "62" + strNumber.Substring(1);

            //Set HTTP Request Body
            string myJsonForLog = "{ \"terminalId\" : \"" + trans.termID + "\"," +
                            "\"noHp\" : \"" + "62" + strNumber.Substring(1) + "\",";

            string myJson = myJsonForLog +
                            "\"image\" : \"" + imageBytesStr + "\"" +
                            "}";

            //Set HTTP Request URL
            string myURL = _myURL + serviceURL;

            OurUtility.Write_Log("== Check Phone Number", "step-action");
            OurUtility.Write_Log("== Request API : " + myJsonForLog, "step-action");

            //Call HTTP Request
            string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
            ////OurUtility.Write_Log("== Response API : " + strResult, "step-action");

            if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest" && strResult != "Forbidden")
            {
                    try
                    {
                        //Parse HTTP Request Result to JObject
                        JObject jobjResult = JObject.Parse(strResult);

                        //Set transactionID
                        trans.SetTransaction((string)jobjResult["transaction"]["transactionId"]);

                        //Check If statusCode == 00 (Success)
                        if ((string)jobjResult["transaction"]["statusCode"] == "00")
                        {
                            OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Success}", "step-action");

                            //Set Costumer Profile
                            cst.CostumerProfile((string)jobjResult["profile"]["type"], (string)jobjResult["profile"]["nama"], (string)jobjResult["profile"]["noHp"], (string)jobjResult["profile"]["idType"], (string)jobjResult["profile"]["idNumber"]);
                            OurUtility.Write_Log("== Transaction ID : " + trans.transID + ", Phone Number : " + cst.PhoneNumber + " {Success}", "step-action");

                            //Add Step to Audit Trail List
                            trans.AddTrail("SUBMIT NO HP", cst.PhoneNumber, "00");

                            //Navigate to Next Page
                            isNotIdle = false;
                            NavMan.NavigateTo(strURL);
                        }

                        //Check If statusCode == 01 (Error Page)
                        else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                        {
                            if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                            {
                                OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                                trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                            }
                            else
                            {
                                OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                                trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                            }
                            trans.AddTrail("SUBMIT NO HP", cst.PhoneNumber, "01");
                            trans.status = "01";
                            await OurUtility.AuditTrail(trans, menu, cst);
                            isNotIdle = false;
                            NavMan.NavigateTo("/error");
                        }

                        //Check If statusCode == 02 (Error Modal)
                        else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                        {
                            strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                            IsLoading = false;
                            IsVisible = false;
                            IsInvalid = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        trans.AddTrail("SUBMIT NO HP", cst.PhoneNumber, "01");
                        trans.status = "01";
                        await OurUtility.AuditTrail(trans, menu, cst);

                        trans.errorCode = "Exception Error";
                        OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                        isNotIdle = false;
                        NavMan.NavigateTo("/error");
                    }
            }
            else
            {
                trans.errorCode = "Hit WebService Error : " + strResult;
                OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
                isNotIdle = false;
                NavMan.NavigateTo("/error");
            }
        }
    }

    #region TimeOut
    private int counterTime;
    private int counterTreshold = 60;
    private bool isIdle = false;
    private bool isNotIdle = true;

    private async Task IdleTime()
    {
        do
        {
            await Task.Delay(1000);
            //Console.WriteLine("Idle 1 Time Left : " + counterTime.ToString());
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                isIdle = true;
                isNotIdle = false;
                secondCTime = counterTreshold;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdle);
    }
    #endregion

    #region SecondTimeOut
    private int secondCTime;
    private bool isTimeOut = false;

    private async Task TimeOut()
    {
        do
        {
            await Task.Delay(1000);
            //Console.WriteLine("Time 1 Out Left : " + secondCTime.ToString());
            secondCTime = secondCTime - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTime < 0)
            {
                isIdle = false;
                isTimeOut = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdle);
    }

    private async Task TambahWaktu()
    {
        //Console.WriteLine("Tambah Waktu");
        counterTime = counterTreshold;
        //secondCTime = 0;
        isIdle = false;
        isTimeOut = false;
        isNotIdle = true;
        await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOut()
    {
        await Task.Run(() => IdleTime()).ConfigureAwait(false);
        if (isIdle)
            await Task.Run(() => TimeOut()).ConfigureAwait(false);

        if (isTimeOut)
        {
            //Console.WriteLine("Time Out 1");
            isNotIdle = false;
            NavigateTo("/main");
        }
    }

    private async Task ResetTimer()
    {
        if (!isIdle)
        {
            //Console.WriteLine("Timer Reset");
            counterTime = counterTreshold;
        }
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        counterTime = counterTreshold;
    }
}