@page "/u4g/4"
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq; 
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data

@inject Card_Dispenser cds
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan
@inject Costumer cst
@inject Transaction trans  

<div class="main-panel bg-home">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="col-md-6">
                <div class="input-group no-border">
                    <div class="checklist">
                        @if (IsLoading)
                        {
                            <img src="../../assets/image/loader.gif" />
                        }
                        else if (isSuccess)
                        {
                            <img src="../../assets/image/tanda_checklist.png" />
                        }
                        else if (isFail)
                        {
                            <img src="../../assets/image/tanda_x.png" />
                        }
                    </div>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="teks-title">Upgrade dan Ganti Kartu 4G </div>
                    @if (isFail)
                    {
                        <p class="teks-center" style="font-weight: bold;">
                            Proses Upgrade dan Ganti Kartu 4G <br>
                            Tidak Berhasil
                        </p><br>

                        <p class="teks-footer">
                            Silakan Hubungi Customer Service
                            GraPARI untuk Bantuan
                        </p>
                    }
                    else if (isSuccess)
                    {
                        <p class="teks-status"><span style="font-weight: bold;">Proses Upgrade dan Ganti Kartu <span style="color: green;"> Berhasil</span></span></p>
                        <p class="teks-footer">Silakan Ambil Kartu SIM Anda dan Pastikan Melakukan Pengaturan Jaringan 4G pada Perangkat</p>
                    }
                    else
                    {
                        <p class="teks-center">
                            Prose Upgrade dan ganti kartu 4G <br>
                            sedang berjalan, mohon tunggu <br>
                            beberapa saat
                        </p>
                    }
                </div>

                <div class="col-md-6">
                    <div class="image-center">
                        <img src="../../assets/image/card-01.png" alt="" width="350px" height="200px">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<footer>
    <div class="footer-side1">
        <span class="dot">1</span>
        <span class="dot">2</span>
        <span class="dot">3</span>
        <span class="dot" id="dot-active">4</span>
    </div>
    <div class="footer-side2">
        <!-- <button class="btn-arrow btn" value="">Kembali</button>
        <button class="btn-arrow btn" value="">Menu Utama</button>
        <sup>Powered By </sup>Trilogi Persada -->
    </div>
</footer>

@if (IsVisible)
{
    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">Seberapa besar kemungkinan Anda untuk merekomendasikan layanan MyGraPARI kepada teman atau kolega Anda? </p>
                    <button class="btn nps-button" value="1" @onclick="@(() => InputNPS1("1"))">1</button>
                    <button class="btn nps-button" value="2" @onclick="@(() => InputNPS1("2"))">2</button>
                    <button class="btn nps-button" value="3" @onclick="@(() => InputNPS1("3"))">3</button>
                    <button class="btn nps-button" value="4" @onclick="@(() => InputNPS1("4"))">4</button>
                    <button class="btn nps-button" value="5" @onclick="@(() => InputNPS1("5"))">5</button>
                    <button class="btn nps-button" value="6" @onclick="@(() => InputNPS1("6"))">6</button>
                    <button class="btn nps-button" value="7" @onclick="@(() => InputNPS1("7"))">7</button>
                    <button class="btn nps-button" value="8" @onclick="@(() => InputNPS1("8"))">8</button>
                    <button class="btn nps-button" value="9" @onclick="@(() => InputNPS1("9"))">9</button>
                    <button class="btn nps-button" value="10" @onclick="@(() => InputNPS1("10"))">10</button>
                    <button @onclick="CheckNPS" class="btn btn-danger button-nps">OK</button>
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>
    </div>
}

@if (IsVisible2)
{
    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">Hal apa yang Anda rasa perlu ditingkatkan pada mesin layanan MyGraPARI? </p>
                    <div class="modal-flex">
                        <label>
                            <input type="checkbox">
                            <span class="btn ">Tampilan/Estetika</span>
                        </label>

                        <label>
                            <input type="checkbox">
                            <span class="btn " style="margin-left: 40px;">Kecepatan Proses</span>
                        </label>
                    </div>
                    <div class="modal-flex">
                        <label>
                            <input type="checkbox">
                            <span class="btn ">Kemudahan Penggunaan</span>
                        </label>

                        <label>
                            <input type="checkbox">
                            <span class="btn" style="margin-left: 40px;">Kejelasan Bahasa</span>
                        </label>
                    </div>
                    <button class="btn btn-danger button-nps" value="">OK</button>
                </div>
            </div>
        </div>
    </div>
    }

    @code{
private bool IsError = false;
    private bool IsVisible = false;
    private bool IsVisible2 = false;
    private bool IsLoading = false;
    private bool isSuccess = false;
    private bool isFail = false;

    private int intTryCount = 1;
    private int intTryLimit = 3;

    private string strNPS1Value = string.Empty;
    private string[] strNPS2Value = { "", "", "", "" };

    private string msg = string.Empty;
    private string errorcode = string.Empty;
    private string strCOM = "COM6";
    private string readerName = "Generic Smart Card Reader Interface 0";
    private string strPanjang = string.Empty;
    private string p_icc_id = string.Empty;
    private string mypersoexe = "C:\\Perso\\myperso.exe";

    /*JSON POST
            "transactionId" : "didapat dari init awal",
            "terminalId" : "T0999",
            "noHp" : "no hp yang diinput, depanya ganti 62",
            "nik" : "nik yang didapat dari ektp reader",
            "buid" : "buid yang didapat pas init",
            "serialNumber" : "serial number kartu"
            {\"terminalId\": \"T0999\"}*/
    private static string _myURL = "https://a9bea5e9.ngrok.io/";
    private static string persoURL = "mygrapari/upgrade-4g/v1/perso";
    private static string updateURL = "mygrapari/perso/v1/update";
    private static string myJson = string.Empty;

    private void NavigateTo(string strURL)
    {
        NavMan.NavigateTo(strURL);
    }

    protected override async Task OnInitializedAsync()
    {
        OurUtility.Write_Log("== Step 4. Perso Page", "step-action");
        IsLoading = true;

        await MyPerso();

        if (IsError)
        {
            NavMan.NavigateTo("/error");
        }
    }

    public static async Task<string> PostCallAPI(string url, string jsonString)
    {
        string ret = string.Empty;
        try
        {
            using (HttpClient client = new HttpClient())
            {
                var content = new StringContent(jsonString, Encoding.UTF8, "application/json");
                var response = await client.PostAsync(url, content);
                if (response != null)
                {
                    if (response.IsSuccessStatusCode)
                    {
                        var jsonStringResult = await response.Content.ReadAsStringAsync();
                        return jsonStringResult;
                    }
                    else
                    {
                        return response.StatusCode.ToString();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("==" + ex.Message, "step-action");
        }
        return ret;
    }

    private async Task MyPerso()
    {
        while (intTryCount < intTryLimit)
        {
            await Task.Run(() => MoveToICC());
            await CardReaderScan();

            string myURL = _myURL + persoURL;
            //ToDO add if trans.transID != null
            string myJson = "{ \"terminalId\" : \"" + trans.termID + "\"," +
                            "\"noHp\" : \"" + cst.PhoneNumber + "\"," +
                            "\"nik\" : \"1771011209620002\"," +
                            "\"buid\" : \"" + trans.buID + "\"," +
                            "\"serialNumber\" : \"" + p_icc_id + "\"" +
                            "}";

            OurUtility.Write_Log("=== URL : " + myURL, "step-action");
            OurUtility.Write_Log("=== Request API : " + myJson, "step-action");
            string strResult = await PostCallAPI(myURL, myJson);
            OurUtility.Write_Log("=== Response API : " + strResult, "step-action");
            if (strResult != null)
            {
                try
                {
                    JObject jobjResult = JObject.Parse(strResult);
                    trans.transID = (string)jobjResult["transaction"]["transactionId"];
                    if ((string)jobjResult["transaction"]["statusCode"] == "00")
                    {
                        strPanjang = (string)jobjResult["perso"]["message"];
                        if (strPanjang != null)
                        {
                            trans.persoID = (string)jobjResult["perso"]["persoId"];
                            if (await Task.Run(() => OurUtility.MyPerso(mypersoexe, strPanjang, ref msg)))
                            {
                                myURL = _myURL + updateURL;
                                myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                    "\"terminalId\" : \"" + trans.termID + "\"," +
                                    "\"persoId\" : \"" + trans.persoID + "\" ," +
                                    "\"persoStatus\" : \"2\"}";
                                OurUtility.Write_Log("=== Update Perso Status", "step-action");
                                OurUtility.Write_Log("=== Request API : " + myJson, "step-action");
                                strResult = await PostCallAPI(myURL, myJson);
                                OurUtility.Write_Log("=== Response API : " + strResult, "step-action");

                                IsLoading = false;
                                isSuccess = true;
                                await Task.Run(() => MoveToTheFront());
                                break;
                            }
                            else
                            {
                                trans.mypersoResponse = msg;
                                await Task.Run(() => MoveToBin());
                                if (intTryCount <= intTryLimit)
                                    intTryCount += 1;
                                else
                                    isFail = true;
                                myURL = _myURL + updateURL;
                                myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                    "\"terminalId\" : \"" + trans.termID + "\"," +
                                    "\"persoId\" : \"" + trans.persoID + "\" ," +
                                    "\"persoStatus\" : \"3\"}";
                                OurUtility.Write_Log("=== Update Perso Status", "step-action");
                                OurUtility.Write_Log("=== Request API : " + myJson, "step-action");
                                strResult = await PostCallAPI(myURL, myJson);
                                OurUtility.Write_Log("=== Response API : " + strResult, "step-action");
                            }
                        }
                        else
                        {
                            IsError = true;
                            break;
                        }
                    }
                    else
                    {
                        if ((string)jobjResult["transaction"]["errorCode"] != null)
                        {
                            OurUtility.Write_Log("=== Status Code : " + (string)jobjResult["transaction"]["statusDesc"] + " {Error}", "step-action");
                            trans.errorCode = (string)jobjResult["transaction"]["statusDesc"];
                        }
                        else
                        {
                            string _statusDescSub = ((string)jobjResult["transaction"]["statusDesc"]);
                            if (_statusDescSub != null)
                            {
                                string statusDescSub = _statusDescSub.Substring(0, _statusDescSub.IndexOf(":"));
                                OurUtility.Write_Log("=== Status Code : " + statusDescSub + " {Error}", "step-action");
                                trans.errorCode = statusDescSub;
                            }
                            else
                            {
                                OurUtility.Write_Log("=== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Error}", "step-action");
                                trans.errorCode = (string)jobjResult["transaction"]["statusCode"];
                            }
                        }
                        IsError = true;
                        await Task.Run(() => MoveToBin());
                        break;
                    }
                }
                catch (Exception ex)
                {
                    OurUtility.Write_Log("=== Status Code : " + strResult + " {Error}", "step-action");
                    trans.errorCode = strResult;
                    IsError = true;
                    break;
                }
            }
            else
            {
                OurUtility.Write_Log("=== Status Code : " + strResult + " {Error}", "step-action");
                trans.errorCode = strResult;
                IsError = true;
                break;
            }
        }
    }

    private async Task CheckPerso()
    {
        if (!IsLoading && !isSuccess && !isFail && !IsVisible)
        {
            IsLoading = true;
        }
        else if (IsLoading && !isSuccess)
        {
            IsLoading = false;
            if (intTryCount <= intTryLimit)
                intTryCount += 1;
            else
                isFail = true;
        }
    }

    private void InputNPS1(string strInput)
    {
        strNPS1Value = strInput;
    }

    private async Task CheckNPS()
    {
        if (!IsVisible)
        {
            IsVisible = true;
        }
        else
        {
            strNPS1Value = string.Empty;
            IsVisible = false;
            IsVisible2 = true;
        }
    }

    private void MoveToICC()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To IC Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed " + errorcode + "message: " + msg, "step-action");
            return;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_IC_Card", "step-action");
        while (!cds.MoveTo_IC_Card(ref errorcode, ref msg)) { }
        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
    }

    private void MoveToTheFront()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To The Front Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed", "step-action");
            return;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Front_Hold", "step-action");
        cds.MoveTo_The_Front(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
    }

    private void MoveToBin()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To Bin Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed", "step-action");
            return;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Bin", "step-action");
        cds.MoveTo_Bin(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
    }

    private async Task CardReaderScan()
    {
        OurUtility.Write_Log("=== Card Reader Scan IC", "step-action");
        Card_Reader cdr = new Card_Reader();
        OurUtility.Write_Log("==== 1. Card_Reader.Read", "step-action");
        if (await Task.Run(() => cdr.Read(readerName, ref p_icc_id, ref msg)).ConfigureAwait(true))
        {
            cdr.DisconnectedCard();
        }
    }
    }
