@page "/devicetest"
@inject IJSRuntime JSRuntime;

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data
@using System.IO.Ports

@inject Ektp_Data ktp
@inject Card_Dispenser cds
@inject Menu menu
@inject Costumer cst
@inject NavigationManager NavMan
@inject Transaction trans
@inject Config config
@inject EDC edc

<div class="main-panel bg-home">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>


            <form class="navbar-form">
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6" style="text-align: left;">
                    <button @onclick="Payment" class="btn-arrow-red btn">Payment EDC</button>
                    <button @onclick="Void" class="btn-arrow-red btn">Void EDC</button>
                    <button @onclick="BillAcceptor" class="btn-arrow-red btn">Start Bill</button>
                    <button @onclick="@(()=>loopCash=false)" class="btn-arrow-red btn">Stop Bill</button>
                    <button @onclick="MoveToTheFront" class="btn-arrow-red btn">Front</button>
                    <button @onclick="MoveToICC" class="btn-arrow-red btn">ICC</button>
                    <button @onclick="MoveToBin" class="btn-arrow-red btn">BIN</button>
                    <button @onclick="ScanKTP" class="btn-arrow-red btn">EKTP</button>
                </div>
                <div class="col-md-6" style="text-align: left;">

                    <button @onclick="@(()=>isVisible2=true)" class="btn-arrow btn" value="">Kembali</button>
                    <button @onclick="@(()=>isVisible2=true)" class="btn-arrow-red btn" value="">Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
</div>

<footer>
    <div class="footer-side-left">
        <span class="dot-trans"></span>
        <span class="dot-trans"></span>
        <span class="dot-trans"></span>
        <span class="dot-trans"></span>
    </div>
    <div class="footer-side-right">
        <!-- <sup>Powered By </sup>Trilogi Persada -->
    </div>
</footer>

<!-- The Modal -->
@if (isVisible2)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">Apakah Anda Ingin Kembali Ke Halaman Login?</p>
                    <button @onclick="@(()=>NavigateTo("/login"))" class="btn btn-danger modal-button">Lanjut</button>
                    <button class="btn btn-light modal-button" @onclick="@(() => isVisible2=false)">Batal</button>
                </div>
            </div>
        </div>
    </div>
}

@code{
    private string userName = string.Empty;
    private string password = string.Empty;
    private string passcode = string.Empty;
    private bool IsVisible = false;
    private bool isVisible2 = false;
    private bool IsLoading = false;

    private int pos = 7;
    //public string _myURL = "https://mygrapari.telkomsel.co.id/trilogi/";
    public string _myURL = string.Empty;
    public string serviceURL = "upgrade-4g/v1/submit-nohp";
    private string _termID = string.Empty;
    private string strMsgError = string.Empty;

    private string msg = string.Empty;
    private string errorcode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        cst.Clear();
        OurUtility.Write_Log("= Card Dispenser", "step-action");
    }

    private void InputPhoneNumber(string strInput)
    {
        userName += strInput;
    }

    private void RemovePhoneNumber()
    {
        if (userName.Length > 0)
            userName = userName.Substring(0, userName.Length - 1);
    }

    private void NavigateTo(string strURL)
    {
        if (strURL != "")
        {
            OurUtility.Write_Log("=== Get Phone Number", "step-action");
        }
        NavMan.NavigateTo(strURL);
    }
    private async Task Save()
    {
        config.Write("Dispenser", Config.PARAM_STOCK_DISPENSER_1, userName);
        IsVisible = false;
    }
    CPayout Payout = new CPayout();
    Global global = new Global();
    int inttotal = 0;

    int reconnectionAttempts = 5;
    bool Running = false;
    private byte FindMaxProtocolVersion()
    {
        byte b = 0x06;
        while (true)
        {
            Payout.SetProtocolVersion(b);
            if (Payout.CommandStructure.ResponseData[0] == CCommands.SSP_RESPONSE_FAIL)
                return --b;
            b++;
            if (b > 12)
                return 0x06; // return default
        }
    }
    private bool IsUnitValid(char unitType)
    {
        if (unitType == (char)0x00) // 0x06 is Payout, no other types supported by this program
            return true;
        return false;
    }
    private bool ConnectToValidator(int attemps, int interval)
    {
        //reconnectionTimer.Interval = interval * 1000;
        Task.Delay(interval * 1000).GetAwaiter();
        for (int i = 0; i < attemps; i++)
        {
            Payout.SSPComms.CloseComPort();
            Payout.CommandStructure.EncryptionStatus = false;
            if (Payout.OpenComPort() && Payout.NegotiateKeys())
            {
                Payout.CommandStructure.EncryptionStatus = true;
                byte maxPVersion = FindMaxProtocolVersion();
                if (maxPVersion >= 6)
                {
                    Payout.SetProtocolVersion(maxPVersion);
                }
                else
                {
                    return false;
                }
                Payout.PayoutSetupRequest();
                if (!IsUnitValid(Payout.UnitType))
                {
                    break;
                    return false;
                }

                Payout.SetInhibits();
                Payout.GetSerialNumber();
                Payout.EnableValidator();
                Payout.EnablePayout();
                return true;
            }
        }
        return false;
    }
    bool loopCash = false;
    private async Task MainLoop()
    {
        try
        {
            Payout.CommandStructure.ComPort = global.ComPort;
            Payout.CommandStructure.SSPAddress = global.SSPAddress;
            Payout.CommandStructure.Timeout = 3000;
            Payout.HoldNumber = 0;

            if (ConnectToValidator(reconnectionAttempts, 2))
            {
                //Console.WriteLine("1");
                Running = true;
                //Payout.ConfigureBezel(0x00, 0xFF, 0x00);
            }

            while (loopCash)
            {
                await Task.Delay(1000);
                //Console.WriteLine("2");
                if (!Payout.DoPoll())
                {
                    //Console.WriteLine("Poll failed, attempting to reconnect...\r\n");
                    while (true)
                    {
                        Payout.SSPComms.CloseComPort();
                        if (ConnectToValidator(reconnectionAttempts, 2) == true)
                            break;
                        Payout.SSPComms.CloseComPort();
                        return;
                    }
                    //Console.WriteLine("Reconnected\r\n");
                }
                //Console.WriteLine("9");
                inttotal = Payout.total;
                //Console.WriteLine("inttotal = " + inttotal);
                StateHasChanged();
                // UpdateUI();
                //if(!bFormSetup)
                //{
                //}
            }

            //Console.WriteLine("10");
            Payout.DisableValidator();
            Payout.SSPComms.CloseComPort();
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
            trans.AddTrail("BILL ACCEPTOR", "", "01");
            return;
        }
    }
    private async Task BillAcceptor()
    {
        Payout.total = 0;
        Payout.uangCount = 0;
        int logbank = Int32.Parse(config.Read("BILL", Config.PARAM_BILL_BANK_STOK));
        int logamount = Int32.Parse(config.Read("BILL", Config.PARAM_BILL_AMOUNT));
        loopCash = true;
        await MainLoop();
        logamount = logamount + Payout.total;
        logbank = logbank + Payout.uangCount;
        config.Write("BILL", Config.PARAM_BILL_AMOUNT, logamount.ToString());
        config.Write("BILL", Config.PARAM_BILL_BANK_STOK, logbank.ToString());
    }
    private async Task Void()
    {
        //string strInvoice = "18";
        string strBilling = "2";
        string strBill = "1000";
        int MetodePembayaran = 1;
        string strCOM = "COM" + config.Read("EDC", Config.PARAM_EDC_PORT);
        await Void(strCOM, strBill, strTrace, strBilling, MetodePembayaran.ToString());
    }
    private async Task Void(string serialPortName, string tagihan, string invoice, string billing, string mPemabayaran)
    {
        string _transType = "02";
        edc.Clear();
        edc.serialPort = new SerialPort();
        edc.serialPort.PortName = serialPortName;
        edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceived);
        do
        {
            await Task.Delay(2000);
            if (edc.respondCode == "00")
            {
                //IsVoided = true;
                //trans.edcStatus = "VOIDED";
                //OurUtility.Write_Log("== Payment Voided", "step-action");
                //trans.AddTrail("VOID EDC", edc.respondCode, "00");

                break;
            }
            //if (edc.intTry > intTryLimit)
            //break;

            edc.SendCommand(tagihan, edc.serialPort, _transType, invoice, billing, mPemabayaran);

            //(edc.respondCode);

        } while (!edc.mre.WaitOne());
        trans.ecr = edc.ecr;
        trans.edcresp = edc.respondCode;
        trans.edcApproval = trans.ecr.Substring(140, 6);
        trans.edcTid = trans.ecr.Substring(2, 8);
        trans.edcMid = trans.ecr.Substring(10, 15);
        trans.edcBatch = trans.ecr.Substring(25, 6);
        trans.edcIssuer = trans.ecr.Substring(31, 15);
        trans.edcTrace = trans.ecr.Substring(52, 6);
        trans.edcRefNo = trans.ecr.Substring(46, 6);
        trans.edcCardNo = trans.ecr.Substring(83, 19);
        trans.edcCardName = trans.ecr.Substring(102, 26);
        trans.edcDate = trans.ecr.Substring(128, 6);
        trans.edcTime = trans.ecr.Substring(134, 6);
    }
    private string strTrace = "";
    private async Task Payment()
    {
        string strInvoice = "1";
        string strBilling = "2";
        string strBill = "1000";
        int MetodePembayaran = 1;
        string strCOM = "COM" + config.Read("EDC", Config.PARAM_EDC_PORT);
        await Pay(strCOM, strBill, strInvoice, strBilling, MetodePembayaran.ToString());
    }

    private async Task Pay(string serialPortName, string tagihan, string invoice, string billing, string mPemabayaran)
    {
        try
        {
            OurUtility.Write_Log("== Device Test EDC", "step-action");
            string _transType = "01";
            //cst.intTagihanTerbayar = intBill;
            edc.Clear();
            edc.serialPort = new SerialPort();
            edc.serialPort.PortName = serialPortName;
            //edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceived);
            do
            {
                edc.SendCommand(tagihan, edc.serialPort, _transType, invoice, billing, mPemabayaran);

                await Task.Delay(2000);
                if (edc.respondCode == "00")
                {
                    //OurUtility.Write_Log("== Payment Via EDC Success", "step-action");
                    //trans.AddTrail("PAYMENT EDC", edc.respondCode, "00");

                    trans.ecr = edc.ecr;
                    trans.edcresp = edc.respondCode;
                    IsLoading = true;
                    //pageClass = "main-panel bg-home";
                    return;
                }
                //edc.mre.WaitOne();
            } while (!edc.mre.WaitOne());
            //} while (edc.intTry < 3);
            trans.ecr = edc.ecr;
            trans.edcresp = edc.respondCode;
            trans.edcApproval = trans.ecr.Substring(140, 6);
            trans.edcTid = trans.ecr.Substring(2, 8);
            trans.edcMid = trans.ecr.Substring(10, 15);
            trans.edcBatch = trans.ecr.Substring(25, 6);
            trans.edcIssuer = trans.ecr.Substring(31, 15);
            trans.edcTrace = trans.ecr.Substring(52, 6);
            trans.edcRefNo = trans.ecr.Substring(46, 6);
            trans.edcCardNo = trans.ecr.Substring(83, 19);
            trans.edcCardName = trans.ecr.Substring(102, 26);
            trans.edcDate = trans.ecr.Substring(128, 6);
            trans.edcTime = trans.ecr.Substring(134, 6);
            strTrace = trans.edcTrace;
            //(trans.edcresp);
        }
        catch (Exception ex)
        {
            //Console.WriteLine(ex.Message);
        }
    }
    private async Task CheckNumber(string strURL)
    {

        //Set HTTP Request Body
        string myJson = "{ \"terminalId\" : \"" + trans.termID + "\"" +
                        "}";

        //Set HTTP Request URL
        string myURL = _myURL + serviceURL;

        OurUtility.Write_Log("== Check Phone Number", "step-action");
        //OurUtility.Write_Log("== Request API : " + myJson, "step-action");

        //Call HTTP Request
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        ////OurUtility.Write_Log("== Response API : " + strResult, "step-action");

        if (strResult != "")
        {
            try
            {
                //Parse HTTP Request Result to JObject
                JObject jobjResult = JObject.Parse(strResult);

                //Check If statusCode == 00 (Success)
                if ((string)jobjResult["transaction"]["statusCode"] == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Success}", "step-action");
                }

                //Check If statusCode == 01 (Error Page)
                else if ((string)jobjResult["transaction"]["statusCode"] == "01")
                {
                    NavMan.NavigateTo("/error");
                }

                //Check If statusCode == 02 (Error Modal)
                else if ((string)jobjResult["transaction"]["statusCode"] == "02")
                {

                }
            }
            catch (Exception ex)
            {
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                NavMan.NavigateTo("/error");
            }
        }
        else
        {
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            NavMan.NavigateTo("/error");
        }
    }

    [Microsoft.AspNetCore.Components.Inject]

    protected Microsoft.JSInterop.IJSRuntime theJavaScriptEngine { get; set; }

    [Microsoft.AspNetCore.Components.Inject]

    protected Microsoft.AspNetCore.Components.NavigationManager theNavigationManager { get; set; }

    private bool timer = false;
    protected override void OnAfterRender(bool bFirstRender)
    {
        if (bFirstRender)
        {
            timer = true;
            theJavaScriptEngine.InvokeAsync<System.Object>("setupUserIdleTimer", new object[] { Microsoft.JSInterop.DotNetObjectReference.Create(this), 60000, true });

            this.StateHasChanged();
        }
    }

    private void MoveToICC()
    {
        string strCOM = "COM" + config.Read("Dispenser", Config.PARAM_DEVICE_DISPENSER);
        //int stock = Int32.Parse(config.Read("Dispenser", Config.PARAM_STOCK_DISPENSER_1));

        //OurUtility.Write_Log("=== Card Dispenser Move To IC Position", "step-action");
        //OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        //OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            //OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed " + errorcode + "message: " + msg, "step-action");
            return;
        }
        //OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        //OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_ICC_Card", "step-action");
        if (!cds.MoveTo_IC_Card(ref errorcode, ref msg))
        {
            //OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_ICC_Card, Failed " + errorcode + " message : " + msg, "step-action");
            return;
        }
        //OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        return;
    }

    private void MoveToBin()
    {
        string strCOM = "COM" + config.Read("Dispenser", Config.PARAM_DEVICE_DISPENSER);
        int stock = Int32.Parse(config.Read("Dispenser", Config.PARAM_STOCK_DISPENSER_1));

        //OurUtility.Write_Log("=== Card Dispenser Move To Bin Position", "step-action");
        //OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        //OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            //OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed", "step-action");
            return;
        }
        //OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        //OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Bin", "step-action");
        cds.MoveTo_Bin(ref errorcode, ref msg);

        stock = stock - 1;
        trans.jumlah_kartu = stock;
        config.Write("Dispenser", Config.PARAM_STOCK_DISPENSER_1, trans.jumlah_kartu.ToString());

        //OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
    }
    private void MoveToTheFront()
    {
        string strCOM = "COM" + config.Read("Dispenser", Config.PARAM_DEVICE_DISPENSER);
        int stock = Int32.Parse(config.Read("Dispenser", Config.PARAM_STOCK_DISPENSER_1));
        //OurUtility.Write_Log("=== Card Dispenser Move To The Front Position", "step-action");
        //OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        //OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            //OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed", "step-action");
            return;
        }
        //OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        //OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Front_Hold", "step-action");
        if (!cds.MoveTo_The_Front(ref errorcode, ref msg))
        {
            trans.AddTrail("MOVE TO FRONT", "", "01");
            //OurUtility.Write_Log("==== 5. Card_Dispenser.MoveToTheFront, Failed", "step-action");
            return;
        }
        //trans.AddTrail("MOVE TO FRONT", "", "00");
        stock = stock - 1;
        config.Write("Dispenser", Config.PARAM_STOCK_DISPENSER_1, stock.ToString());
        //OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
    }

    private IntPtr hContext = IntPtr.Zero;
    byte[] pbPcid;
    byte[] pbConf;
    private bool IsFail = false;
    private bool IsNext = false;
    private async Task ScanKTP()
    {
        Ektp ektpsdk = new Ektp();
        pbPcid = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_PCID), ","));
        pbConf = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_CONF), ","));

        OurUtility.Write_Log("==== Scan e-KTP", "step-action");
        OurUtility.Write_Log("===== 1. Ektp_Sdk.EktpCstablishContext eKTP", "step-action");
        if (Ektp_Sdk.EktpEstablishContext(ref hContext) == 0)
        {
            OurUtility.Write_Log("===== 2. Ektp_Sdk.EktpSetAttrib PCID eKTP", "step-action");
            Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_PCID, pbPcid, pbPcid.Length);
            OurUtility.Write_Log("===== 3. Ektp_Sdk.EktpSetAttrib CONF eKTP", "step-action");
            Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_CONFIG, pbConf, pbConf.Length);
        }
        OurUtility.Write_Log("===== 4. Ektp_Sdk.EktpConnect", "step-action");
        await Task.Run(() => Ektp_Sdk.EktpConnect(ref hContext, pbPcid, 16, pbConf, 32));

        int length = 2048;
        byte[] tempBuffer = new byte[length];
        int ret = -1;
        OurUtility.Write_Log("===== 5. Ektp_Sdk.ReadDemographic From eKTP", "step-action");
        ret = await Task.Run(() => Ektp_Sdk.ReadDemographic(hContext, ref length, tempBuffer));
        //bool resp = ektpsdk.
        if (length == 0 || ret != 0)
        {
            OurUtility.Write_Log("===== 6. Ektp_Sdk.ReadDemographic Failed", "step-action");
            IsLoading = false;

            return;
        }
        byte[] demoGraphic = new byte[length];
        for (int i = 0; i < length; i++)
        {
            demoGraphic[i] = tempBuffer[i];
        }
        OurUtility.Write_Log("===== 6. Ektp_Sdk.ReadDemographic Success", "step-action");
        ktp.demographic = demoGraphic;

        IsVisible = false;
        IsNext = true;

        if (IsNext)
        {
            byte[] lengthtest = new byte[4];
            byte[] datatest;
            int sizetest;

            // Minutiae1
            sizetest = lengthtest.Length;
            ret = Ektp_Sdk.EktpGetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_MINUTIAE1_SIZE, lengthtest, ref sizetest);

            sizetest = BitConverter.ToInt32(lengthtest, 0);
            datatest = new byte[sizetest];

            ret = Ektp_Sdk.EktpGetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_MINUTIAE1, datatest, ref sizetest);

            ktp.minutiae1 = datatest;
            ktp.minu1len = sizetest;

            //int leftLen = 2048, rightLen = 2048;//max size is photo size(about 1700 bytes)
            ret = await Task.Run(() => Ektp_Sdk.ReadLeftFingerPrint(hContext, ref length, tempBuffer));
            int leftLen = length;
            byte[] leftData = tempBuffer;

            ret = await Task.Run(() => Ektp_Sdk.ReadRightFingerPrint(hContext, ref length, tempBuffer));
            int rightLen = length;
            byte[] rightData = tempBuffer;

            OurUtility.Write_Log("===== 7. Ektp_Sdk.ReadFingerPrints", "step-action");
            //ret = await Task.Run(() => Ektp_Sdk.ReadFingerPrints(hContext, ref leftLen, leftData, ref rightLen, rightData));

            if (leftLen == 0 || rightLen == 0)
            {
                OurUtility.Write_Log("===== 8. Ektp_Sdk.ReadFingerPrints Failed", "step-action");
                return;
            }
            ktp.minutiae1 = leftData;
            ktp.minutiae2 = rightData;
            ktp.minu1len = leftLen;
            ktp.minu2len = rightLen;

            OurUtility.Write_Log("===== 8. Ektp_Sdk.ReadFingerPrints Success", "step-action");
            OurUtility.Write_Log("==== Scan FingerPrint", "step-action");
            OurUtility.Write_Log("===== 1. Ektp_Sdk.EktpConnect, Connect Reader", "step-action");
            await Task.Run(() => Ektp_Sdk.EktpConnect(ref hContext, pbPcid, 16, pbConf, 32));

            OurUtility.Write_Log("===== 2. Ektp_Sdk.OpenFingerPrintReader", "step-action");

            // -- Step 2, Open Device Fingerprint
            IntPtr reader = IntPtr.Zero;
            int result = -1;
            result = await Task.Run(() => Ektp_Sdk.OpenFingerPrintReader(ref reader, "uareu")).ConfigureAwait(false);
            if (reader == IntPtr.Zero)
            {
                OurUtility.Write_Log("===== 3. Ektp_Sdk.OpenFingerPrintReader Failed", "step-action");

                //Switcher.DOWN_eKTP(config_MyGraPARI.Read("MyGraPARI", Config.PARAM_DELAY_USB_DOWN));
            }
            else
            {
                OurUtility.Write_Log("===== 3. Ektp_Sdk.OpenFingerPrintReader Success", "step-action");
                OurUtility.Write_Log("===== 4. Ektp_Sdk.StartEngine", "step-action");

                IntPtr engine = IntPtr.Zero;
                int engineType = 0;//engineType = 0, it means that finger print engine is uareu
                result = await Task.Run(() => Ektp_Sdk.StartEngine(engineType, ref engine)).ConfigureAwait(false);
                if (engine == IntPtr.Zero)
                {
                    OurUtility.Write_Log("===== 5. Ektp_Sdk.StartEngine Failed", "step-action");
                }
                else
                {
                    OurUtility.Write_Log("===== 5. Ektp_Sdk.StartEngine Success", "step-action");

                    int size = 120000;
                    int score = -1;
                    byte[] image = new byte[size];
                    result = await Task.Run(() => Ektp_Sdk.CaptureFingerPrint(reader, image, ref size, ref score));
                    if (result != 0)
                    {
                        OurUtility.Write_Log("===== 7. Ektp_Sdk.CaptureFingerPrint Failed", "step-action");
                        //break;
                    }
                    else
                    {
                        //FingerPosition fingerprintPosition = (FingerPosition)pos;
                        //                        IFingerprintFeature feature = null;

                        //byte[] iso = FingerprintImageHelper.RawToISO(image, 300, 400,fingerprintPosition, 0, 600);
                        // -- Step 5, Compare

                        int matched = 0;//matched == 1, it means finger print matched
                        int format = 0;//format == 0, it means finger print template type is ISO

                        //matched right finger
                        result = await Task.Run(() => Ektp_Sdk.MatchFingerPrint(engine, image, size,
                                                        ktp.minutiae2, ktp.minu2len,
                                                        ref score, ref matched, format)).ConfigureAwait(false);


                        if (matched == 1)
                        {
                            IsLoading = false;
                            //break;
                        }
                        else
                        {
                            result = await Task.Run(() => Ektp_Sdk.MatchFingerPrint(engine, image, size,
                                                            ktp.minutiae1, ktp.minu1len,
                                                            ref score, ref matched, format)).ConfigureAwait(false);
                            if (matched == 1)
                            {
                                cst.EKTPNumber = ktp.Id;
                                //OurUtility.Write_Log("===== NIK : " + cst.EKTPNumber, "step-action");
                                IsLoading = false;

                                OurUtility.Write_Log("===== 10. Ektp_Sdk.CloseReader", "step-action");
                                result = Ektp_Sdk.CloseReader(reader);

                                //OurUtility.Write_Log("=== Switcher.DOWN_eKTP", "step-action");
                                //Switcher.DOWN("500",config.usbEKTP);

                                //break;
                            }
                            else
                            {

                                OurUtility.Write_Log("===== 10. Ektp_Sdk.CloseReader", "step-action");
                                result = Ektp_Sdk.CloseReader(reader);
                                IsFail = true;
                            }
                        }
                    }
                }
            }
        }
    }

    [Microsoft.JSInterop.JSInvokable]

    public void theIdleTimeoutFired()
    {
        if (timer)
        {
            timer = false;
            //NavMan.NavigateTo(" ");
        }
    }
}