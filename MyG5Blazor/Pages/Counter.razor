@page "/counter"
@inject IJSRuntime JSRuntime;
@inject BlazorTimer Timer
@inject NavigationManager NavMan
@inject Ektp_Data ktp
@inject Costumer cst
@inject Config config
@inject Transaction trans 
@using MyG5Blazor.Data

<h1>Counter</h1>

<p>Id: @ktp.Id</p>
<p>Nama: @ktp.Name</p>
<p>Card SN : @p_icc_id</p>
<button class="btn btn-primary" @onclick="TestString">Click me</button>

@code {
    private int currentCount = 0;
    private IntPtr hContext = IntPtr.Zero;
    private string readerName = string.Empty;
    private string p_icc_id = string.Empty;
    private string msg = string.Empty;

    byte[] pbPcid;

    byte[] pbConf;

    protected override async Task OnInitializedAsync()
    {
        await StringToDate();
        pbPcid = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_PCID), ","));
        pbConf = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_CONF), ","));
        readerName = config.Read("Dispenser", Config.PARAM_DEVICE_CARD_READER);
    }

    private async Task TesReader()
    {
        Card_Reader cdr = new Card_Reader();
        if (await Task.Run(() => cdr.Read(readerName, ref p_icc_id, ref msg)).ConfigureAwait(true))
        {
            cdr.DisconnectedCard();
        }
        //Console.WriteLine("SN : " + p_icc_id);
    }
    private void IncrementCount()
    {
        currentCount++;
    }
    private async Task TestString()
    {
        string tes = RandomString(10);
        //Console.WriteLine(tes);
    }

    public static string RandomString(int stringLength)
    {
        Random rd = new Random();
        const string allowedChars = "ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789";
        char[] chars = new char[stringLength];

        for (int i = 0; i < stringLength; i++)
        {
            chars[i] = allowedChars[rd.Next(0, allowedChars.Length)];
        }

        return new string(chars);
    }
    private async Task ScanKTP()
    {
        if (Ektp_Sdk.EktpEstablishContext(ref hContext) == 0)
        {
            Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_PCID, pbPcid, pbPcid.Length);
            Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_CONFIG, pbConf, pbConf.Length);
        }
        await Task.Run(() => Ektp_Sdk.EktpConnect(ref hContext, pbPcid, 16, pbConf, 32));

        int length = 2048;
        byte[] tempBuffer = new byte[length];
        int ret = -1;
        ret = await Task.Run(() => Ektp_Sdk.ReadDemographic(hContext, ref length, tempBuffer)).ConfigureAwait(false);
        if (length == 0 || ret != 0)
        {
            //Console.WriteLine("1");
            return;
        }
        byte[] demoGraphic = new byte[length];
        for (int i = 0; i < length; i++)
        {
            demoGraphic[i] = tempBuffer[i];
        }
        ktp.demographic = demoGraphic;

        StateHasChanged();
    }
    private async Task Print()
    {
        int height = 0;

        PrintContent prtContent = new PrintContent();
        string msg = string.Empty;
        string logoTsel = "C:\\MyGApps\\wwwroot\\assets\\image\\Logo\\Logo_MyGraPARI_mini.png";

        string content = prtContent.GK(trans, cst, config);
        string header = prtContent.HeaderGK(trans, cst, config);
        string footer = prtContent.FooterGK(trans, cst, config);
        bool result = Printer.Print(config, header, content, logoTsel, footer, ref msg);
    }
    int c1 = 30;

    private static System.Timers.Timer aTimer;
    void test()
    {
        c1 = 30;
    }
    void tt()
    {
        if (aTimer is null)
        {
            aTimer = new System.Timers.Timer(1000);
            aTimer.Elapsed += (sender, args) => { c1 = c1 < 2 ? 30 : c1 - 1; InvokeAsync(StateHasChanged); };
            aTimer.AutoReset = true;
            aTimer.Enabled = true;
        }
        else
        {
            aTimer.Stop();
            aTimer.Dispose();
            aTimer = null;
        }
    }
    private async Task StringToDate()
    {
        string input = "20-8-2000";
        string temp = input;
        string tanggal = temp.Substring(0, temp.IndexOf("-"));
        string tahun = string.Empty;
        string bulan = string.Empty;
        string output = string.Empty;

        if (tanggal.Length < 3)
        {
            if (tanggal.Length == 1)
            {
                tanggal = "0" + tanggal;
            }
            temp = temp.Substring(temp.IndexOf("-") + 1);
            bulan = temp.Substring(0, temp.IndexOf("-"));
            if (bulan.Length == 1)
            {
                bulan = "0" + bulan;
            }
            tahun = temp.Substring(temp.IndexOf("-") + 1);
            output = tahun + "-" + bulan + "-" + tanggal;
        }
    }
}
