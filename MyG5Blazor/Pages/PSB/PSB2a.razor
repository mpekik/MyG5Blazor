@page "/PSB/2a"
@inject IJSRuntime JSRuntime;

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data

@inject Costumer cst
@inject NavigationManager NavMan
@inject Transaction trans
@inject Config config
@inject Menu menu
<div class="main-panel bg-home">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>


            <form class="navbar-form">
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <p class="teks-title2">Berlangganan KartuHalo</p>
                    <div class="teks-top3">
                        <p>Kami telah mengirimkan kode verifikasi melalui e-mail ke:</p> <br>
                        <p style="font-weight:bold">@trans.psbDetail.alamatEmail</p> <br>
                        <p>Harap ketikkan 6-digit kode verifikasi tersebut.</p> <br>
                        <p style="font-size:small; font-style:italic">Jika anda tidak menerima e-mail kami, Anda bisa meminta pengiriman ulang dalam @counterTime.ToString() detik (max 3 kali pengiriman ulang).</p>
                    </div>
                </div>

                <div class="col-md-6">

                    @*<input type="text" name="number" class="num-field" @bind="otp" readonly />*@

                    <div class="text-primary">
                        <div style="text-align: center;">
                            <form class="row">
                                <div class="omrs-input-group">
                                    <label class="omrs-input-underlined">

                                            <input @bind="otp1" required readonly>
                                            <input @bind="otp2" style="margin-left: 3%;" required readonly>
                                            <input @bind="otp3" style="margin-left: 3%;" required readonly>
                                            <input @bind="otp4" style="margin-left: 3%;" required readonly>
                                            <input @bind="otp5" style="margin-left: 3%;" required readonly>
                                            <input @bind="otp6" style="margin-left: 3%;" required readonly>
                          
                                    </label>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="num-button">
                        <button class="key-num btn" value="1" @onclick="@(() => InputPhoneNumber("1"))">1</button>
                        <button class="key-num btn" value="2" @onclick="@(() => InputPhoneNumber("2"))">2</button>
                        <button class="key-num btn" value="3" @onclick="@(() => InputPhoneNumber("3"))">3</button>
                        <button class="key-num btn" value="4" @onclick="@(() => InputPhoneNumber("4"))">4</button>
                        <button class="key-num btn" value="5" @onclick="@(() => InputPhoneNumber("5"))">5</button>
                        <button class="key-num btn" value="6" @onclick="@(() => InputPhoneNumber("6"))">6</button>
                        <button class="key-num btn" value="7" @onclick="@(() => InputPhoneNumber("7"))">7</button>
                        <button class="key-num btn" value="8" @onclick="@(() => InputPhoneNumber("8"))">8</button>
                        <button class="key-num btn" value="9" @onclick="@(() => InputPhoneNumber("9"))">9</button>
                        <button class="key-num btn btn-hapus" value="Hapus" @onclick="RemovePhoneNumber">Hapus</button>
                        <button class="key-num btn" value="0" id="myBtnUndefine" @onclick="@(() => InputPhoneNumber("0"))">0</button>
                        <button class="key-num btn btn-hapus" id="myBtn" value="ok" @onclick="Ok">Ok</button>
                        <button class="btn btn-danger btn-right3" id="btn-ok" style="width:100%;" value="" disabled="@kirimUlang" @onclick="KirimUlang">Kirim Ulang</button>

                    </div>
                    <div class="button-down">
                        <!-- <button class="btn-arrow" value="">Kembali</button>
        <button class="btn-arrow" value="">Menu Utama</button> -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
</div>

<footer>
    <div class="footer-side1">
        <span class="dot2">1</span>
        <span class="dot2" id="dot-active">2</span>
        <span class="dot2">3</span>
        <span class="dot2">4</span>
        <span class="dot2">5</span>
        <span class="dot2">6</span>
        <span class="dot2">7</span>
        <span class="dot2">8</span>
        <span class="dot2">9</span>
    </div>
    <div class="footer-side2">
        <button @onclick="@(()=>NavigateTo("/psb/1b"))" class="btn-arrow btn" value="">Kembali</button>
        <button @onclick="@(()=>MainMenu())" class="btn-arrow btn" value="">Menu Utama</button>
        <!-- <sup>Powered By </sup>Trilogi Persada -->
    </div>
</footer>

<!-- The Modal -->
@if (isInvalid)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Maaf, kode verifikasi yang Anda masukkan tidak valid.<br />
                        Mohon cek kembali kode verifikasi yang Anda terima.
                    </p>
                    <p style="font-size: 25pt; font-weight: bold;"></p>
                    <button class="btn btn-danger modal-button" @onclick="InvalidOK">OK</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isLoading)
{
    <div id="myModal" class="modal">
        <div class="modal-blank">
            <img class="lds-spinner" src="../../assets/image/loader.gif">
            <p><br>Mohon tunggu</p>
            <p>proses sedang berlangsung...</p>
        </div>
    </div>
}
@if (isVisible)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">@((MarkupString)strMsgError)</p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => isVisible = false)">OK</button>
                </div>
            </div>
        </div>
    </div>
}

@code{

    private bool isVisible = false;
    private bool isLoading = false;
    private bool isValid = false;
    private bool isInvalid = false;
    private bool isOTPError = false;
    private bool isPopUp = false;

    private string otp = string.Empty;
    private string _myURL = string.Empty;
    private string serviceURL = "psb-halo/v1/get-otp-email";
    private string cekOTPURL = "psb-halo/v1/otp-email-validation";
    private string getPaket = "psb-halo/v1/package";
    private string strMsgError = "";

    private string otp1 = string.Empty;
    private string otp2 = string.Empty;
    private string otp3 = string.Empty;
    private string otp4 = string.Empty;
    private string otp5 = string.Empty;
    private string otp6 = string.Empty;

    private int counterTime;
    private int counterTreshold = 60;
    private bool kirimUlang = true;

    private async Task OTPTime()
    {
        //InvokeAsync(StateHasChanged);
        do
        {
            await Task.Delay(1000);
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                kirimUlang = false;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (counterTime > 0);
    }

    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            await Task.Run(() => OTPTime()).ConfigureAwait(false);
            return;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        counterTime = counterTreshold;
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
    }

    private async Task RequestOTP()
    {
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"email\": \"" + trans.psbDetail.alamatEmail + "\"" +
               "}";
        string myURL = _myURL + serviceURL;
        OurUtility.Write_Log("Request OTP", "step-action");
        //OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" && strResult != "BadRequest" && strResult != "InternalServerError")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    isLoading = false;
                    trans.AddTrail("Request OTP", trans.psbDetail.alamatEmail, "00");

                    NavigateTo("/PSB/3a");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Request OTP", trans.psbDetail.alamatEmail, "01");
                    trans.status = "01";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                isLoading = false;
                trans.AddTrail("Request OTP", "Exception Error", "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavMan.NavigateTo("/error");
            }
        }
        else
        {
            isLoading = false;
            trans.AddTrail("Request OTP", "Hit Webservice Error : "+strResult, "01");
            trans.status = "01";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Hit Webservice Error: " + strResult;
            OurUtility.Write_Log("== Error : Hit Webservice Error : " + strResult, "step-action");
            //isNotIdle = false;
            NavMan.NavigateTo("/error");
        }
    }
    private async Task KirimUlang()
    {
        kirimUlang = true;
        counterTime = counterTreshold;
        await Task.Run(() => OTPTime()).ConfigureAwait(false);

        await RequestOTP();
    }

    private void InputPhoneNumber(string strInput)
    {
        if (otp.Length < 6)
        {
            otp += strInput;
            switch(otp.Length)
            {
                case 1:
                    otp1 = strInput;
                    break;
                case 2:
                    otp2 = strInput;
                    break;
                case 3:
                    otp3 = strInput;
                    break;
                case 4:
                    otp4 = strInput;
                    break;
                case 5:
                    otp5 = strInput;
                    break;
                default:
                    otp6 = strInput;
                    break;
            }
        }
    }

    private void RemovePhoneNumber()
    {
        if (otp.Length > 0)
        {
            otp = otp.Substring(0, otp.Length - 1);
            switch (otp.Length)
            {
                case 0:
                    otp1 = string.Empty;
                    break;
                case 1:
                    otp2 = string.Empty;
                    break;
                case 2:
                    otp3 = string.Empty;
                    break;
                case 3:
                    otp4 = string.Empty;
                    break;
                case 4:
                    otp5 = string.Empty;
                    break;
                default:
                    otp6 = string.Empty;
                    break;
            }
        }
    }

    private void NavigateTo(string strURL)
    {
        NavMan.NavigateTo(strURL);
    }

    private async Task CekOTP()
    {
        isLoading = true;
        await Task.Delay(5000);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"email\": \"" + trans.psbDetail.alamatEmail + "\"," +
            "\"token\": \"" + trans.psbDetail.otp + "\"" +
               "}";
        string myURL = _myURL + cekOTPURL;
        OurUtility.Write_Log("Request OTP", "step-action");
        //OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" && strResult != "BadRequest" && strResult != "InternalServerError")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    isLoading = false;
                    isValid = true;
                    isInvalid = false;
                    trans.AddTrail("Validasi OTP", "Validasi Sukses", "00");
                    //NavigateTo("/PSB/2a");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Validasi OTP", trans.errorCode, "01");
                    trans.status = "01";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    isInvalid = true;
                    isValid = false;
                    //NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    trans.AddTrail("Validasi OTP", "", "02");
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    isVisible = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                isLoading = false;
                trans.AddTrail("Validasi OTP","Exception Error" , "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavigateTo("/error");
            }
        }
        else
        {
            isLoading = false;
            trans.AddTrail("Valiasi OTP", "Hit Webservice Error", "01");
            trans.status = "01";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Exception Error";
            OurUtility.Write_Log("== Error : Hit Webservice Error", "step-action");
            //isNotIdle = false;
            NavigateTo("/error");
        }
    }
    private async Task Ok()
    {
        if (otp.Length == 6)
        {
            trans.psbDetail.otp = otp;
            //await CekOTP();
            isValid=true;
            if (isValid)
            {
                await GetPaket();
                //NavigateTo("/PSB/3");
            }
            else if (isInvalid)
            {
                NavigateTo("/main");
            }
            else if (isOTPError)
            {
                NavigateTo("/error");
            }
        }
    }
    private async Task InvalidOK()
    {
        isLoading = false;
        isValid = false;
        isInvalid = false;
        isOTPError = false;
    }
    private async Task GetPaket()
    {
        isLoading = true;
        await Task.Delay(5000);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"" +
               "}";
        string myURL = _myURL + getPaket;
        OurUtility.Write_Log("Request OTP", "step-action");
        //OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        //string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        string strResult = TestData();

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" &&
            strResult != "BadRequest" && strResult != "InternalServerError")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    trans.AddTrail("Get Paket PSB", "", "00");
                    foreach ((var pp, Int32 i) in jobjResult.SelectToken("paket").Select((pp, i) => (pp, i)))
                    {

                        menu.AddMenuPSB2(pp.SelectToken("poolName").ToString(), pp.SelectToken("packageName").ToString(),
                            pp.SelectToken("offerId").ToString(), pp.SelectToken("bid").ToString(),
                            pp.SelectToken("offerName").ToString(), pp.SelectToken("varianName").ToString(),
                            pp.SelectToken("harga").ToString(), pp.SelectToken("hargaAwal").ToString(),
                            pp.SelectToken("dataAllnet").ToString(), pp.SelectToken("dataRoaming").ToString(),
                            pp.SelectToken("dataContent").ToString(), pp.SelectToken("voiceSms").ToString(),
                            pp.SelectToken("dataSubscription").ToString(), pp.SelectToken("buCode").ToString(),
                            pp.SelectToken("parentId").ToString(), pp.SelectToken("priceplanId").ToString());
                    }
                    menu.psbIndex = menu._menuPSB.Count();
                    NavigateTo("/PSB/3a");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Get Paket PSB", "", "01");
                    trans.status = "01";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Validasi NIK & NOKK", "NIK : " + trans.psbDetail.nik + ", NOKK : " + trans.psbDetail.nokk, "02");

                    isPopUp = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                isLoading = false;
                trans.AddTrail("Get Paket PSB", "Exception Error ", "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavigateTo("/error");
            }
        }
        else
        {
            isLoading = false;
            trans.AddTrail("Get Paket PSB", "Hit Webservice Error : " + strResult, "01");
            trans.status = "01";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Hit Webservice Error : " + strResult;
            OurUtility.Write_Log("== Error : Hit Webservice Error : " + strResult, "step-action");
            //isNotIdle = false;
            NavigateTo("/error");
        }
    }

    private string TestData()
    {
        string ret = "{\"transaction\": {\"transactionId\": \"X002210111231813123456789\",\"statusCode\": \"00\",\"statusDesc\": \"success\"},\"paket\": [{\"poolName\": \"002GNSSC\",\"buCode\": \"002GNSAT\",\"packageName\": \"Halo Kick Premium 100rb\",\"offerId\": \"3882019\",\"bid\": \"30507\",\"offerName\": \"Halo Kick Premium 100rb\",\"varianName\": \"Halo Unlimited 100rb\",\"harga\": 100000.0,\"hargaAwal\": 100000.0,\"dataAllnet\": \"15Gb\",\"dataRoaming\": \"150Mb\",\"dataContent\": \"Unlimited Daily Apps FUP 3GB / 1 Mbps\",\"voiceSms\": \"120 minutes allnet + 200 SMS allnet\",\"dataSubscription\": \"-\",\"priceplanId\": \"2760843\",\"parentId\": \"3289394\"},{\"poolName\": \"002GNSSC\",\"buCode\": \"002GNSAT\",\"packageName\": \"Halo Kick Premium 150rb\",\"offerId\": \"3882029\",\"bid\": \"30508\",\"offerName\": \"Halo Kick Premium 150rb\",\"varianName\": \"Halo Unlimited 150rb\",\"harga\": 150000.0,\"hargaAwal\": 150000.0,\"dataAllnet\": \"30Gb\",\"dataRoaming\": \"200Mb\",\"dataContent\": \"Unlimited Daily Apps FUP 3GB / 1 Mbps\",\"voiceSms\": \"240 minutes allnet + 400 SMS allnet\",\"dataSubscription\": \"-\",\"priceplanId\": \"2760843\",\"parentId\": \"3289394\"},{\"poolName\": \"002GNSSC\",\"buCode\": \"002GNSAT\",\"packageName\": \"Halo Kick Premium 225rb\",\"offerId\": \"3888449\",\"bid\": \"30509\",\"offerName\": \"Halo Kick Premium 225rb\",\"varianName\": \"Halo Unlimited 225rb\",\"harga\": 225000.0,\"hargaAwal\": 225000.0,\"dataAllnet\": \"50Gb\",\"dataRoaming\": \"300Mb\",\"dataContent\": \"Unlimited Daily Apps FUP 3GB / 1 Mbps\",\"voiceSms\": \"400 minutes allnet + 700 SMS allnet\",\"dataSubscription\": \"-\",\"priceplanId\": \"2760843\",\"parentId\": \"3289394\"},{\"poolName\": \"002GNSSC\",\"buCode\": \"002GNSAT\",\"packageName\": \"Halo Kick Premium 300rb\",\"offerId\": \"3882039\",\"bid\": \"30510\",\"offerName\": \"Halo Kick Premium 300rb\",\"varianName\": \"Halo Unlimited 300rb\",\"harga\": 300000.0,\"hargaAwal\": 300000.0,\"dataAllnet\": \"70Gb\",\"dataRoaming\": \"400Mb\",\"dataContent\": \"Unlimited Daily Apps FUP 3GB / 1 Mbps\",\"voiceSms\": \"500 minutes allnet + 1000 SMS allnet\",\"dataSubscription\": \"MAXstream, sushiroll, VIU, Vidio Gold\",\"priceplanId\": \"2760843\",\"parentId\": \"3289394\"},{\"poolName\": \"002GNSSC\",\"buCode\": \"002GNSAT\",\"packageName\": \"Halo Kick Premium 550rb\",\"offerId\": \"3882049\",\"bid\": \"30511\",\"offerName\": \"Halo Kick Premium 550rb\",\"varianName\": \"Halo Unlimited 550rb\",\"harga\": 550000.0,\"hargaAwal\": 550000.0,\"dataAllnet\": \"150Gb + 3Gb (first 3 month)\",\"dataRoaming\": \"500Mb\",\"dataContent\": \"Unlimited Daily Apps FUP 3GB / 1 Mbps\",\"voiceSms\": \"1000 minutes allnet + 2000 SMS allnet\",\"dataSubscription\": \"MAXstream, sushiroll, VIU, Vidio Platinum, HBO GO\",\"priceplanId\": \"2760843\",\"parentId\": \"3289394\"}]}";
        return ret;
    }
    private async Task MainMenu()
    {
        trans.AddTrail("INPUT OTP", "BACK TO MAIN MENU", "02");
        trans.status = "02";
        await OurUtility.AuditTrailPSB(trans, menu, cst);
        NavMan.NavigateTo("/main");
    }
}