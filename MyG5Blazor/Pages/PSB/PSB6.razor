@page "/PSB/6"

@using MyG5Blazor.Data
@using System.Linq;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System;
@using System.Threading.Tasks;
@using System.Net.Http;

@inject Costumer cst
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan
@inject Menu menu
@inject Transaction trans
@inject Config config
<div class="main-panel bg-home" style="z-index:1;" @onclick="@(()=>InvokeAsync(ResetTimer))">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img @onclick="(()=>InvokeAsync(nokkDev))" src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <p class="teks-title2">Berlangganan KartuHalo</p>
                    <div class="teks-top3" style="margin-top: 25%;">
                        <p>Silakan masukkan 16 digit Nomor Kartu Keluarga Anda (NoKK)</p> <br>
                        <p>Pastikan NoKK sesuai dengan eKTP yang Digunakan</p> <br>
                    </div>
                </div>

                <div class="col-md-6">
                    @if (strNumber == string.Empty)
                    {
                        <input style="width:90%" type="text" name="number" placeholder="No Kartu Keluarga" class="num-field" readonly>
                    }
                    else
                    {
                        <input style="width:90%" type="text" name="number" class="num-field" @bind="nokkUI" readonly />
                    }
                    @if (isInput)
                    {
                        <div class="num-button">
                            <button class="key-num btn" value="1" @onclick="@(() => InputPhoneNumber("1"))">1</button>
                            <button class="key-num btn" value="2" @onclick="@(() => InputPhoneNumber("2"))">2</button>
                            <button class="key-num btn" value="3" @onclick="@(() => InputPhoneNumber("3"))">3</button>
                            <button class="key-num btn" value="4" @onclick="@(() => InputPhoneNumber("4"))">4</button>
                            <button class="key-num btn" value="5" @onclick="@(() => InputPhoneNumber("5"))">5</button>
                            <button class="key-num btn" value="6" @onclick="@(() => InputPhoneNumber("6"))">6</button>
                            <button class="key-num btn" value="7" @onclick="@(() => InputPhoneNumber("7"))">7</button>
                            <button class="key-num btn" value="8" @onclick="@(() => InputPhoneNumber("8"))">8</button>
                            <button class="key-num btn" value="9" @onclick="@(() => InputPhoneNumber("9"))">9</button>
                            <button class="key-num btn btn-hapus" value="Hapus" @onclick="RemovePhoneNumber">Hapus</button>
                            <button class="key-num btn" value="0" id="myBtnUndefine" @onclick="@(() => InputPhoneNumber("0"))">0</button>
                            <button class="key-num btn btn-hapus" id="myBtn" value="ok" @onclick="OK">Ok</button>
                        </div>
                    }
                    else if (isValid)
                    {
                        <p class="kk-valid">Nomor Kartu Keluarga Valid</p>
                        <div class="checklist" style="margin-top: 5%; text-align:center;">
                            <img src="../../assets/image/tanda_checklist.png" id="icon-succes" />
                        </div>
                    }
                    <div class="button-down">
                        <!-- <button class="btn-arrow" value="">Kembali</button>
                        <button class="btn-arrow" value="">Menu Utama</button> -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
<footer style="z-index:2;">
    <div class="footer-side1">
        <span class="dot2">1</span>
        <span class="dot2">2</span>
        <span class="dot2">3</span>
        <span class="dot2">4</span>
        <span class="dot2">5</span>
        <span class="dot2" id="dot-active">6</span>
        <span class="dot2">7</span>
        <span class="dot2">8</span>
        <span class="dot2">9</span>
    </div>
    <div class="footer-side2">
        <button @onclick="@(()=>NavigateTo("/PSB/4"))" class="btn-arrow btn" value="">Kembali</button>
        <button @onclick="MainMenu" class="btn-arrow btn" value="">Menu Utama</button>
        <!-- <sup>Powered By </sup>Trilogi Persada -->
    </div>
</footer>
@if (isLoading)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-blank">
            <img class="lds-spinner" src="../../assets/image/loader.gif">
            <p><br>Mohon tunggu</p>
            <p>proses sedang berlangsung...</p>
        </div>
    </div>
}
@if (isPopUp)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">@((MarkupString)strMsgError)</p>
                    @if (invalid < 3)
                    {
                        <button class="btn btn-danger modal-button" @onclick="@(() => isPopUp = false)">OK</button>
                    }
                    else
                    {
                        <button class="btn btn-danger modal-button" @onclick="@(MainMenu)">OK</button>
                    }
                </div>
            </div>
        </div>
    </div>
}
@if (isIdle)
{
    <div id="myModal" class="modal"style="z-index:999;">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Apakah Anda ingin menambah waktu lagi? <br />
                        Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTime</span> detik.
                    </p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktu))">Ya</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>secondCTime=0)">Tidak</button>
                </div>
            </div>
        </div>
    </div>
}
@code
{
    private async Task nokkDev()
    {
        strNumber = "3174090501093309";
        //strNumber = "3375031004070002";
        nokkUI = Regex.Replace(strNumber, ".{4}(?!$)", "$0-");
    }
    private bool IsMethod = false;
    private bool isLoading = false;
    private bool isSubmit = true;
    private bool isValid = false;
    private bool isInput = true;
    private bool isPopUp = false;

    private string nokkUI = string.Empty;
    private string strNumber = string.Empty;
    private string _myURL = string.Empty;
    private string releaseNumberService = "psb-halo/v1/release-number";

    private string cekNokk = "psb-halo/v1/nik-nok-validation";
    private string strMsgError = string.Empty;

    private int invalid = 0;

    protected override async Task OnInitializedAsync()
    {
        counterTime = counterTreshold;
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
    }

    private void InputPhoneNumber(string strInput)
    {
        if (strNumber.Length < 16)
        {
            strNumber += strInput;
            nokkUI = Regex.Replace(strNumber, ".{4}(?!$)", "$0-");
        }
    }

    private async Task OK()
    {
        if (strNumber.Length == 16)
        {
            //isInput = false;
            isLoading = true;
            trans.psbDetail.nokk = strNumber;
            //isValid = true;
            await CekNOKK();
            if (isValid)
            {
                InvokeAsync(StateHasChanged);
                await Task.Delay(5000);
                NavigateTo("/PSB/7a");
                //await GetPaket();
            }
        }
        else if (strNumber.Length < 16)
        {
            strMsgError = "Maaf, <span style=\"font-weight: bold; \">NoKK</span> yang Anda gunakan tidak sesuai dengan <br>eKTP. Mohon periksa kembali <span style=\"font-weight: bold; \">NoKK</span> yang digunakan.";
            isPopUp = true;
        }
    }
    private async Task CekNOKK()
    {
        isLoading = true;
        await Task.Delay(5000);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"noKtp\": \"" + trans.psbDetail.nik + "\"," +
            "\"noKk\": \"" + trans.psbDetail.nokk + "\"" +
               "}";
        string myURL = _myURL + cekNokk;
        OurUtility.Write_Log("Validasi NoKK", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" && strResult != "BadRequest" && strResult != "InternalServerError" && strResult != "GatewayTimeout")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    isLoading = false;
                    isInput = false;
                    isValid = true;
                    trans.AddTrail("Validasi NIK & NOKK", "NIK : " + trans.psbDetail.nik + ", NOKK : " + trans.psbDetail.nokk, "00");

                    //NavigateTo("/PSB/6a");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                        if (trans.errorCode == "303002")
                        {
                            invalid += 1;

                            isLoading = false;
                            trans.AddTrail("Validasi NIK & NOKK", "NIK : " + trans.psbDetail.nik + ", NOKK : " + trans.psbDetail.nokk, "02");

                            if (invalid < 3)
                            {
                                strMsgError = "Maaf, <span style=\"font-weight: bold; \">NoKK</span> yang Anda gunakan tidak sesuai dengan <br>eKTP. Mohon periksa kembali NoKK yang digunakan.";
                            }
                            else
                            {
                                strMsgError = "Maaf, <span style=\"font-weight: bold; \">NoKK</span> Anda tidak terbaca pada sistem <br>MyGraPARI. Silahkan hubungi <span style=\"font-weight: bold; \">Costumer Service</span><br>GraPARI untuk bantuan.";
                            }

                            isPopUp = true;
                            return;
                        }
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Validasi NIK & NOKK", "NIK : " + trans.psbDetail.nik + ", NOKK : " + trans.psbDetail.nokk, "01");
                    trans.status = "01";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Validasi NIK & NOKK", "NIK : " + trans.psbDetail.nik + ", NOKK : " + trans.psbDetail.nokk, "02");
                    invalid += 1;

                    isPopUp = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                trans.AddTrail("Validasi NIK & NOKK", "Exception Error ", "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavigateTo("/error");
            }
        }
        else
        {
            trans.AddTrail("Validasi NIK & NOKK", "Hit Webservice Error : " + strResult, "01");
            trans.status = "01";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Hit Webservice Error : " + strResult;
            OurUtility.Write_Log("== Error : Hit Webservice Error : " + strResult, "step-action");
            //isNotIdle = false;
            NavigateTo("/error");
        }
    }

    private async Task MainMenu()
    {
        isLoading = true;
        trans.AddTrail("INPUT NOKK", "BACK TO MAIN MENU", "02");
        trans.status = "02";
        await ReleaseNumber();
        await OurUtility.AuditTrailPSB(trans, menu, cst);
        NavigateTo("/main");
    }
    private async Task ReleaseNumber()
    {
        isLoading = true;
        await Task.Delay(5000);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"poolName\": \"" + trans.psbDetail.PaketPSB._poolName + "\"," +
            "\"noHp\": \"" + trans.psbDetail.selectedNumber + "\"" +
               "}";
        string myURL = _myURL + releaseNumberService;
        OurUtility.Write_Log("Release Number", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" &&
        strResult != "BadRequest" && strResult != "InternalServerError" && strResult != "GatewayTimeout")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "00");
                    //NavigateTo("/PSB/4");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");

                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "01");
                    trans.status = "01";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.patternNumber + ", Pool : " + trans.psbDetail.selectedPaket, "02");

                    isPopUp = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                trans.AddTrail("Release Number", "Exception Error ", "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavigateTo("/error");
            }
        }
        else
        {
            trans.AddTrail("Release Number", "Hit Webservice Error {" + strResult + "}", "01");
            trans.status = "01";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Hit Webservice Error {" + strResult + "}";
            OurUtility.Write_Log("== Hit Webservice Error {" + strResult + "}", "step-action");
            //isNotIdle = false;
            NavigateTo("/error");
        }
    }
    private void RemovePhoneNumber()
    {
        if (strNumber.Length > 0)
        {
            strNumber = strNumber.Substring(0, strNumber.Length - 1);
            nokkUI = Regex.Replace(strNumber, ".{4}", "$0-");
        }
    }
    private void NavigateTo(string strURL)
    {
        isIdle = false;
        isNotIdle = false;
        NavMan.NavigateTo(strURL);
    }

    #region TimeOut
    private int counterTime;
    private int counterTreshold = 60;
    private bool isIdle = false;
    private bool isNotIdle = true;
    private async Task IdleTime()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 6 Time Left : " + counterTime.ToString());
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                isIdle = true;
                isNotIdle = false;
                secondCTime = counterTreshold;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdle);
    }
    #endregion

    #region SecondTimeOut
    private int secondCTime;
    private bool isTimeOut = false;

    private async Task TimeOut()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 6 Out Left : " + secondCTime.ToString());
            secondCTime = secondCTime - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTime < 0)
            {
                isIdle = false;
                isTimeOut = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdle);
    }

    private async Task TambahWaktu()
    {
        //Console.WriteLine("Tambah Waktu");
        counterTime = counterTreshold;
        //secondCTime = 0;
        isIdle = false;
        isTimeOut = false;
        isNotIdle = true;
        await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOut()
    {
        await Task.Run(() => IdleTime()).ConfigureAwait(false);
        if (isIdle)
            await Task.Run(() => TimeOut()).ConfigureAwait(false);

        if (isTimeOut)
        {
            //Console.WriteLine("Time Out 2");
            //NavigateTo("/main");
            await MenuUtamaCanceled();
        }
    }

    private async Task ResetTimer()
    {
        if (!isIdle)
        {
            //Console.WriteLine("Timer Reset");
            counterTime = counterTreshold;
        }
    }
    #endregion

    private bool translog = false;
    private async Task MenuUtamaCanceled()
    {
        if (translog)
        {
            translog = false;
            isLoading = true;
            await ReleaseNumber();
            trans.AddTrail("INPUT NOKK", "CANCELED", "02");
            trans.status = "02";
            trans.errorCode = "INPUT NOKK";
            await OurUtility.AuditTrailPSB(trans, menu, cst);
            NavigateTo("/main");
        }
    }
    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            #region AfterRenderTimeOut
            await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
            #endregion
        }
    }
}
