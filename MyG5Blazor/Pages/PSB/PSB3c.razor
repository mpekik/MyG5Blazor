@page "/PSB/3c"

@using MyG5Blazor.Data
@using System.Linq;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System;
@using System.Threading.Tasks;
@using System.Net.Http;
@using System.Text.RegularExpressions;

@inject Costumer cst
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavMan
@inject Menu menu
@inject Transaction trans
@inject Config config
<div class="main-panel bg-home" style="z-index:1;" @onclick="@(()=>InvokeAsync(ResetTimer))">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <p class="teks-title">Berlangganan KartuHALO</p>
                    <div class="teks-top">
                        <p>Silakan Pilih Nomor KartuHalo yang Anda Inginkan</p> <br>
                        <p>Masukkan 4 Digit Nomor untuk Memudahkan Proses Pencarian</p> <br>
                        <p class="teks-bold">Anda dapat Melakukan Pencarian<br>Nomor hingga 3x</p> <br>
                        <p class="teks-bold">Berikut adalah Nomor Pilihan yang Tersedia di MyGraPARI</p> <br>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="text-primary">
                        <input type="text" name="number" placeholder="Contoh : 4444" class="num-field" maxlength="4" @bind="strNumber" readonly>
                    </div>
                    <div class="" style="text-align: center; margin-top: 5%;">
                        @if (menu.psbIndex > 6)
                        {
                            <button class="btn btn-danger btn-right3" style="font-weight:bold;" @onclick="NextIndex" id="btn-ok" value="">Pilihan Berikutnya</button>
                        }
                    </div>
                    <div style="display: flex; text-align: center; margin-top: 5%;">
                        @if (boolNumber[0 + menu.pageIndex])
                        {
                            <button @onclick="@(() => PickNomer(populateNumber[0+menu.pageIndex]))" class="btn-pilih-no btn" value="">@numberUI[0 + menu.pageIndex]</button>
                        }
                        @if (boolNumber[1 + menu.pageIndex])
                        {
                            <button @onclick="@(() => PickNomer(populateNumber[1+menu.pageIndex]))" class="btn-pilih-no btn" style="margin-left: 3%;" value="">@numberUI[1 + menu.pageIndex]</button>
                        }
                    </div>
                    <div style="display: flex; text-align: center; margin-top: 4%;">
                        @if (boolNumber[2 + menu.pageIndex])
                        {
                            <button @onclick="@(() => PickNomer(populateNumber[2+menu.pageIndex]))" class="btn-pilih-no btn" value="">@numberUI[2 + menu.pageIndex]</button>
                        }
                        @if (boolNumber[3 + menu.pageIndex])
                        {
                            <button @onclick="@(() => PickNomer(populateNumber[3+menu.pageIndex]))" class="btn-pilih-no btn" style="margin-left: 3%;" value="">@numberUI[3 + menu.pageIndex]</button>
                        }
                    </div>
                    <div style="display: flex; text-align: center; margin-top: 4%;">
                        @if (boolNumber[4 + menu.pageIndex])
                        {
                            <button @onclick="@(() => PickNomer(@populateNumber[4+menu.pageIndex]))" class="btn-pilih-no btn" value="">@numberUI[4 + menu.pageIndex]</button>
                        }                            

                        @if (boolNumber[5 + menu.pageIndex])
                        {
                            <button @onclick="@(() => PickNomer(populateNumber[5+menu.pageIndex]))" class="btn-pilih-no btn" style="margin-left: 3%;" value="">@numberUI[5 + menu.pageIndex]</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
<footer style="z-index:2;">
    <div class="footer-side1">
        <span class="dot2">1</span>
        <span class="dot2">2</span>
        <span class="dot2" id="dot-active">3</span>
        <span class="dot2">4</span>
        <span class="dot2">5</span>
        <span class="dot2">6</span>
        <span class="dot2">7</span>
        <span class="dot2">8</span>
        <span class="dot2">9</span>
    </div>
    <div class="footer-side2">
        <button @onclick="@(()=>NavigateTo("/PSB/3b"))" class="btn-arrow btn" value="">Kembali</button>
        <button @onclick="MainMenu" class="btn-arrow btn" value="">Menu Utama</button>
        <!-- <sup>Powered By </sup>Trilogi Persada -->
    </div>
</footer>
@if (isLoading)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-blank">
            <img class="lds-spinner" src="../../assets/image/loader.gif">
            <p><br>Mohon tunggu</p>
            <p>proses sedang berlangsung...</p>
        </div>
    </div>
}
@if (isIdle)
{
    <div id="myModal" class="modal"style="z-index:999;">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Apakah Anda ingin menambah waktu lagi? <br />
                        Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTime</span> detik.
                    </p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktu))">Ya</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>secondCTime=0)">Tidak</button>
                </div>
            </div>
        </div>
    </div>
}
@code
{
    private bool IsMethod = false;
    private bool IsVisible = false;
    private bool IsInvalid = false;
    private bool isLoading = false;
    private bool isSubmit = true;
    private bool isPopUp = false;

    private string strNumber = string.Empty;
    private string[] inputNumber;
    private string _myURL = string.Empty;
    private string reserveNumberService = "psb-halo/v1/reserve-number";
    private string strMsgError = string.Empty;

    private bool[] boolNumber = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
    private string[] populateNumber = { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
    private string[] numberUI = { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
    private int pageIndex = 0;
    private int inputIndex = 0;

    private void NextIndex()
    {
        if (menu.pageIndex + 6 < menu.psbNomer.Count())
        {
            menu.pageIndex += 6;
            //PopulateNumber();
            StateHasChanged();
        }
        else
        {
            menu.pageIndex = 0;
            //PopulateNumber();
            StateHasChanged();
        }
    }

    private void PopulateNumber()
    {
        if (menu.psbNomer.Count() > 18)
        {
            for (int i = 0; i < 18; i++)
            {
                boolNumber[i] = true;
                populateNumber[i] = menu.psbNomer[i + menu.pageIndex];
                numberUI[i] = Regex.Replace("0" + populateNumber[i].Substring(2), ".{4}", "$0-");
                StateHasChanged();
            }
        }
        else
        {
            for (int i = 0; i < menu.psbNomer.Count(); i++)
            {
                boolNumber[i] = true;
                populateNumber[i] = menu.psbNomer[i + menu.pageIndex];
                numberUI[i] = Regex.Replace("0" + populateNumber[i].Substring(2), ".{4}", "$0-");
                StateHasChanged();
            }
        }
    }

    private async Task PickNomer(string _nomer)
    {
        trans.psbDetail.selectedNumber = _nomer;
        isLoading = true;
        InvokeAsync(StateHasChanged);
        await ReserveNumber();
    }

    private async Task MainMenu()
    {
        isLoading = true;
        trans.AddTrail("CHOOSE NUMBER", "BACK TO MAIN MENU", "02");
        trans.status = "02";
        await OurUtility.AuditTrailPSB(trans, menu, cst);
        NavMan.NavigateTo("/main");
    }

    private void NavigateTo(string strURL)
    {
        isNotIdle = false;
        NavMan.NavigateTo(strURL);
    }

    protected override async Task OnInitializedAsync()
    {
        counterTime = counterTreshold;
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        strNumber = trans.psbDetail.patternNumber;
        PopulateNumber();
    }

    private async Task ReserveNumber()
    {
        isLoading = true;
        StateHasChanged();
        await Task.Delay(500);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"buCode\": \"" + trans.psbDetail.PaketPSB._buCode + "\"," +
            "\"noHp\": \"" + trans.psbDetail.selectedNumber + "\"" +
               "}";
        string myURL = _myURL + reserveNumberService;
        OurUtility.Write_Log("Reserve Number", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" &&
        strResult != "BadRequest" && strResult != "InternalServerError")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    trans.psbDetail.reserveId = (string)jobjResult.SelectToken("idReservation");
                    trans.AddTrail("Reserve Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.selectedPaket, "00");
                    NavigateTo("/PSB/4");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Reserve Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.selectedPaket, "01");
                    trans.status = "01";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Reserve Number", "Number : " + trans.psbDetail.patternNumber + ", Pool : " + trans.psbDetail.selectedPaket, "02");

                    isPopUp = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                isLoading = false;
                trans.AddTrail("Reserve Number", "Exception Error ", "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavMan.NavigateTo("/error");
            }
        }
        else
        {
            isLoading = false;
            trans.AddTrail("Reserve Number", "Hit Webservice Error {" + strResult + "}", "01");
            trans.status = "01";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Hit Webservice Error {" + strResult + "}";
            OurUtility.Write_Log("== Hit Webservice Error {" + strResult + "}", "step-action");
            //isNotIdle = false;
            NavMan.NavigateTo("/error");
        }
    }
    #region TimeOut
    private int counterTime;
    private int counterTreshold = 60;
    private bool isIdle = false;
    private bool isNotIdle = true;
    private async Task IdleTime()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 3c Time Left : " + counterTime.ToString());
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                isIdle = true;
                isNotIdle = false;
                secondCTime = counterTreshold;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdle);
    }
    #endregion

    #region SecondTimeOut
    private int secondCTime;
    private bool isTimeOut = false;

    private async Task TimeOut()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 3c Out Left : " + secondCTime.ToString());
            secondCTime = secondCTime - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTime < 0)
            {
                isIdle = false;
                isTimeOut = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdle);
    }

    private async Task TambahWaktu()
    {
        //Console.WriteLine("Tambah Waktu");
        counterTime = counterTreshold;
        //secondCTime = 0;
        isIdle = false;
        isTimeOut = false;
        isNotIdle = true;
        await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOut()
    {
        await Task.Run(() => IdleTime()).ConfigureAwait(false);
        if (isIdle)
            await Task.Run(() => TimeOut()).ConfigureAwait(false);

        if (isTimeOut)
        {
            //Console.WriteLine("Time Out 2");
            //NavigateTo("/main");
            await MenuUtamaCanceled();
        }
    }

    private async Task ResetTimer()
    {
        if (!isIdle)
        {
            //Console.WriteLine("Timer Reset");
            counterTime = counterTreshold;
        }
    }
    #endregion

    private bool translog = true;

    private async Task MenuUtamaCanceled()
    {
        if (translog)
        {
            translog = false;
            InvokeAsync(StateHasChanged);
            isNotIdle = false;
            isLoading = true;
            trans.AddTrail("CHOOSE NUMBER", "BACK TO MAIN MENU", "02");
            trans.status = "02";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            NavigateTo("/main");
        }
    }
    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            #region AfterRenderTimeOut
            await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
            #endregion
        }
    }
}
