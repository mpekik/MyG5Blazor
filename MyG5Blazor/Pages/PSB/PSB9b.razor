@page "/PSB/9b"

@using MyG5Blazor.Data
@using System.IO.Ports
@using System.IO
@using System.Threading
@using System.Text
@using System
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Threading.Tasks;

@inject IJSRuntime JSRuntime
@inject Costumer cst
@inject NavigationManager NavMan
@inject EDC edc
@inject BlazorTimer Timer
@inject BlazorTimer TimerCES
@inject Transaction trans
@inject Config config
@inject Menu menu
@inject Card_Dispenser cds

<div class=@pageClass style="z-index:1;">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="col-md-6">
                <div class="input-group no-border">
                    <div class="checklist">
                        @if (IsSuccess)
                        {
                            <img src="../../assets/image/tanda_checklist.png" />
                        }
                        else if (IsFail)
                        {
                            <img src="../../assets/image/tanda_x.png" />
                        }
                    </div>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                @switch (MetodePembayaran)
                {
                    case 1:
                        {
                            @if (!IsFail && !IsSuccess)
                            {
                                <div id="credit-payment" class="modal-blank-1" style="background-image: url(../image/bg-02.jpg); background-size: cover; background-position: center center;background-attachment: fixed; ">
                                    <img src="../../assets/image/debit.png" class="img-debit" id="myBtn">
                                    <div class="modal-blank-text">
                                        <div class="text1" id="teks-temukan">Temukan mesin EDC pada <br> MyGraPARI seperti gambar di atas</div>
                                        <div class="text2">Gesek Kartu Debit Anda dengan <br> bagian pita hitam menghadap ke <br> arah mesin EDC</div>
                                        <div class="text3">Masukkan PIN dan tekan OK <br> <p class="green">(tombol hijau)</p></div>
                                    </div>
                                </div>
                            }
                            else if (IsSuccess)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Berlangganan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold" style="line-height: 1; font-size: xx-large; margin-top: 3em;">
                                        Proses Berlangganan KartuHalo <b class="green">Berhasil</b><br /><br />
                                        <span style="font-weight:normal;display:grid;">
                                            Silakan Ambil kartuHalo Anda dan Selamat <br />Menikmati Layanan Prioritas di Jaringan <br />kartuHalo.<br />
                                            <span style="font-size:18px; font-style:italic"><br />Jika nomor Anda belum aktif dalam maksimal 2x24 jam,mohon hubungi Customer Service GraPARI.<br /></span>
                                            <br />Formulir Elektronik Berlangganan KartuHalo <br />Anda akan Kami Kirimkan ke Email yang <br />Didaftarkan. Silakan Tekan Tautan di Bawah <br />untuk Melihat.
                                            <a style="font-size: 18px; justify-self: center; text-decoration: underline;" href="" @onclick="@(()=>InvokeAsync(OpenDocument))" @onclick:preventDefault>
                                                <br />Formulir Elektronik Berlangganan KartuHalo
                                            </a>
                                        </span>
                                    </div>
                                </div>

                                <div class="col-md-6" style="display:grid;min-height:25vh;">
                                    <div id="image-pulsa" class="image-center2" style="align-self:center;">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px">
                                    </div>
                                </div>
                            }
                            else if (IsFail)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Berlangganan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold" style="line-height: 1; font-size: xx-large; margin-top: 3em;">
                                        Proses Pembayaran Berlangganan KartuHalo <b class="red">Tidak Berhasil</b><br><br>
                                        @if (IsVoid)
                                        {
                                            <span style="font-weight: normal;">Silahkan <span style="font-weight: bold;"> Tekan ENTER(Tombol Hijau)</span>pada Mesin EDC untuk Proses Pengembalian Uang </span>
                                        }
                                    </div>
                                </div>

                                <div class="col-md-6" style="display:grid;min-height:25vh;">
                                    <div id="image-pulsa" class="image-center2" style="align-self:center;">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px">
                                    </div>
                                </div>
                            }
                            break;
                        }
                    case 2:
                        {
                            <div class="col-md-6">
                                @if (!IsFail && !IsSuccess)
                                {
                                    <div class="teks-title">Berlangganan KartuHalo</div>
                                    <div id="teks-silakan">
                                        <div class="teks-top"> Silakan Masukan Uang Kertas pada Alat Penerima Uang Tunai secara Lembar per Lembar </div>
                                    </div>
                                    <div id="teks-pastikan">
                                        <div class="teks-center" style="margin-top: 30%;"> Pastikan Pembayaran Menggunakan <br> Uang Kertas Minimal Pecahan Rp 10.000 </div>
                                    </div>
                                    <div id="bayar2">
                                        <div class="teks-bot" style="text-transform: uppercase; font-weight: bold; margin-top: 45%; line-height: 1;">Bayar Dengan Uang Pas, Mesin <br> Ini tidak mengeluarkan kembalian</div>
                                    </div>
                                    <div id="bayar3">
                                        <div class="teks-bot2" style="text-transform: uppercase; font-weight: bold; margin-top: 60%;">NILAI DARI KELEBIHAN PEMBAYARAN SECARA OTOMATIS AKAN MENGURANGI TAGIHAN KARTUHALO ANDA DI BULAN BERIKUTNYA.</div>
                                    </div>
                                }
                                @if (IsVisible2)
                                {
                                    <div id="teks-sudah-sesuai">
                                        <div class="teks-center" style="margin-top: 38%;"> Uang yang Anda Masukkan Sudah Sesuai dengan Jumlah yang Harus Dibayarkan </div>
                                    </div>
                                }

                                @if (IsFail)
                                {
                                    <div class="teks-title">Berlangganan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold" style="line-height: 1; font-size: xx-large; margin-top: 3em;">
                                        Proses Pembayaran Berlangganan KartuHalo <b class="red">Tidak Berhasil</b><br><br>

                                        <span style="font-weight: normal;">Silakan Ambil Struk Transaksi dan <br> Hubungi Kasir GraPARI untuk Bantuan</span>

                                    </div>
                                }
                                else if (IsSuccess)
                                {
                                    <div class="teks-title">Berlangganan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold" style="line-height: 1; font-size: xx-large; margin-top: 3em;">
                                        Proses Berlangganan KartuHalo <b class="green">Berhasil</b><br /><br />
                                        <span style="font-weight:normal;display:grid;">
                                            Silakan Ambil kartuHalo Anda dan Selamat <br />Menikmati Layanan Prioritas di Jaringan <br />kartuHalo.<br />
                                            <span style="font-size:18px; font-style:italic"><br />Jika nomor Anda belum aktif dalam maksimal 2x24 jam,mohon hubungi Customer Service GraPARI.<br /></span>
                                            <br />Formulir Elektronik Berlangganan KartuHalo <br />Anda akan Kami Kirimkan ke Email yang <br />Didaftarkan. Silakan Tekan Tautan di Bawah <br />untuk Melihat.
                                            <a style="font-size: 18px; justify-self: center; text-decoration: underline;" href="" @onclick="@(()=>InvokeAsync(OpenDocument))" @onclick:preventDefault>
                                                <br />Formulir Elektronik Berlangganan KartuHalo
                                            </a>
                                        </span>
                                    </div>
                                }
                            </div>

                            @if (!IsFail && !IsSuccess)
                            {
                                <div class="col-md-6" id="proses-bill">

                                    <div id="">
                                        <img class="tunai" onclick="buttonNext()" id="" src="../../assets/image/tunai.png">
                                    </div>
                                    <div>
                                        <div class="jumlah-bayar">Jumlah yang Harus Dibayar</div>
                                        <div class="nominal-rupiah">Rp @intBill.ToString("N0")</div>
                                    </div><br>

                                    <div id="">
                                        <div class="jumlah-bayar">Uang yang telah Anda Masukan</div>
                                        @if (inttotal < intBill)
                                        {
                                            <div class="nominal-rupiah" id="nominal-kurang">Rp @inttotal.ToString("N0")</div>
                                        }
                                        else
                                        {
                                            <div class="nominal-rupiah" id="nominal-pas">Rp @inttotal.ToString("N0")</div>
                                        }
                                    </div><br>
                                </div>
                            }
                            else
                            {
                                <div class="col-md-6" style="display:grid;min-height:25vh;">
                                    <div id="image-pulsa" class="image-center2" style="align-self:center;">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px">
                                    </div>
                                </div>
                            }
                        }
                        break;

                    case 3:
                        {
                            @if (!IsSuccess && !IsFail)
                            {
                                <div id="credit-payment" class="modal-blank-2">
                                    <img src="../../assets/image/credit.png" alt="" width="100%" height="380px" style="padding-top:70px;" id="myBtn">
                                    <div class="modal-blank-text">
                                        <div class="text-1">Temukan mesin EDC pada <br> MyGraPARI seperti gambar di atas</div>
                                        <div class="text-2">Masukkan Kartu Kredit Anda<br> melalui bagian bawah mesin<br> EDC dengan bagian Chip terlebih <br> dahulu</div>
                                        <div class="text-3">Masukkan PIN dan tekan OK <br> <b class="green">(tombol hijau)</b></div>
                                        <div class="text-4">Cabut Kartu Kredit Anda dari <br> Mesin EDC</div>
                                    </div>
                                </div>
                            }
                            else if (IsSuccess)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Berlangganan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold" style="line-height: 1; font-size: xx-large; margin-top: 3em;">
                                        Proses Berlangganan KartuHalo <b class="green">Berhasil</b><br /><br />
                                        <span style="font-weight:normal;display:grid;">
                                            Silakan Ambil kartuHalo Anda dan Selamat <br />Menikmati Layanan Prioritas di Jaringan <br />kartuHalo.<br />
                                            <span style="font-size:18px; font-style:italic"><br />Jika nomor Anda belum aktif dalam maksimal 2x24 jam,mohon hubungi Customer Service GraPARI.<br /></span>
                                            <br />Formulir Elektronik Berlangganan KartuHalo <br />Anda akan Kami Kirimkan ke Email yang <br />Didaftarkan. Silakan Tekan Tautan di Bawah <br />untuk Melihat.
                                            <a style="font-size: 18px; justify-self: center; text-decoration: underline;" href="" @onclick="@(()=>InvokeAsync(OpenDocument))" @onclick:preventDefault>
                                                <br />Formulir Elektronik Berlangganan KartuHalo
                                            </a>
                                        </span>
                                    </div>
                                </div>

                                <div class="col-md-6" style="display:grid;min-height:25vh;">
                                    <div id="image-pulsa" class="image-center2" style="align-self:center;">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px">
                                    </div>
                                </div>
                            }
                            else if (IsFail)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Berlangganan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold" style="line-height: 1; font-size: xx-large; margin-top: 3em;">
                                        Proses Pembayaran Berlangganan KartuHalo <b class="red">Tidak Berhasil</b><br><br>
                                        @if (IsVoid)
                                        {
                                            <span style="font-weight: normal;">Silahkan <span style="font-weight: bold;"> Tekan ENTER(Tombol Hijau)</span>pada Mesin EDC untuk Proses Pengembalian Uang </span>
                                        }
                                    </div>
                                </div>

                                <div class="col-md-6" style="display:grid;min-height:25vh;">
                                    <div id="image-pulsa" class="image-center2" style="align-self:center;">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px">
                                    </div>
                                </div>
                            }
                            break;
                        }
                }
            </div>
        </div>
    </div>

    <footer style="z-index:2;">
        <div class="footer-side1">
            <span class="dot2">1</span>
            <span class="dot2">2</span>
            <span class="dot2">3</span>
            <span class="dot2">4</span>
            <span class="dot2">5</span>
            <span class="dot2">6</span>
            <span class="dot2">7</span>
            <span class="dot2">8</span>
            <span class="dot2" id="dot-active">9</span>
        </div>
        <div class="footer-side2">
            @if (MetodePembayaran == 2 && !IsFail && !IsSuccess)
            {
                <button @onclick="@(()=>InvokeAsync(MenuUtamaCash))" class="btn-arrow btn" value="">Menu Utama</button>
            }
            <!--<sup>Powered By </sup>Trilogi Persada -->
        </div>
    </footer>
</div>
@if (IsExit)
{
    <div id="myModal" class="modal" style="z-index:999;">

        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">Anda belum menyelesaikan proses pembayaran<br>berlangganan kartuHalo. Jika Anda keluar dari menu ini,<br>seluruh uang yang Anda masukkan dapat diambil di<br>Kasir GraPARI dengan menunjukkan struk dari<br>MyGraPARI.</p>
                    <button class="btn btn-danger modal-button" @onclick="@(()=>InvokeAsync(LanjutPembayaran))" id="btn-lanjut">Lanjutkan Pembayaran</button>
                    <button @onclick="@(()=>InvokeAsync(TunaiExitFail))" class="btn btn-light modal-button">Batal</button>
                </div>
            </div>
        </div>
    </div>
    <!-- end modal -->
}
@if (isOpenDoc)
{
    <div id="myModal" class="modal" style="z-index:999;" @onclick="@(()=>InvokeAsync(TambahWaktuDocument))">

        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="card example-1 scrollbar-ripe-malinka" style="text-align: center; margin-bottom:10px; height:500px;">
                        <object data="../../assets/PSB.pdf#toolbar=0&navpanes=0&scrollbar=0" width="100%" height="500px">
                        </object>
                    </div><button class="btn btn-danger modal-button" @onclick="@(()=>InvokeAsync(CloseDocument))" id="btn-lanjut">Tutup</button>
                </div>
            </div>
        </div>
    </div>
    <!-- end modal -->
}
@if (IsVisible)
{
    <!-- The Modal -->
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">@surveys[CESno].quIndText</p>
                    <button class="btn nps-button" value="1" @onclick="@(() => InputNPS1("1"))">1</button>
                    <button class="btn nps-button" value="2" @onclick="@(() => InputNPS1("2"))">2</button>
                    <button class="btn nps-button" value="3" @onclick="@(() => InputNPS1("3"))">3</button>
                    <button class="btn nps-button" value="4" @onclick="@(() => InputNPS1("4"))">4</button>
                    <button class="btn nps-button" value="5" @onclick="@(() => InputNPS1("5"))">5</button>
                    <button class="btn nps-button" value="6" @onclick="@(() => InputNPS1("6"))">6</button>
                    <button class="btn nps-button" value="7" @onclick="@(() => InputNPS1("7"))">7</button>
                    <button class="btn nps-button" value="8" @onclick="@(() => InputNPS1("8"))">8</button>
                    <button class="btn nps-button" value="9" @onclick="@(() => InputNPS1("9"))">9</button>
                    <button class="btn nps-button" value="10" @onclick="@(() => InputNPS1("10"))">10</button>
                    <button @onclick="NPS" class="btn btn-danger button-nps">OK</button>
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>
    </div>
}

@if (IsVisible2)
{
    <!-- The Modal -->
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">Hal apa yang Anda rasa perlu ditingkatkan pada mesin layanan MyGraPARI? </p>
                    <div class="modal-flex">
                        <label>
                            <input type="checkbox">
                            <span class="btn ">Tampilan/Estetika</span>
                        </label>

                        <label>
                            <input type="checkbox">
                            <span class="btn " style="margin-left: 40px;">Kecepatan Proses</span>
                        </label>
                    </div>
                    <div class="modal-flex">
                        <label>
                            <input type="checkbox">
                            <span class="btn ">Kemudahan Penggunaan</span>
                        </label>

                        <label>
                            <input type="checkbox">
                            <span class="btn" style="margin-left: 40px;">Kejelasan Bahasa</span>
                        </label>
                    </div>
                    <button class="btn btn-danger button-nps" value="">OK</button>
                </div>
            </div>
        </div>
    </div>
}
@if (isLoading)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-blank">
            <img class="lds-spinner" onclick="buttonLoad()" src="../../assets/image/loader.gif" id="myBtn2">
            <p><br>Proses pembayaran Berlangganan kartuHalo</p>
            <p>sedang berjalan, mohon tunggu beberapa</p>
            <p>saat...</p>
        </div>
    </div>
}
@if (isTunaiComplete)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">Anda memiliki <span style="font-weight: bold;">KEMBALIAN</span> sebesar<span style="font-weight: bold;"> Rp @intMinus.ToString("N0") </span> yang otomatis akan mengurangi Berlangganan kartuHalo anda di bulan berikutnya.</p>
                    <button class="btn btn-danger modal-button" @onclick="@(()=>InvokeAsync(Tunai))">Lanjut</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>InvokeAsync(TunaiExitFail))">Batal</button>
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>
    </div>
}
@if (isIdleAkhir)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Apakah Anda ingin menambah waktu lagi? <br />
                        Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTimeAkhir</span> detik.
                    </p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktuAkhir))">Ya</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>secondCTimeAkhir=0)">Tidak</button>
                </div>
            </div>
        </div>
    </div>
}
@if (isIdleDocument)
{
    <div id="myModal" class="modal" style="z-index:3;">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Apakah Anda ingin menambah waktu lagi? <br />
                        Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTimeDocument</span> detik.
                    </p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktuDocument))">Ya</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>secondCTimeDocument=0)">Tidak</button>
                </div>
            </div>
        </div>
    </div>
}
@code
{
    public List<CES> surveys = new List<CES>();

    private string pageClass = "main-panel bg-edc-process";
    private bool IsVisible = false;
    private bool IsVisible2 = false;
    private bool isLoading = false;
    private bool IsSuccess = false;
    private bool IsFail = false;
    private bool IsExit = false;
    private bool IsVoid = false;
    private bool IsVoided = false;
    private bool IsInvalid = false;
    private bool IsTunaiExit = false;
    private bool isTunaiComplete = false;
    private bool isPopUp = false;
    private bool isFail = false;
    private bool isOpenDoc = false;

    private int intTryCount = 1;
    private int intTryLimit = 3;
    private int MetodePembayaran = 1;
    private int CESno = 0;
    private int logbank = 0;
    private int logamount = 0;
    private int stock = 0;

    private string strNPS1Value = string.Empty;
    private string strMsgError = string.Empty;
    private string strBillCom = string.Empty;
    private string errorcode = string.Empty;
    private string nohp = string.Empty;

    private int intBill = 0;
    private int intAccBill = 0;
    private int intMinus = 0;

    //public string _myURL = "https://mygrapari.telkomsel.co.id/trilogi/";
    public string _myURL = string.Empty;
    public string serviceURL = "psb-halo/v1/payment";
    private static string cesURL = "ces/v1/eligibility-check";
    private string releaseNumberService = "psb-halo/v1/release-number";
    private string respPaymentError = string.Empty;

    private string qu1IndText = string.Empty;
    private string qu1ID = string.Empty;
    private string qu2IndText = string.Empty;
    private string qu2ID = string.Empty;

    private string qu1EngText = string.Empty;
    private string qu2EngText = string.Empty;

    private string quIndText = string.Empty;
    private string quID = string.Empty;
    private string quEngText = string.Empty;

    private string docPSB = Directory.GetCurrentDirectory() + @"\Logs\PSB.pdf";
    private string strBill => intBill.ToString();
    private string strAccBill => intAccBill.ToString();
    private string strMinus => intMinus.ToString();
    private string strInvoice = "1";
    private string strBilling = "2";
    private string strCOM = "COM";
    private string resultPayment = "00";
    private string resultCash = "01";
    private string cardStock = string.Empty;
    private string cdCOM = "COM";
    private string imgDocman = string.Empty;
    string msg = string.Empty;
    string logoTsel = System.IO.Directory.GetCurrentDirectory() + @"\wwwroot\assets\image\Logo\Logo_MyGraPARI_mini.png";

    #region Document
    private async Task OpenDocument()
    {
        isOpenDoc = true;
        isNotIdleDocument = true;
        await Task.Run(() => DoubleTimeOutDocument()).ConfigureAwait(false);
    }

    private async Task CloseDocument()
    {
        isNotIdleDocument = false;
        isIdleDocument = false;
        isTimeOutDocument = false;
        NavigateTo("/main");
    }
    #endregion
    #region Cash
    private async Task MenuUtamaCash()
    {
        Payout.DisableValidator();
        Payout.SSPComms.CloseComPort();

        IsExit = true;
        isIdle = true;
        isNotIdle = false;
    }

    private async Task LanjutPembayaran()
    {
        IsExit = false;
        await TambahWaktu();
        await MethodCash();
    }
    private async Task MethodCash()
    {
        await Task.Delay(2000);
        await MainLoop(logbank, logamount);

        StateHasChanged();
        await Task.Delay(200);
        intAccBill = Payout.total;

        cst.intUangCount = Payout.uangCount;
        cst.intTagihanTerbayar = Payout.total;
        //logamount = logamount + Payout.total;
        //logbank = logbank + Payout.uangCount;
        //config.Write("BILL", Config.PARAM_BILL_AMOUNT, logamount.ToString());
        //config.Write("BILL", Config.PARAM_BILL_BANK_STOK, logbank.ToString());
        if (!IsTunaiExit)
        {
            intMinus = intAccBill - intBill;
            isTunaiComplete = true;
            return;
        }
        else { return; }
    }
    #endregion
    protected override async Task OnInitializedAsync()
    {
        imgDocman = trans.psbDetail.snkImage;
        counterTime = counterTreshold;
        trans.psbDetail.statusPayment = "01";
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        strCOM = strCOM + config.Read("EDC", Config.PARAM_EDC_PORT);
        MetodePembayaran = cst.intMPembayaran;
        intBill = int.Parse(trans.psbDetail.PaketPSB._hargaAwal);
        cardStock = config.Read("Dispenser", Config.PARAM_STOCK_DISPENSER_1);
        cdCOM = cdCOM + config.Read("Dispenser", Config.PARAM_DEVICE_DISPENSER);
        nohp = trans.psbDetail.selectedNumber;

        if (cardStock == "")
        {
            isFail = true;
            trans.AddTrail("GET STOCK", "CD - 004", "01");
            trans.status = "01";
            trans.errorCode = "CARD DISPENSER";
            await OurUtility.AuditTrailPSB(trans, menu, cst);
            trans.errorCode = "CD - 004";
            OurUtility.Write_Log("==== Card Stock Config Null", "step-action");
            NavigateTo("/error");
            return;
        }
        stock = Int32.Parse(cardStock);

        StateHasChanged();
        //intAccBill = 10000;
        //intMinus = intBill - intAccBill;
        switch (MetodePembayaran)
        {
            case 1:
                {
                    pageClass = "main-panel bg-edc-process";

                    //TODO Integrate with EDC Debit Card
                    cst.intTagihan = intBill;
                    await Pay(strCOM, strBill, strInvoice, strBilling, MetodePembayaran.ToString());

                    if (edc.intTry < 3)
                    {
                        OurUtility.Write_Log("Trace Number : " + trans.edcTrace, "step-action");
                        isLoading = true;
                        InvokeAsync(StateHasChanged);
                        await Task.Delay(200);
                        intAccBill = intBill;
                        await Payment("");
                        //resultPayment = "00";

                        if (resultPayment == "00")
                        {
                            pageClass = "main-panel bg-home";

                            trans.edcStatus = "SUCCESS";
                            isLoading = false;
                            IsFail = false;
                            IsSuccess = true;
                            //Console.WriteLine("Payment Success");
                            InvokeAsync(StateHasChanged);
                            await Task.Delay(200);

                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintPSB(trans, cst, config, logoTsel, ref msg);
                            trans.status = "00";
                            trans.errorCode = "PEMBAYARAN BERLANGGANAN VIA DEBIT BERHASIL";
                            trans.kip = "Berhasil, terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrailPSB(trans, menu, cst);

                            ctAkhir = cTresholdAkhir;
                            await Task.Run(() => DoubleTimeOutAkhir()).ConfigureAwait(false);
                            break;
                        }
                        else
                        {
                            //ToDO Add if Void
                            isLoading = false;
                            //IsVoid = true;
                            IsFail = true;
                            IsSuccess = false;
                            pageClass = "main-panel bg-home";
                            strInvoice = trans.edcTrace;
                            StateHasChanged();
                            await Task.Delay(200);
                            if (trans.edcresp == "00")
                            {

                                if (respPaymentError == "C" || respPaymentError == "A")
                                {
                                    IsVoid = true;
                                }
                                OurUtility.Write_Log("== Void Payment Trace Number = " + strInvoice, "step-action");
                                Void();
                                isLoading = false;
                                StateHasChanged();
                            }
                            trans.status = "01";
                            trans.kip = "Pembayaran oleh pelanggan berhasil, payment ke Payment Gateway gagal, trx id:" + trans.transID + " , terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrailPSB(trans, menu, cst);
                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintPSB(trans, cst, config, logoTsel, ref msg);

                            if (trans.edcRespVoid == "00")
                            {
                                Printer.PrintEDCVoid(trans, cst, config, logoTsel, ref msg);
                            }


                            await Task.Delay(15000);
                            NavigateTo("/main");
                            break;
                        }
                        break;
                    }
                    else
                    {
                        IsFail = true;
                        OurUtility.Write_Log("== Payment EDC Failed ", "step-action");
                        trans.AddTrail("PAYMENT EDC", trans.edcresp, "01");
                        trans.status = "01";
                        await OurUtility.AuditTrailPSB(trans, menu, cst);

                        await Task.Delay(15000);
                        NavigateTo("/main");
                        //Console.WriteLine("Payment Failed");
                    }
                    break;
                }
            case 2:
                {
                    cst.intTagihan = intBill;
                    pageClass = "main-panel bg-home";
                    Payout.total = 0;
                    Payout.uangCount = 0;
                    try
                    {
                        logbank = Int32.Parse(config.Read("BILL", Config.PARAM_BILL_BANK_STOK));
                    }
                    catch (Exception ex)
                    {
                        logbank = 0;
                    }
                    try
                    {
                        logamount = Int32.Parse(config.Read("BILL", Config.PARAM_BILL_AMOUNT));
                    }
                    catch (Exception ex)
                    {
                        logamount = 0;
                    }

                    await MethodCash();
                    break;
                }
            case 3:
                {
                    pageClass = "main-panel bg-edc-process";

                    //TODO Integrate with EDC Debit Card
                    cst.intTagihan = intBill;
                    await Pay(strCOM, strBill, strInvoice, strBilling, MetodePembayaran.ToString());
                    pageClass = "main-panel bg-home";
                    if (edc.intTry < 3)
                    {
                        OurUtility.Write_Log("Trace Number : " + trans.edcTrace, "step-action");
                        isLoading = true;
                        await Task.Delay(2000);
                        intAccBill = intBill;
                        await Payment("");

                        if (resultPayment == "00")
                        {
                            trans.edcStatus = "SUCCESS";
                            isLoading = false;
                            IsSuccess = true;
                            StateHasChanged();
                            //Console.WriteLine("Payment Success");
                            await Task.Delay(200);

                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintPSB(trans, cst, config, logoTsel, ref msg);

                            trans.status = "00";
                            trans.errorCode = "PEMBAYARAN BERLANGGANAN VIA CC BERHASIL";
                            trans.kip = "Berhasil, terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrailPSB(trans, menu, cst);

                            ctAkhir = cTresholdAkhir;
                            await Task.Run(() => DoubleTimeOutAkhir()).ConfigureAwait(false);
                            break;
                        }
                        else
                        {
                            //ToDO Add if Void
                            isLoading = false;
                            //IsVoid = true;
                            IsFail = true;
                            strInvoice = trans.edcTrace;
                            StateHasChanged();
                            await Task.Delay(200);
                            if (trans.edcresp == "00")
                            {

                                IsFail = false;
                                IsVoid = true;
                                OurUtility.Write_Log("== Void Payment Trace Number = " + strInvoice, "step-action");

                                Void();
                                isLoading = false;
                                StateHasChanged();
                            }
                            trans.status = "01";
                            trans.kip = "Pembayaran oleh pelanggan berhasil, payment ke Payment Gateway gagal, trx id:" + trans.transID + " , terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrailPSB(trans, menu, cst);

                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintPSB(trans, cst, config, logoTsel, ref msg);

                            if (trans.edcRespVoid == "00")
                            {
                                Printer.PrintEDCVoid(trans, cst, config, logoTsel, ref msg);
                            }


                            await Task.Delay(15000);
                            NavigateTo("/main");
                            break;
                        }
                        break;
                    }
                    else
                    {
                        IsFail = true;
                        OurUtility.Write_Log("== Payment EDC Failed ", "step-action");
                        trans.AddTrail("PAYMENT EDC", trans.edcresp, "01");
                        trans.status = "01";
                        await OurUtility.AuditTrailPSB(trans, menu, cst);


                        await Task.Delay(15000);
                        NavigateTo("/main");
                        //Console.WriteLine("Payment Failed");
                    }
                    break;
                }
        }
    }

    private async Task GetURLDocman()
    {
        //isLoading = true;
        string myJson = string.Empty;
        string apiURL = "docman/download-form-psb";

        myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
            "\"terminalId\" : \"" + trans.termID + "\"" +
                                "}";

        string myURL = _myURL + apiURL;

        OurUtility.Write_Log("== Get Document", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        //string strResult = "{\"transaction\":{\"statusCode\":\"00\",\"statusDesc\":\"success\"},\"url\":\"https://10.1.89.24/trilogi/mygrapari/v4/docman/download/doc_mygrapari_flp_X002210310020309605896069.pdf\"}";
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);

                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    trans.AddTrail("Get Document", "Transaction Id:" + trans.transID, "00");
                    urlDocman = (string)jobjResult.SelectToken("url");
                    string response = await OurUtility.GetCallAPI(urlDocman, "", menu);
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Get Document", "Transaction Id:" + trans.transID, "01");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Get Document", "Transaction Id:" + trans.transID, "02");
                }

            }
            catch (Exception ex)
            {
                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                trans.AddTrail("Get Document", "Transaction Id:" + trans.transID, "01");
            }
        }
        else
        {
            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            trans.AddTrail("Get Document", "Transaction Id:" + trans.transID, "01");
        }
    }

    private string urlDocman = String.Empty;

    private async Task SendDocument()
    {
        //isLoading = true;
        string myJson = string.Empty;
        string apiURL = "docman/generate-form-psb";

        myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
            "\"terminalId\" : \"" + trans.termID + "\"," +
            "\"image\" : \"" + imgDocman + "\"" +
                                "}";

        string myURL = _myURL + apiURL;

        OurUtility.Write_Log("== Send Document", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        //string strResult = "{\"transaction\":{\"statusCode\":\"00\",\"statusDesc\":\"success\"}}";
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);

                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    trans.AddTrail("Send Document", "Transaction Id:" + trans.transID, "00");
                    await GetURLDocman();
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Send Document", "Transaction Id:" + trans.transID, "01");
                    await SendDocument();
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Send Document", "Transaction Id:" + trans.transID, "02");
                }
            }
            catch (Exception ex)
            {
                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                trans.AddTrail("Send Document", "Transaction Id:" + trans.transID, "01");
            }
        }
        else
        {
            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            trans.AddTrail("Send Document", "Transaction Id:" + trans.transID, "01");
            await SendDocument();
        }
    }
    private async Task CancelComplete()
    {
        isTunaiComplete = false;
        //IsExit = true;
    }
    private async Task Tunai()
    {
        isTimeOut = false;
        isNotIdle = false;
        isTunaiComplete = false;
        resultCash = "00";
        trans.psbDetail.statusPayment = "00";

        await Payment("");
        //resultPayment = "00";
        isLoading = true;
        //Console.WriteLine("inttotal = " + inttotal);
        StateHasChanged();
        if (resultPayment == "00")
        {
            trans.edcStatus = "SUCCESS";
            isLoading = false;
            IsSuccess = true;

            Printer.PrintPSB(trans, cst, config, logoTsel, ref msg);

            //Console.WriteLine("Payment Success");
            await Task.Delay(200);
            trans.status = "00";
            trans.errorCode = "PEMBAYARAN BERLANGGANAN VIA CASH BERHASIL";
            trans.kip = "Berhasil, terminal id:" + menu.terminalId;

            await OurUtility.AuditTrailPSB(trans, menu, cst);

            ctAkhir = cTresholdAkhir;
            await Task.Run(() => DoubleTimeOutAkhir()).ConfigureAwait(false);
        }
        else
        {
            isLoading = false;
            IsFail = true;

            StateHasChanged();
            await Task.Delay(100);
            Printer.PrintPSB(trans, cst, config, logoTsel, ref msg);

            trans.status = "01";
            trans.kip = "Pembayaran oleh pelanggan berhasil, payment ke Payment Gateway gagal, trx id:" + trans.transID + " , terminal id:" + menu.terminalId;
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            await Task.Delay(15000);
            NavigateTo("/main");
        }
    }

    private bool translog = true;
    private async Task TunaiExitFail()
    {
        if (translog)
        {
            translog = false;
            intAccBill = Payout.total;
            cst.intTagihanTerbayar = Payout.total;
            cst.intUangCount = Payout.uangCount;
            resultCash = "01";
            trans.psbDetail.statusPayment = "01";

            IsExit = false;
            IsTunaiExit = true;
            isTunaiComplete = false;
            IsFail = true;
            isIdle = false;
            isNotIdle = false;
            trans.AddTrail("PAYMENT CASH", "Paid Ammount:" + intAccBill.ToString(), "02");

            await Payment("");

            Printer.PrintPSB(trans, cst, config, logoTsel, ref msg);

            Task.Delay(500);

            trans.kip = "Pembayaran tidak dilanjutkan, terminal id:" + menu.terminalId;
            trans.status = "02";
            trans.errorCode = "CANCELED";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            await Task.Delay(15000);
            NavigateTo("/main");
        }
    }

    private async Task Void()
    {
        if (IsVoid)
        {
            IsFail = true;
            await Void(strCOM, strBill, strInvoice, strBilling, MetodePembayaran.ToString());
            await VoidService();
        }
    }
    private async Task VoidService()
    {
        //isLoading = true;
        string myJson = string.Empty;
        string apiURL = "transaction/v1/void";

        myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
            "\"terminalId\" : \"" + trans.termID + "\"," +
                                "\"ecr\" : \"" + trans.ecr + "\"," +
                                "\"sn\" : \"" + config.snEdc + "\"" +
                                "}";

        string myURL = _myURL + apiURL;

        OurUtility.Write_Log("== VOID Payment", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                resultPayment = (string)jobjResult["transaction"].SelectToken("statusCode");

                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "00");

                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "02");
                }

            }
            catch (Exception ex)
            {
                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                trans.AddTrail(" VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
            }
        }
        else
        {
            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
        }
    }
    private void CheckPerso()
    {
        if (!isLoading && !IsSuccess && !IsFail && !IsVisible)
        {
            isLoading = true;
        }
        else if (isLoading && !IsSuccess)
        {
            isLoading = false;
            if (intTryCount <= intTryLimit)
                intTryCount += 1;
            else
                IsFail = true;
        }
    }


    private void InputNPS1(string strInput)
    {
        strNPS1Value = strInput;
    }
    private async Task NPS()
    {
        surveys[CESno].answValue = strNPS1Value;
        CESno += 1;
        if (CESno >= surveys.Count())
        {
            IsVisible = false;
            isIdleSurvey = false;
            isNotIdleSurvey = false;
            StateHasChanged();
            await Task.Delay(2000);
            //ToDo Send Answer
        }
    }
    private async Task CheckNPS(string strURL)
    {

        string myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                "\"noHp\" : \"" + nohp + "\"," +
                                "\"terminalId\" : \"" + trans.termID + "\"" +
                                "}";
        string myURL = _myURL + cesURL;

        OurUtility.Write_Log("== Check CES", "step-action");
        //OurUtility.Write_Log("== URL API : " + myURL, "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    foreach (var question in jobjResult.SelectToken("surveys"))
                    {
                        CES c = new CES();
                        c.quIndText = (string)question.SelectToken("questionTextInd");
                        c.quEngText = (string)question.SelectToken("questionTextEn");
                        c.quID = (string)question.SelectToken("questionId");
                        c.answID = (string)question.SelectToken("answerId");
                        surveys.Add(c);
                    }
                    IsVisible = true;
                    return;
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    
                    //                    isLoading = false;
                    //                  IsVisible = false;
                    //                IsInvalid = true;
                    //NavMan.NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    IsVisible = false;
                    IsInvalid = true;
                    
                }
            }
            catch (Exception ex)
            {
                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                
                //NavMan.NavigateTo("/error");
            }
        }
        else
        {
            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            
            //NavMan.NavigateTo("/error");
        }
    }
    private async Task Pay(string serialPortName, string tagihan, string invoice, string billing, string mPemabayaran)
    {
        try
        {
            InvokeAsync(StateHasChanged);
            OurUtility.Write_Log("== Payment Via EDC", "step-action");
            string _transType = "01";
            cst.intTagihanTerbayar = intBill;
            edc.Clear();
            edc.serialPort = new SerialPort();
            edc.serialPort.PortName = serialPortName;

            //edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceived);
            do
            {
                await Task.Delay(200);
                OurUtility.Write_Log("== Payment EDC : " + edc.serialPort.PortName + " " + tagihan + " " + _transType + " " + invoice + " " + billing + " " + mPemabayaran, "step-action");
                edc.SendCommand(tagihan, edc.serialPort, _transType, invoice, billing, mPemabayaran);

            } while (!edc.mre.WaitOne());
            trans.ecr = edc.ecr;
            trans.edcresp = trans.ecr.Substring(146, 2);
            trans.edcTid = trans.ecr.Substring(2, 8);
            trans.edcMid = trans.ecr.Substring(10, 15);
            trans.edcBatch = trans.ecr.Substring(25, 6);
            trans.edcIssuer = trans.ecr.Substring(31, 15);
            trans.edcRefNo = trans.ecr.Substring(46, 6);
            trans.edcTrace = trans.ecr.Substring(52, 6);
            trans.edcEntryCode = trans.ecr.Substring(58, 1);
            trans.edcAmount = trans.ecr.Substring(59, 12);
            trans.edcTotalAmount = trans.ecr.Substring(71, 12);
            trans.edcCardNo = trans.ecr.Substring(83, 19);
            trans.edcCardName = trans.ecr.Substring(102, 26);
            trans.edcDate = trans.ecr.Substring(128, 6);
            trans.edcTime = trans.ecr.Substring(134, 6);
            trans.edcApproval = trans.ecr.Substring(140, 6);
            await Task.Delay(200);
            if (trans.edcresp == "00")
            {
                trans.psbDetail.statusPayment = "00";
                OurUtility.Write_Log("== Payment Via EDC Success", "step-action");
                trans.AddTrail("PAYMENT EDC", trans.edcresp, "00");

                isLoading = true;
                pageClass = "main-panel bg-home";
            }
            else
            {
                trans.psbDetail.statusPayment = "01";
                OurUtility.Write_Log("== Payment Via EDC Failed", "step-action");
                trans.AddTrail("PAYMENT EDC", trans.edcresp, "01");
            }
            //Console.WriteLine(trans.edcresp);
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("== Error EDC : " + ex.Message, "step-action");
            trans.AddTrail("PAYMENT EDC", ex.Message, "01");
        }
    }

    private async Task Void(string serialPortName, string tagihan, string invoice, string billing, string mPemabayaran)
    {
        string _transType = "02";
        OurUtility.Write_Log("EDC VOID", "step-action");
        edc.Clear();
        edc.serialPort = new SerialPort();
        edc.serialPort.PortName = serialPortName;
        edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceived);
        do
        {
            await Task.Delay(200);
            edc.SendCommand(tagihan, edc.serialPort, _transType, invoice, billing, mPemabayaran);

        } while (!edc.mre.WaitOne());
        trans.ecrVoid = edc.ecr;
        trans.edcRespVoid = trans.ecrVoid.Substring(146, 2);

        trans.edcTid = trans.ecrVoid.Substring(2, 8);
        trans.edcMid = trans.ecrVoid.Substring(10, 15);
        trans.edcBatch = trans.ecrVoid.Substring(25, 6);
        trans.edcIssuer = trans.ecrVoid.Substring(31, 15);
        trans.edcRefNo = trans.ecrVoid.Substring(46, 6);
        trans.edcTrace = trans.ecrVoid.Substring(52, 6);
        trans.edcCardNo = trans.ecrVoid.Substring(83, 19);
        trans.edcCardName = trans.ecrVoid.Substring(102, 26);
        trans.edcDate = trans.ecrVoid.Substring(128, 6);
        trans.edcTime = trans.ecrVoid.Substring(134, 6);
        trans.edcApproval = trans.ecrVoid.Substring(140, 6);
        trans.edcRefNumber = trans.ecrVoid.Substring(148, 12);
        trans.edcBillingNumber = trans.ecrVoid.Substring(160, 16);
        trans.edcBalance = trans.ecrVoid.Substring(176, 12);
        trans.edcTopUp = trans.ecrVoid.Substring(188, 19);
        trans.edcExp = trans.ecrVoid.Substring(207, 6);
        trans.edcInvoiceLA = trans.ecrVoid.Substring(213, 10);
        trans.edcBankFiller = trans.ecrVoid.Substring(223);

        await Task.Delay(200);
        if (trans.edcRespVoid == "00")
        {
            IsVoided = true;
            trans.edcStatus = "VOIDED";
            OurUtility.Write_Log("== Payment Voided", "step-action");
            trans.AddTrail("VOID EDC", trans.edcRespVoid, "00");
        }
        else
        {
            OurUtility.Write_Log("== Void Failed", "step-action");
            trans.AddTrail("VOID EDC", trans.edcRespVoid, "01");
        }
    }

    private async Task Payment(string strURL)
    {
        isLoading = true;
        string myJson = string.Empty;
        string payment = string.Empty;

        string psbDetail = "{ \"noHp\" : \"" + trans.psbDetail.selectedNumber + "\"," +
                "\"priceplanId\" : \"" + trans.psbDetail.PaketPSB._pricePlanId + "\"," +
                "\"offerId\" : \"" + trans.psbDetail.PaketPSB._offerId + "\"," +
                "\"parrentId\" : \"" + trans.psbDetail.PaketPSB._parentId + "\"," +
                "\"poolName\" : \"" + trans.psbDetail.PaketPSB._poolName + "\"," +
                "\"isAgree\" : \"" + trans.psbDetail.strTC + "\"," +
                                    "\"isAgreeEbill\" : \"" + trans.psbDetail.strEbill + "\"," +
                                    "\"idReservation\" : \"" + trans.psbDetail.reserveId + "\"," +
                                    "\"variantName\" : \"" + trans.psbDetail.PaketPSB._varianName + "\"," +
                                    "\"persoId\" : \"" + trans.persoID + "\"}";

        //trans.psbDetail.ektpData.PlaceOfBirth = "JAKARTA";
        //trans.psbDetail.ektpData.Address = "KP. KANDANG";
        //trans.psbDetail.ektpData.Gender = "LAKI-LAKI";
        //trans.psbDetail.ektpData.City = "JAKARTA SELATAN";
        //trans.psbDetail.ektpData.Province = "DKI JAKARTA";

        string customerProfile = "{ \"namaLengkap\" : \"" + trans.psbDetail.nama + "\"," +
            "\"noKtp\" : \"" + trans.psbDetail.nik + "\"," +
            "\"noKk\" : \"" + trans.psbDetail.nokk + "\"," +
            "\"tempatLahir\" : \"" + trans.psbDetail.ektpData.PlaceOfBirth/*"JAKARTA"*/ + "\"," +
            "\"tanggalLahir\" : \"" + trans.psbDetail.tglLahir + "\"," +
            "\"alamat\" : \"" + trans.psbDetail.ektpData.Address/*"KP. KANDANG"*/ + "\"," +
            "\"jenisKelamin\" : \"" + trans.psbDetail.ektpData.Gender/*"LAKI-LAKI"*/ + "\"," +
                                "\"kota\" : \"" + trans.psbDetail.ektpData.City/*"JAKARTA SELATAN"*/ + "\"," +
                                "\"provinsi\" : \"" + trans.psbDetail.ektpData.Province/*"DKI JAKARTA"*/ + "\"," +
                                "\"pekerjaan\" : \"" + trans.psbDetail.ektpData.Province/*"KARYAWAN SWASTA"*/ + "\"," +
                                "\"email\" : \"" + trans.psbDetail.alamatEmail + "\"}";

        if (MetodePembayaran == 1 || MetodePembayaran == 3)
        {
            payment = "{ \"paymentMethod\" : \"" + trans.paymentMethod + "\"," +
                                    "\"amount\" : \"" + trans.psbDetail.PaketPSB._hargaAwal + "\"," +
                                    "\"submitAmount\" : \"" + trans.psbDetail.PaketPSB._hargaAwal + "\"," +
                                    "\"statusPayment\" : \"" + trans.psbDetail.statusPayment + "\"," +
                                    "\"edc\" : {" +
                                    "\"responseCode\" : \"" + trans.edcresp + "\"," +
                                    "\"ecr\" : \"" + trans.ecr + "\"," +
                                    "\"sn\" : \"" + config.snEdc + "\"}" +
                                    "}";
        }
        else
        {
            payment = "{ \"paymentMethod\" : \"" + trans.paymentMethod + "\"," +
                                    "\"amount\" : \"" + trans.psbDetail.PaketPSB._hargaAwal + "\"," +
                                    "\"submitAmount\" : \"" + strAccBill + "\"," +
                                    "\"statusPayment\" : \"" + trans.psbDetail.statusPayment + "\"," +
                                    "\"lembarUang\" : \"" + cst.intUangCount + "\"" +
                                    "}";
        }

        myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                "\"terminalId\" : \"" + trans.termID + "\"," +
                "\"psbDetail\" : " + psbDetail + "," +
                "\"customerProfile\" : " + customerProfile + "," +
                "\"payment\" : " + payment +
                "}";

        string myURL = _myURL + serviceURL;

        OurUtility.Write_Log("== Payment", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        //string strResult = "{\"transaction\":{\"transactionId\":\"X002210310020309605896069\",\"statusCode\":\"00\",\"statusDesc\":\"success\"}}";
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest" && strResult != "GatewayTimeout")
        {
            try
            {
                isLoading = false;
                JObject jobjResult = JObject.Parse(strResult);
                resultPayment = (string)jobjResult["transaction"].SelectToken("statusCode");
                trans.resultPayment = resultPayment;

                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "00");
                    await Task.Run(() => MoveToTheFront());
                    await SendDocument();
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    isFail = true;
                    trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");

                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                        respPaymentError = trans.errorCode.Substring(0, 1);
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    await Task.Run(() => MoveToRFCard());
                    await Task.Run(() => MoveToBin());

                    await ReleaseNumber();
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    isLoading = false;
                    IsVisible = false;
                    IsInvalid = true;
                    trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "02");
                    await ReleaseNumber();
                }

            }
            catch (Exception ex)
            {
                trans.resultPayment = "03";

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
                await Task.Run(() => MoveToRFCard());
                await Task.Run(() => MoveToBin());

                await ReleaseNumber();
            }
        }
        else
        {
            trans.resultPayment = "04";

            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
            await Task.Run(() => MoveToRFCard());
            await Task.Run(() => MoveToBin());

            await ReleaseNumber();
        }
    }

    CPayout Payout = new CPayout();
    Global global = new Global();
    int inttotal = 0;

    int reconnectionAttempts = 5;
    bool Running = false;

    private async Task MainLoop(int bankNote, int bankAmount)
    {
        try
        {
            Payout.CommandStructure.ComPort = global.ComPort;
            Payout.CommandStructure.SSPAddress = global.SSPAddress;
            Payout.CommandStructure.Timeout = 3000;
            Payout.HoldNumber = 0;

            if (ConnectToValidator(reconnectionAttempts, 2))
            {
                //Console.WriteLine("1");
                Running = true;
                //Payout.ConfigureBezel(0x00, 0xFF, 0x00);
            }

            while (Payout.total < cst.intTagihan)
            {
                await Task.Delay(1000);
                //Console.WriteLine("2");
                if (!Payout.DoPoll(trans, bankNote, bankAmount, ref counterTime))
                {
                    //Console.WriteLine("Poll failed, attempting to reconnect...\r\n");
                    while (true)
                    {
                        Payout.SSPComms.CloseComPort();
                        if (ConnectToValidator(reconnectionAttempts, 2) == true)
                            break;
                        Payout.SSPComms.CloseComPort();
                        return;
                    }
                    //Console.WriteLine("Reconnected\r\n");
                }
                //Console.WriteLine("9");
                if (Payout.total > inttotal)
                {
                    ResetTimer();
                }
                inttotal = Payout.total;
                //Console.WriteLine("inttotal = " + inttotal);
                StateHasChanged();
                // UpdateUI();
                //if(!bFormSetup)
                //{
                //}
            }
            //Console.WriteLine("10");
            Payout.DisableValidator();
            Payout.SSPComms.CloseComPort();
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
            trans.errorCode = "Exception Error";
            trans.AddTrail("BILL ACCEPTOR", "BA - 001", "01");
            return;
        }
    }
    private byte FindMaxProtocolVersion()
    {
        byte b = 0x06;
        while (true)
        {
            Payout.SetProtocolVersion(b);
            if (Payout.CommandStructure.ResponseData[0] == CCommands.SSP_RESPONSE_FAIL)
                return --b;
            b++;
            if (b > 12)
                return 0x06; // return default
        }
    }
    private bool IsUnitValid(char unitType)
    {
        if (unitType == (char)0x00) // 0x06 is Payout, no other types supported by this program
            return true;
        return false;
    }
    private bool ConnectToValidator(int attemps, int interval)
    {
        //reconnectionTimer.Interval = interval * 1000;
        Task.Delay(interval * 1000).GetAwaiter();
        for (int i = 0; i < attemps; i++)
        {
            Payout.SSPComms.CloseComPort();
            Payout.CommandStructure.EncryptionStatus = false;
            if (Payout.OpenComPort() && Payout.NegotiateKeys())
            {
                Payout.CommandStructure.EncryptionStatus = true;
                byte maxPVersion = FindMaxProtocolVersion();
                if (maxPVersion >= 6)
                {
                    Payout.SetProtocolVersion(maxPVersion);
                }
                else
                {
                    return false;
                }
                Payout.PayoutSetupRequest();
                if (!IsUnitValid(Payout.UnitType))
                {
                    break;
                    return false;
                }

                Payout.SetInhibits();
                Payout.GetSerialNumber();
                Payout.EnableValidator();
                Payout.EnablePayout();
                return true;
            }
        }
        return false;
    }
    #region printOld
    private async Task Print()
    {
        int height = 0;

        PrintContent prtContent = new PrintContent();
        string msg = string.Empty;
        string logoTsel = System.IO.Directory.GetCurrentDirectory() + @"\wwwroot\assets\image\Logo\Logo_MyGraPARI_mini.png";

        string content = prtContent.BTH(trans, cst, config);
        string header = prtContent.Header(trans, cst, config);
        string footer = prtContent.FOOTER(trans, cst, config);
        bool result = Printer.Print(config, header, content, logoTsel, footer, ref msg);
    }
    #endregion
    private void TimerElapsedHandler()
    {
        NavigateTo("/main");
    }

    private void TimerElapsedHandlerCES()
    {
        //CheckNPS("");
        isLoading = true;
        StateHasChanged();
    }

    private void NavigateTo(string strURL)
    {
        NavMan.NavigateTo(strURL);
    }

    private async Task ReleaseNumber()
    {
        isLoading = true;
        await Task.Delay(5000);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"poolName\": \"" + trans.psbDetail.PaketPSB._poolName + "\"," +
            "\"noHp\": \"" + trans.psbDetail.selectedNumber + "\"" +
               "}";
        string myURL = _myURL + releaseNumberService;
        OurUtility.Write_Log("Release Number", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" &&
            strResult != "BadRequest" && strResult != "InternalServerError")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "00");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "01");
                    isLoading = false;
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.patternNumber + ", Pool : " + trans.psbDetail.selectedPaket, "02");

                    isPopUp = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                isLoading = false;
                trans.AddTrail("Release Number", "Exception Error ", "01");

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                //NavMan.NavigateTo("/error");
            }
        }
        else
        {
            isLoading = false;
            trans.AddTrail("Release Number", "Hit Webservice Error : " + strResult, "01");

            trans.errorCode = "Hit Webservice Error : " + strResult;
            OurUtility.Write_Log("== Error : Hit Webservice Error : " + strResult, "step-action");
            //isNotIdle = false;
            //NavMan.NavigateTo("/error");
        }
    }

    private bool MoveToTheFront()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To The Front Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, cdCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed, error : " + errorcode + " , msg : " + msg, "step-action");
            return false;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Front_Hold", "step-action");
        if (!cds.MoveTo_The_Front(ref errorcode, ref msg))
        {
            OurUtility.Write_Log("==== 5. Card_Dispenser.MoveToTheFront, Failed, error : " + errorcode + " , msg : " + msg, "step-action");
            return false;
        }

        trans.AddTrail("MOVE TO FRONT", "", "00");
        stock = stock - 1;
        trans.jumlah_kartu = stock;
        config.Write("Dispenser", Config.PARAM_STOCK_DISPENSER_1, trans.jumlah_kartu.ToString());

        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        return true;
    }
    private bool MoveToRFCard()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To The RF Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, cdCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed, error : " + errorcode + " , msg : " + msg, "step-action");
            return false;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_RF", "step-action");
        if (!cds.MoveTo_RF_Card(ref errorcode, ref msg))
        {
            OurUtility.Write_Log("==== 5. Card_Dispenser.MoveToRFCard, Failed, error : " + errorcode + " , msg : " + msg, "step-action");
            return false;
        }
        OurUtility.Write_Log("==== " + msg, "step-action");
        trans.AddTrail("MOVE TO RF", "", "00");

        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        return true;
    }
    private bool MoveToBin()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To Bin Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, cdCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed, error : " + errorcode + " , msg : " + msg, "step-action");
            return false;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Bin", "step-action");
        if (!cds.MoveTo_Bin(ref errorcode, ref msg))
        {
            OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Bin, Failed " + errorcode + " message : " + msg, "step-action");
            return false;
        }

        trans.AddTrail("MOVE TO BIN", "", "00");
        stock = stock - 1;
        trans.jumlah_kartu = stock;
        config.Write("Dispenser", Config.PARAM_STOCK_DISPENSER_1, trans.jumlah_kartu.ToString());

        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        return true;
    }
    #region TimeOut
    private int counterTime = 60;
    private int counterTreshold = 60;
    private bool isIdle = false;
    private bool isNotIdle = true;
    private async Task IdleTime()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 9b Time Left : " + counterTime.ToString());
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                isIdle = true;
                IsExit = true;
                isNotIdle = false;
                secondCTime = counterTreshold;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdle);
    }
    #endregion

    #region SecondTimeOut
    private int secondCTime;
    private bool isTimeOut = false;

    private async Task TimeOut()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 9b Out Left : " + secondCTime.ToString());
            secondCTime = secondCTime - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTime < 0)
            {
                isIdle = false;
                isTimeOut = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdle);
    }

    private async Task TambahWaktu()
    {
        //Console.WriteLine("Tambah Waktu");
        counterTime = counterTreshold;
        //secondCTime = 0;
        isIdle = false;
        isTimeOut = false;
        isNotIdle = true;
        await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOut()
    {
        await Task.Run(() => IdleTime()).ConfigureAwait(false);
        if (isIdle)
            await Task.Run(() => TimeOut()).ConfigureAwait(false);

        if (isTimeOut)
        {
            //Console.WriteLine("Time Out 2");
            //NavigateTo("/main");
            await TunaiExitFail();
        }
    }

    private async Task ResetTimer()
    {
        if (!isIdle)
        {
            //Console.WriteLine("Timer Reset");
            counterTime = counterTreshold;
        }
    }
    #endregion
    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            #region AfterRenderTimeOut
            if (MetodePembayaran == 2)
            {
                await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
            }
            #endregion
        }
    }
    #region TimeOutAkhir
    private int ctAkhir = 20;
    private int cTresholdAkhir = 20;
    private bool isIdleAkhir = false;
    private bool isNotIdleAkhir = true;
    private async Task IdleTimeAkhir()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 9b Akhir Time Left : " + ctAkhir.ToString());
            ctAkhir = ctAkhir - 1;
            InvokeAsync(StateHasChanged);
            if (ctAkhir == 10)
            {
                await CheckNPS("");
                //IsVisible = true;
                if (IsVisible)
                {
                    isIdleAkhir = false;
                    isNotIdleAkhir = false;
                    await Task.Run(() => DoubleTimeOutSurvey()).ConfigureAwait(false);
                }
            }
            if (ctAkhir < 1)
            {
                isIdleAkhir = false;
                isNotIdleAkhir = false;
                secondCTimeAkhir = cTresholdAkhir;
                isTimeOutAkhir = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdleAkhir);
    }
    #endregion

    #region SecondTimeOutAkhir
    private int secondCTimeAkhir;
    private bool isTimeOutAkhir = false;

    private async Task TimeOutAkhir()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 9b Akhir Out Left : " + secondCTimeAkhir.ToString());
            secondCTimeAkhir = secondCTimeAkhir - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTimeAkhir < 0)
            {
                isIdleAkhir = false;
                isTimeOutAkhir = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdleAkhir);
    }

    private async Task TambahWaktuAkhir()
    {
        //Console.WriteLine("Tambah Waktu");
        ctAkhir = cTresholdAkhir;
        //secondCTime = 0;
        isIdleAkhir = false;
        isTimeOutAkhir = false;
        isNotIdleAkhir = true;
        await Task.Run(() => DoubleTimeOutAkhir()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOutAkhir()
    {
        await Task.Run(() => IdleTimeAkhir()).ConfigureAwait(false);
        if (isIdleAkhir)
            await Task.Run(() => TimeOutAkhir()).ConfigureAwait(false);
        if (isTimeOutAkhir)
        {
            //Console.WriteLine("Time Out 2");
            NavigateTo("/main");
            //await TunaiExitFail();
        }
    }

    private async Task ResetTimerAkhir()
    {
        if (!isIdleAkhir)
        {
            //Console.WriteLine("Timer Reset");
            ctAkhir = cTresholdAkhir;
        }
    }
    #endregion

    #region TimeOutSurvey
    private int ctSurvey = 20;
    private int cTresholdSurvey = 20;
    private bool isIdleSurvey = false;
    private bool isNotIdleSurvey = true;
    private async Task IdleTimeSurvey()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 9b Survey Time Left : " + ctSurvey.ToString());
            ctSurvey = ctSurvey - 1;
            InvokeAsync(StateHasChanged);
            if (ctSurvey < 1)
            {
                isIdleSurvey = false;
                isNotIdleSurvey = false;
                isTimeOutSurvey = true;
                secondCTimeSurvey = cTresholdSurvey;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdleSurvey);
    }
    #endregion

    #region SecondTimeOutSurvey
    private int secondCTimeSurvey;
    private bool isTimeOutSurvey = false;

    private async Task TimeOutSurvey()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 9b Survey Out Left : " + secondCTimeSurvey.ToString());
            secondCTimeSurvey = secondCTimeSurvey - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTimeSurvey < 0)
            {
                isIdleSurvey = false;
                isTimeOutSurvey = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdleSurvey);
    }

    private async Task TambahWaktuSurvey()
    {
        //Console.WriteLine("Tambah Waktu");
        ctSurvey = cTresholdSurvey;
        //secondCTime = 0;
        isIdleSurvey = false;
        isTimeOutSurvey = false;
        isNotIdleSurvey = true;
        await Task.Run(() => DoubleTimeOutSurvey()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOutSurvey()
    {
        await Task.Run(() => IdleTimeSurvey()).ConfigureAwait(false);
        if (isIdleSurvey)
            await Task.Run(() => TimeOutSurvey()).ConfigureAwait(false);
        if (isTimeOutSurvey)
        {
            //Console.WriteLine("Time Out 2");
            NavigateTo("/main");
            //await TunaiExitFail();
        }
    }

    private async Task ResetTimerSurvey()
    {
        if (!isIdleSurvey)
        {
            //Console.WriteLine("Timer Reset");
            ctSurvey = cTresholdSurvey;
        }
    }
    #endregion

    #region TimeOutDocument
    private int ctDocument = 60;
    private int cTresholdDocument = 60;
    private bool isIdleDocument = false;
    private bool isNotIdleDocument = true;
    private async Task IdleTimeDocument()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 9b Document Time Left : " + ctDocument.ToString());
            ctDocument = ctDocument - 1;
            InvokeAsync(StateHasChanged);
            if (ctDocument < 1)
            {
                isIdleDocument = true;
                isNotIdleDocument = false;
                secondCTimeDocument = cTresholdSurvey;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdleDocument);
    }
    #endregion

    #region SecondTimeOutDocument
    private int secondCTimeDocument;
    private bool isTimeOutDocument = false;

    private async Task TimeOutDocument()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 9b Survey Out Left : " + secondCTimeDocument.ToString());
            secondCTimeDocument = secondCTimeDocument - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTimeDocument < 0)
            {
                isIdleDocument = false;
                isTimeOutDocument = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdleDocument);
    }

    private async Task TambahWaktuDocument()
    {
        //Console.WriteLine("Tambah Waktu");
        ctDocument = cTresholdDocument;
        //secondCTime = 0;
        isIdleDocument = false;
        isTimeOutDocument = false;
        isNotIdleDocument = true;
        await Task.Run(() => DoubleTimeOutDocument()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOutDocument()
    {
        await Task.Run(() => IdleTimeDocument()).ConfigureAwait(false);
        if (isIdleDocument)
            await Task.Run(() => TimeOutDocument()).ConfigureAwait(false);
        if (isTimeOutDocument)
        {
            //Console.WriteLine("Time Out 2");
            NavigateTo("/main");
            //await TunaiExitFail();
        }
    }

    private async Task ResetTimerDocument()
    {
        if (!isIdleDocument)
        {
            //Console.WriteLine("Timer Reset");
            ctDocument = cTresholdDocument;
        }
    }
    #endregion
} 