@page "/PSB/4"
@using MyG5Blazor.Data
@using System.Linq;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System;
@using System.Threading.Tasks;
@using System.Net.Http;
@inject IJSRuntime JSRuntime
@inject BlazorTimer Timer
@inject NavigationManager NavMan
@inject Ektp_Data ktp
@inject Costumer cst
@inject Config config
@inject Transaction trans
@inject Menu menu
@using MyG5Blazor.Data

<div class="main-panel bg-home" style="z-index:1;" @onclick="@(()=>InvokeAsync(ResetTimer))">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="col-md-6">
                <div class="input-group no-border">
                    <div class="checklist">
                        @if (isLoading)
                        {
                            <img src="../../assets/image/loader.gif" />
                        }
                        else if (isSuccess)
                        {
                            <img src="../../assets/image/tanda_checklist.png" />
                        }
                    </div>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="teks-title">Berlangganan KartuHalo</div>

                    @if (!isSuccess)
                    {
                        <div id="proses-pindai">
                            <div class="teks-center"> Letakkan <span style="font-weight: bold;">e-KTP</span> Anda pada Alat Pemindai</div>
                            <div class="teks-footer"> Lalu tekan <span style="font-weight: bold;">"Pindai"</span></div>
                        </div>
                    }
                    else
                    {
                        <div id="proses-berhasil">
                            <div class="teks-center"> Proses Pindai e-Ktp Berhasil</div>
                        </div>
                    }
                </div>

                <div class="col-md-6">
                    <img class="ktp" src="../../assets/image/Scan_KTP-01.png">
                    @if (!isSuccess)
                    {
                        <a id="myBtn" href="" @onclick="CheckEKTP" @onclick:preventDefault>
                            <img class="pindai" src="../../assets/image/Pindai.png">
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
    <footer style="z-index:2;">
        <div class="footer-side1">
            <span class="dot2">1</span>
            <span class="dot2">2</span>
            <span class="dot2">3</span>
            <span class="dot2" id="dot-active">4</span>
            <span class="dot2">5</span>
            <span class="dot2">6</span>
            <span class="dot2">7</span>
            <span class="dot2">8</span>
            <span class="dot2">9</span>
        </div>
        <div class="footer-side2">
            <button @onclick="@Back" class="btn-arrow btn" value="">Kembali</button>
            <button @onclick="@MenuUtamaCanceled" class="btn-arrow btn" value="">Menu Utama</button>
            <!-- <sup>Powered By </sup>Trilogi Persada -->
        </div>
    </footer>

</div>
@if (isLoading2)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-blank">
            <img class="lds-spinner" src="../../assets/image/loader.gif">
            <p><br>Mohon tunggu</p>
            <p>proses sedang berlangsung...</p>
        </div>
    </div>
}
@if (isFPNoData)
{
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">Silahkan menekan tombol OK <span style="font-weight:bold;">SETELAH</span> Anda mengangkat EKTP Anda dan meletakkan kembali kepada alat pemindai.</p>
                    <button class="btn btn-danger modal-button" @onclick="FPConfirm">OK</button>
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>

    </div>
}
@if (isFPNoDataConfirm)
{
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">Apakah Anda telah mengangkat EKTP Anda dan meletakkan kembali kepada alat pemindai?</p>
                    <button class="btn btn-danger modal-button" @onclick="FPUnConfirm">Tidak</button>
                    <button class="btn btn-white modal-button" @onclick="FP2">Ya</button>
                    <button class="btn btn-danger modal-button" @onclick="MenuUtamaCanceled">Batal</button>
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>

    </div>
}
@if (IsVisible)
{
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    @if (intTryCount <= intTryLimit)
                    {
                        <p class="text-body">Silakan pindai kembali <span style="font-weight: bold;">e-KTP</span> Anda, pastikan alat <br />pemindai dalam keadaan bersih</p>
                        <button class="btn btn-danger modal-button" @onclick="CheckEKTP">OK</button>
                    }
                    else
                    {
                        <p class="text-body">Maaf, <span style="font-weight: bold;">e-KTP</span> Anda tidak terbaca pada sistem MyGraPARI. Silahkan hubungi<span style="font-weight: bold;"> Customer Service </span>GraPARI untuk bantuan.</p>
                        <button @onclick="@(()=>InvokeAsync(MenuUtama))" class="btn btn-danger modal-button" id="span1">OK</button>
                    }
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>

    </div>
}
@if (isIdle)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Apakah Anda ingin menambah waktu lagi? <br />
                        Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTime</span> detik.
                    </p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktu))">Ya</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>secondCTime=0)">Tidak</button>
                </div>
            </div>
        </div>
    </div>
}
@code{
    private bool IsVisible = false;
    private bool isLoading = false;
    private bool isSuccess = false;
    private bool isFail = false;
    private bool IsNext = false;
    private bool isLoading2 = false;
    private bool isFPNoData = false;
    private bool isFPNoDataPush = true;
    private bool isFPNoDataConfirm = false;
    private bool isFPNoDataConfirmPush = true;
    private bool isFPNoDataUnComfirmPush = false;
    private bool isPopUp = false;
    private bool isNumberReleased = false;

    public string _myURL = "";
    public string saveURL = "log/v1/save";
    public string PCID = string.Empty;
    public string CONF = string.Empty;
    private string releaseNumberService = "psb-halo/v1/release-number";
    private string strMsgError = string.Empty;

    private int intTryCount = 1;
    private int intTryLimit = 3;

    private IntPtr hContext = IntPtr.Zero;

    private CRT_Interface ektpC = new CRT_Interface();

    string CID;
    string KID;
    byte[] pbPcid;

    byte[] pbConf;
    private bool translog = true;
    private async Task MenuUtama()
    {
        if (translog)
        {
            translog = false;
            IsVisible = false;
            isLoading2 = true;
            await ReleaseNumber();
            if (isNumberReleased)
            {
                trans.status = "01";
                trans.errorCode = "EKTP";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                NavigateTo("/main");
            }
        }
    }
    private async Task MenuUtamaCanceled()
    {
        if (translog)
        {
            isLoading = false;
            translog = false;
            IsVisible = false;
            isLoading2 = true;
            await ReleaseNumber();
            trans.AddTrail("SCAN EKTP", "CANCELED", "02");
            trans.status = "02";
            trans.errorCode = "EKTP";
            await OurUtility.AuditTrailPSB(trans, menu, cst);
            NavigateTo("/main");
        }
    }
    private async Task Back()
    {
        if (translog)
        {
            isLoading = false;
            translog = false;
            IsVisible = false;
            isLoading2 = true;
            await ReleaseNumber();
            trans.AddTrail("SCAN EKTP", "CANCELED", "02");
            trans.status = "02";
            trans.errorCode = "EKTP";
            NavigateTo("/PSB/3b");
        }
    }

    private async Task FPConfirm()
    {
        if (isFPNoDataPush)
        {
            isFPNoDataPush = false;
            isFPNoData = false;
            isFPNoDataConfirm = true;
            isFPNoDataUnComfirmPush = true;
        }
    }
    private async Task FPUnConfirm()
    {
        if (isFPNoDataUnComfirmPush)
        {
            isFPNoDataPush = true;
            isFPNoData = true;
            isFPNoDataConfirm = false;
            isFPNoDataUnComfirmPush = false;
        }
    }
    private async Task FP2()
    {
        if (isFPNoDataConfirmPush)
        {
            isFPNoDataConfirmPush = false;
            isFPNoData = false;
            isFPNoDataConfirm = false;
            int ret = -1;
            int leftLen = 2048, rightLen = 2048;//max size is photo size(about 1700 bytes)
            byte[] leftData = new byte[leftLen];
            byte[] rightData = new byte[rightLen];

            OurUtility.Write_Log("===== Ektp_Sdk.ReadFingerPrints New Card", "step-action");
            ret = await Task.Run(() => Ektp_Sdk.ReadFingerPrints(hContext, ref leftLen, leftData, ref rightLen, rightData)).ConfigureAwait(true);
            if (ret != 0 || leftLen == 0 || rightLen == 0)
            {
                OurUtility.Write_Log("===== Ektp_Sdk.ReadFingerPrints Failed", "step-action");
                trans.AddTrail("SCAN EKTP", "FINGERPIRNT NO DATA", "01");
                isLoading = false;
                if (intTryCount <= intTryLimit)
                {
                    IsVisible = true;
                    intTryCount += 1;
                }
                else
                {
                    isFail = true;
                }
                return;
            }
            else if (ret == 0)
            {
                ktp.minutiae1 = leftData;
                ktp.minutiae2 = rightData;
                ktp.minu1len = leftLen;
                ktp.minu2len = rightLen;

                OurUtility.Write_Log("===== Ektp_Sdk.ReadFingerPrints Old Card Success", "step-action");

                trans.AddTrail("SCAN EKTP", ktp.Id, "00");
                isLoading = false;
                isSuccess = true;
                await Task.Delay(1000);
                NavigateTo("/PSB/5");
                return;
            }
        }
    }
    private void NavigateTo(string strURL)
    {
        isNotIdle = false;
        NavMan.NavigateTo(strURL);
    }

    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            #region AfterRenderTimeOut
            await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
            #endregion
        }
    }

    protected override async Task OnInitializedAsync()
    {
        counterTime = counterTreshold;
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        PCID = config.Read("EKTP", Config.PARAM_EKTP_PCID);
        CONF = config.Read("EKTP", Config.PARAM_EKTP_CONF);
        pbPcid = OurUtility.StringToByteArray(OurUtility.strIns(PCID, ","));
        pbConf = OurUtility.StringToByteArray(OurUtility.strIns(CONF, ","));
        config.usbEKTP = config.Read("EKTP", Config.PARAM_EKTP_USB).Substring(0, 1);
        config.ektpType = config.Read("EKTP", Config.PARAM_EKTP_USB).Substring(1);
        OurUtility.Write_Log("=== Step 2. Scan e-KTP Page", "step-action");
    }

    private async Task CheckEKTP()
    {
        InvokeAsync(ResetTimer);
        if (!isLoading && !isSuccess && !isFail && !IsVisible)
        {
            isLoading = true;
            if (config.ektpType == "a")
            {
                await ScanKTP();
            }
            else if (config.ektpType == "c")
            {
                await ScanEKTPC();
                //await Task.Delay(5000);
                //isLoading = false;
                //isSuccess = true;
                //isFail = false;
                //await Task.Delay(2000);
                //NavigateTo("/PSB/5");
            }
            else
            {
                trans.AddTrail("READ EKTP", "EK - 001", "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "EK - 001";
                OurUtility.Write_Log("== Error : EK - 001", "step-action");
                NavigateTo("/error");
            }

            if (isSuccess)
            {
                NavigateTo("/PSB/5");
            }
            else if (isFail)
            {
                //await ReleaseNumber();
                await MenuUtama();
            }
        }
        else if (IsVisible)
        {
            IsVisible = false;
        }
    }
    private async Task ScanEKTPC()
    {
        int r = -999;
        string errMsg = string.Empty;
        Switcher.DOWN("500", config.usbEKTP);
        await Task.Delay(500);
        Switcher.DOWN("500", "2");
        await Task.Delay(500);
        Switcher.UP("3000", config.usbEKTP);
        await Task.Delay(3000);
        UInt16 rf = 0;
        UInt16 sam = 1;
        if (intTryCount <= intTryLimit)
        {
            r = ektpC.StartEKTP(PCID, CONF, rf, sam);
            if (r != 0)
            {
                if (r > 0 && r < 10)
                    errMsg = "EK - 10" + r.ToString();
                else
                    errMsg = "EK - 1" + r.ToString();

                trans.AddTrail("SCAN EKTP", errMsg, "01");
                OurUtility.Write_Log("===== EKTP ERROR - " + errMsg, "step-action");
                isLoading = false;
                if (intTryCount <= intTryLimit)
                {
                    IsVisible = true;
                    intTryCount += 1;
                }
                else
                {
                    isFail = true;
                }
                return;
            }
            else
            {
                byte[] demoGraphic = new byte[ektpC.ektpData.biolen];
                for (int i = 0; i < ektpC.ektpData.biolen; i++)
                {
                    demoGraphic[i] = ektpC.ektpData.byteBio[i];
                }
                OurUtility.Write_Log("===== Ektp_Sdk.ReadDemographic Success", "step-action");

                ktp.demographic = demoGraphic;

                ktp.minutiae1 = ektpC.ektpData.byteMinu1;
                ktp.minutiae2 = ektpC.ektpData.byteMinu2;
                ktp.minu1len = ektpC.ektpData.minu1len;
                ktp.minu2len = ektpC.ektpData.minu2len;

                trans.AddTrail("SCAN EKTP", ktp.Id, "00");
                isLoading = false;
                isSuccess = true;
                await Task.Delay(1000);
                NavigateTo("/PSB/5");
                return;

            }
        }

    }
    //FIXME: Create as Service
    private async Task ScanKTP()
    {
        Switcher.DOWN("500", config.usbEKTP);
        await Task.Delay(500);
        Switcher.UP("3000", config.usbEKTP);
        await Task.Delay(3000);
        isFPNoDataPush = true;
        if (intTryCount <= intTryLimit)
        {
            OurUtility.Write_Log("==== Scan e-KTP", "step-action");
            OurUtility.Write_Log("===== Ektp_Sdk.EktpCstablishContext eKTP", "step-action");
            if (Ektp_Sdk.EktpEstablishContext(ref hContext) == 0)
            {
                OurUtility.Write_Log("===== Ektp_Sdk.EktpSetAttrib PCID eKTP", "step-action");
                Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_PCID, pbPcid, pbPcid.Length);
                OurUtility.Write_Log("===== Ektp_Sdk.EktpSetAttrib CONF eKTP", "step-action");
                Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_CONFIG, pbConf, pbConf.Length);
            }
            OurUtility.Write_Log("===== Ektp_Sdk.EktpConnect", "step-action");
            await Task.Run(() => Ektp_Sdk.EktpConnect(ref hContext, pbPcid, 16, pbConf, 32));

            int length = 2048;
            byte[] tempBuffer = new byte[length];
            int ret = -1;
            OurUtility.Write_Log("===== Ektp_Sdk.ReadDemographic From eKTP", "step-action");
            ret = await Task.Run(() => Ektp_Sdk.ReadDemographic(hContext, ref length, tempBuffer)).ConfigureAwait(false);
            if (length == 0 || ret != 0)
            {
                trans.AddTrail("SCAN EKTP", "NOT EKTP", "01");
                OurUtility.Write_Log("===== Ektp_Sdk.ReadDemographic Failed", "step-action");
                isLoading = false;
                if (intTryCount <= intTryLimit)
                {
                    IsVisible = true;
                    intTryCount += 1;
                }
                else
                {
                    isFail = true;
                }
                return;
            }
            byte[] demoGraphic = new byte[length];
            for (int i = 0; i < length; i++)
            {
                demoGraphic[i] = tempBuffer[i];
            }
            OurUtility.Write_Log("===== Ektp_Sdk.ReadDemographic Success", "step-action");
            ktp.demographic = demoGraphic;
            //CID = OurUtility.ByteArrayToString(System.Text.Encoding.UTF8.GetBytes(cst.EKTPNumber), System.Text.Encoding.UTF8.GetBytes(cst.EKTPNumber).Length);
            KID = OurUtility.ByteArrayToString(System.Text.Encoding.UTF8.GetBytes(ktp.Id), System.Text.Encoding.UTF8.GetBytes(ktp.Id).Length);
            //OurUtility.Write_Log("CID : " + CID, "step-action");
            OurUtility.Write_Log("KID : " + KID, "step-action");
            IsVisible = false;
            IsNext = true;

            if (IsNext)
            {
                int leftLen = 2048, rightLen = 2048;//max size is photo size(about 1700 bytes)
                byte[] leftData = new byte[leftLen];
                byte[] rightData = new byte[rightLen];

                OurUtility.Write_Log("===== Ektp_Sdk.ReadFingerPrints Old Card", "step-action");
                ret = await Task.Run(() => Ektp_Sdk.ReadFingerPrints(hContext, ref leftLen, leftData, ref rightLen, rightData)).ConfigureAwait(true);
                if (ret != 0 || leftLen == 0 || rightLen == 0)
                {
                    isFPNoData = true;
                    return;
                }
                else if (ret == 0)
                {
                    ktp.minutiae1 = leftData;
                    ktp.minutiae2 = rightData;
                    ktp.minu1len = leftLen;
                    ktp.minu2len = rightLen;

                    OurUtility.Write_Log("===== Ektp_Sdk.ReadFingerPrints Old Card Success", "step-action");

                    trans.AddTrail("SCAN EKTP", KID, "00");
                    isLoading = false;
                    isSuccess = true;
                    await Task.Delay(1000);
                    NavigateTo("/PSB/5");
                    return;
                }
            }
        }
    }
    private async Task ReleaseNumber()
    {
        isLoading = true;
        await Task.Delay(5000);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"poolName\": \"" + trans.psbDetail.PaketPSB._poolName + "\"," +
            "\"noHp\": \"" + trans.psbDetail.selectedNumber + "\"" +
               "}";
        string myURL = _myURL + releaseNumberService;
        OurUtility.Write_Log("Release Number", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" &&
        strResult != "BadRequest" && strResult != "InternalServerError")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "00");
                    NavigateTo("/PSB/4");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "01");
                    trans.status = "01";
                    trans.errorCode = "EKTP";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.patternNumber + ", Pool : " + trans.psbDetail.selectedPaket, "02");

                    isPopUp = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                isLoading = false;
                trans.AddTrail("Release Number", "Exception Error ", "01");
                trans.status = "01";
                trans.errorCode = "EKTP";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavigateTo("/error");
            }
        }
        else
        {
            isLoading = false;
            trans.AddTrail("Release Number", "Hit Webservice Error {" + strResult + "}", "01");
            trans.status = "01";
            trans.errorCode = "EKTP";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Hit Webservice Error {" + strResult + "}";
            OurUtility.Write_Log("== Hit Webservice Error {" + strResult + "}", "step-action");
            //isNotIdle = false;
            NavigateTo("/error");
        }
    }

    #region TimeOut
    private int counterTime;
    private int counterTreshold = 60;
    private bool isIdle = false;
    private bool isNotIdle = true;
    private async Task IdleTime()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 4 Time Left : " + counterTime.ToString());
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                isIdle = true;
                isNotIdle = false;
                secondCTime = counterTreshold;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdle);
    }
    #endregion

    #region SecondTimeOut
    private int secondCTime;
    private bool isTimeOut = false;

    private async Task TimeOut()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 4 Out Left : " + secondCTime.ToString());
            secondCTime = secondCTime - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTime < 0)
            {
                isIdle = false;
                isTimeOut = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdle);
    }

    private async Task TambahWaktu()
    {
        //Console.WriteLine("Tambah Waktu");
        counterTime = counterTreshold;
        //secondCTime = 0;
        isIdle = false;
        isTimeOut = false;
        isNotIdle = true;
        await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOut()
    {
        await Task.Run(() => IdleTime()).ConfigureAwait(false);
        if (isIdle)
            await Task.Run(() => TimeOut()).ConfigureAwait(false);

        if (isTimeOut)
        {
            //Console.WriteLine("Time Out 2");
            //NavigateTo("/main");
            await MenuUtamaCanceled();
        }
    }

    private async Task ResetTimer()
    {
        if (!isIdle)
        {
            //Console.WriteLine("Timer Reset");
            counterTime = counterTreshold;
        }
    }
    #endregion

}