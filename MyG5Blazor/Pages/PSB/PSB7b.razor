@page "/PSB/7b"

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data
@using System.Drawing.Printing
@using System.Drawing
@using System.IO

@inject IJSRuntime JSRuntime
@inject Costumer cst
@inject NavigationManager NavMan
@inject Transaction trans
@inject Config config
@inject Menu menu

<div class="bg-edc-process" style="z-index:1;" @onclick="@(()=>InvokeAsync(ResetTimer))">
    <div class="main-panel bg-edc-process">
        <!-- Navbar -->
        <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
            <div class="container-fluid">
                <div class="navbar-wrapper">
                    <div class="logo">
                        <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                    </div>
                    <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
                </div>


                <form class="navbar-form">
                </form>
            </div>
        </nav>
        <!-- End Navbar -->

        <div class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        <div class="teks-title">Berlangganan KartuHalo</div>
                        <div class="teks-title4 text-center">Syarat dan Ketentuan</div>
                        <div class="col-md-12 mb-4" style="padding-right: 65px; padding-left: 65px;margin-bottom:5px;">

                            <div class="card example-1 scrollbar-ripe-malinka" style="text-align: center; margin-bottom:10px; height:300px;">
                                <object data="../../assets/[FINAL] Perubahan SnK kartuhalo_v4.pdf#toolbar=0&navpanes=0&scrollbar=0" width="100%" height="350">
                                </object>
                            </div>
                        </div>
                        <div style="margin-left: 6.5%;">
                            <input type="checkbox" class="form-check-input" id="terms_and_conditions" value="1" onclick="terms_changed(this)" style="width: 20px; height: 20px;" @bind="trans.psbDetail.isTC">
                            <label class="form-check-label" for="exampleCheck1" style="margin-left: 2%; color: black; font-size: 12pt;">
                                Dengan ini saya telah membaca, memahami, dan menyetujui hal-hal yang tercantum pada syarat dan ketentuan yang berlaku terkait<br>
                                proses berlanggan kartuHalo melalui mesin MyGraPARI
                            </label>
                            <br /><input type="checkbox" class="form-check-input" id="terms_and_conditions" value="1" onclick="terms_changed(this)" style="width: 20px; height: 20px;" @bind="trans.psbDetail.isEbill">
                            <label class="form-check-label" for="exampleCheck1" style="margin-left: 2%; color: black; font-size: 12pt;">
                                Dengan ini saya bersedia menerima asi SMS broadcast, e-mail, atau sejenisnya dari Telkomsel yang berisi<br /> informasi layanan dan/atau produk Telkomsel dan mitranya
                            </label>


                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
    </div>
</div>
<footer style="display: flex; z-index:2;">
    <div id="footer-side1" class="col-md-4" style="background-color:transparent;">
        <div style="margin-left: -1rem; margin-right: -2rem;">
            <span style="margin:5px;" class="dot2">1</span>
            <span style="margin:5px;" class="dot2">2</span>
            <span style="margin:5px;" class="dot2">3</span>
            <span style="margin:5px;" class="dot2">4</span>
            <span style="margin:5px;" class="dot2">5</span>
            <span style="margin:5px;" class="dot2">6</span>
            <span style="margin:5px;" class="dot2" id="dot-active">7</span>
            <span style="margin:5px;" class="dot2">8</span>
            <span style="margin:5px;" class="dot2">9</span>
        </div>
    </div>
    <div class="col-md-4">
        <button @onclick="Lanjut" class="btn btn-danger button-nps" style="bottom: 10%;" id="myBtn1" disabled="@(!trans.psbDetail.isTC)">Lanjut</button>
    </div>
    <div id="footer-side2" class="col-md-4">
        <div style="margin-left: -8rem; margin-right: -8rem;">
            <button @onclick="@(()=>Back())" class="btn-arrow btn" value="">Kembali</button>
            <button @onclick="@(()=>MainMenu())" class="btn-arrow btn" value="">Menu Utama</button>
            <!-- <sup>Powered By </sup>Trilogi Persada -->
        </div>
    </div>
</footer>
@if (isLoading)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-blank">
            <img class="lds-spinner" src="../../assets/image/loader.gif">
            <p><br>Mohon tunggu</p>
            <p>proses sedang berlangsung...</p>
        </div>
    </div>
}
@if (isIdle)
{
    <div id="myModal" class="modal"style="z-index:999;">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">
                        Apakah Anda ingin menambah waktu lagi? <br />
                        Anda akan keluar secara otomatis dalam waktu<span style="font-weight:bold;"> @secondCTime</span> detik.
                    </p>
                    <button class="btn btn-danger modal-button" @onclick="@(() => InvokeAsync(TambahWaktu))">Ya</button>
                    <button class="btn btn-light modal-button" @onclick="@(()=>secondCTime=0)">Tidak</button>
                </div>
            </div>
        </div>
    </div>
}
@code{
    private bool isLoading = false;
    private bool isTC = false;
    private bool isEbill = false;
    private bool isPopUp = false;

    private string releaseNumberService = "psb-halo/v1/release-number";
    private string _myURL = string.Empty;
    private string strMsgError = string.Empty;

    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender)
        {
            #region AfterRenderTimeOut
            await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
            #endregion
        }
    }
    protected override async Task OnInitializedAsync()
    {
        counterTime = counterTreshold;
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
    }

    private async Task Back()
    {
        NavigateTo("/psb/7a");
    }

    private void Lanjut()
    {
        //trans.psbDetail.PaketPSB._hargaAwal = "100000";
        //trans.psbDetail.selectedNumber = "628116856722";
        //trans.psbDetail.PaketPSB._varianName = "Halo Unlimited 100rb";
        if (trans.psbDetail.isTC)
        {
            trans.psbDetail.strTC = "1";
        }
        else
        {
            trans.psbDetail.strTC = "0";
        }

        if (trans.psbDetail.isEbill)
        {
            trans.psbDetail.strEbill = "1";
        }
        else
        {
            trans.psbDetail.strEbill = "0";
        }

        NavigateTo("/PSB/8a");
    }
    private async Task MainMenu()
    {
        isLoading = true;
        trans.AddTrail("KONFIRMASI DATA", "BACK TO MAIN MENU", "02");
        trans.status = "02";
        await ReleaseNumber();
        await OurUtility.AuditTrailPSB(trans, menu, cst);
        NavigateTo("/main");
    }

    private async Task ReleaseNumber()
    {
        isLoading = true;
        await Task.Delay(500);
        string myJson = "{ \"terminalId\": \"" + menu.terminalId + "\"," +
            "\"transactionId\": \"" + trans.transID + "\"," +
            "\"poolName\": \"" + trans.psbDetail.PaketPSB._poolName + "\"," +
            "\"noHp\": \"" + trans.psbDetail.selectedNumber + "\"" +
               "}";
        string myURL = _myURL + releaseNumberService;
        OurUtility.Write_Log("Release Number", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");

        if (strResult != "" && strResult != "Forbidden" && strResult != "NotFound" &&
            strResult != "BadRequest" && strResult != "InternalServerError" && strResult != "GatewayTimeout")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "00");
                    //NavigateTo("/PSB/4");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.selectedNumber + ", Pool : " + trans.psbDetail.PaketPSB._poolName, "01");
                    trans.status = "01";
                    await OurUtility.AuditTrailPSB(trans, menu, cst);
                    //isNotIdle = false;
                    isLoading = false;
                    NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    isLoading = false;
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("Release Number", "Number : " + trans.psbDetail.patternNumber + ", Pool : " + trans.psbDetail.selectedPaket, "02");

                    isPopUp = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                trans.AddTrail("Release Number", "Exception Error ", "01");
                trans.status = "01";
                await OurUtility.AuditTrailPSB(trans, menu, cst);

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error : " + ex.Message, "step-action");
                //isNotIdle = false;
                NavigateTo("/error");
            }
        }
        else
        {
            trans.AddTrail("Release Number", "Hit Webservice Error {" + strResult + "}", "01");
            trans.status = "01";
            await OurUtility.AuditTrailPSB(trans, menu, cst);

            trans.errorCode = "Hit Webservice Error {" + strResult + "}";
            OurUtility.Write_Log("== Error : Hit Webservice Error {" + strResult + "}", "step-action");
            //isNotIdle = false;
            NavigateTo("/error");
        }
    }
    private void NavigateTo(string strURL)
    {
        isNotIdle = false;
        NavMan.NavigateTo(strURL);
    }

    #region TimeOut
    private int counterTime;
    private int counterTreshold = 60;
    private bool isIdle = false;
    private bool isNotIdle = true;
    private async Task IdleTime()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Idle 7b Time Left : " + counterTime.ToString());
            counterTime = counterTime - 1;
            InvokeAsync(StateHasChanged);
            if (counterTime < 1)
            {
                isIdle = true;
                isNotIdle = false;
                secondCTime = counterTreshold;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isNotIdle);
    }
    #endregion

    #region SecondTimeOut
    private int secondCTime;
    private bool isTimeOut = false;

    private async Task TimeOut()
    {
        do
        {
            await Task.Delay(1000);
            Console.WriteLine("Time 7b Out Left : " + secondCTime.ToString());
            secondCTime = secondCTime - 1;
            InvokeAsync(StateHasChanged);
            if (secondCTime < 0)
            {
                isIdle = false;
                isTimeOut = true;
                InvokeAsync(StateHasChanged);
                return;
            }
        } while (isIdle);
    }

    private async Task TambahWaktu()
    {
        //Console.WriteLine("Tambah Waktu");
        counterTime = counterTreshold;
        //secondCTime = 0;
        isIdle = false;
        isTimeOut = false;
        isNotIdle = true;
        await Task.Run(() => DoubleTimeOut()).ConfigureAwait(false);
    }

    private async Task DoubleTimeOut()
    {
        await Task.Run(() => IdleTime()).ConfigureAwait(false);
        if (isIdle)
            await Task.Run(() => TimeOut()).ConfigureAwait(false);

        if (isTimeOut)
        {
            //Console.WriteLine("Time Out 2");
            //NavigateTo("/main");
            await MenuUtamaCanceled();
        }
    }

    private async Task ResetTimer()
    {
        if (!isIdle)
        {
            //Console.WriteLine("Timer Reset");
            counterTime = counterTreshold;
        }
    }
    #endregion
    private bool translog = true;
    private async Task MenuUtamaCanceled()
    {
        if (translog)
        {
            isLoading = false;
            isLoading = true;
            await ReleaseNumber();
            trans.AddTrail("SYARAT DAN KETENTUAN", "CANCELED", "02");
            trans.status = "02";
            trans.errorCode = "SnK";
            await OurUtility.AuditTrailPSB(trans, menu, cst);
            NavigateTo("/main");
        }
    }
}
