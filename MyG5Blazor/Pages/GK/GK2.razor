@page "/gk/2"
@using System.Net.Http;
@using System.Text;
@inject IJSRuntime JSRuntime;
@inject BlazorTimer Timer
@inject NavigationManager NavMan
@inject Ektp_Data ktp
@inject Costumer cst
@inject Config config
@inject Transaction trans
@inject Menu menu 
@using MyG5Blazor.Data

<div class="main-panel bg-home">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="col-md-6">
                <div class="input-group no-border">
                    <div class="checklist">
                        @if (IsLoading)
                        {
                            <img src="../../assets/image/loader.gif" />
                        }
                        else if (IsSuccess)
                        {
                            <img src="../../assets/image/tanda_checklist.png" />
                        }
                    </div>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="teks-title">Ganti Kartu Hilang/Rusak</div>

                    @if (!IsSuccess)
                    {
                        <div id="proses-pindai">
                            <div class="teks-center"> Letakkan <span style="font-weight: bold;">e-KTP</span> Anda pada Alat Pemindai</div>
                            <div class="teks-footer"> Lalu tekan <span style="font-weight: bold;">"Pindai"</span></div>
                        </div>
                    }
                    else
                    {
                        <div id="proses-berhasil">
                            <div class="teks-center"> Proses Pindai e-Ktp Berhasil</div>
                        </div>
                    }
                </div>

                <div class="col-md-6">
                    <img class="ktp" src="../../assets/image/Scan_KTP-01.png">
                    @if (!IsSuccess)
                    {
                        <a id="myBtn" href="" @onclick="CheckEKTP" @onclick:preventDefault>
                            <img class="pindai" src="../../assets/image/Pindai.png">
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
    <footer>
        <div class="footer-side1">
            <span class="dot">1</span>
            <span class="dot" id="dot-active">2</span>
            <span class="dot">3</span>
            <span class="dot">4</span>
        </div>
        <div class="footer-side2">
            <button @onclick="@Back" class="btn-arrow btn" value="">Kembali</button>
            <button @onclick="@MenuUtama" class="btn-arrow btn" value="">Menu Utama</button>
            <!-- <sup>Powered By </sup>Trilogi Persada -->
        </div>
    </footer>
    @if (IsVisible)
    {
        <div id="myModal" class="modal">

            <!-- Modal content -->
            <div class="modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        @if (intTryCount <= intTryLimit)
                        {
                            <p class="text-body">Maaf, <span style="font-weight: bold;">e-KTP</span> yang digunakan tidak sesuai dengan nomor yang terdaftar pada sistem MyGraPARI. Silahkan gunakan<span style="font-weight: bold;"> e-KTP </span>yang sesuai.</p>
                            <button class="btn btn-danger modal-button" @onclick="CheckEKTP">OK</button>
                        }
                        else
                        {
                            <p class="text-body">Maaf, <span style="font-weight: bold;">e-KTP</span> Anda tidak terbaca pada sistem MyGraPARI. Silahkan hubungi<span style="font-weight: bold;"> Customer Service </span>GraPARI untuk bantuan.</p>
                            <button @onclick="MenuUtama" class="btn btn-danger modal-button" id="span1">OK</button>
                        }
                        <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                    </div>
                </div>
            </div>

        </div>
    }
</div>

@code{
    private bool IsVisible = false;
    private bool IsLoading = false;
    private bool IsSuccess = false;
    private bool IsFail = false;
    private bool IsNext = false;

    public string _myURL = "";
    public string saveURL = "mygrapari/log/v1/save";

    private int intTryCount = 1;
    private int intTryLimit = 3;

    private IntPtr hContext = IntPtr.Zero;

    byte[] pbPcid;

    byte[] pbConf;
    
    private async Task MenuUtama()
    {
        trans.status = "GAGAL";
        trans.errorCode = "EKTP";
        await OurUtility.AuditTrail(trans,menu,cst);
        NavigateTo("");
    }
    private async Task Back()
    {
        trans.status = "GAGAL";
        trans.errorCode = "EKTP";
        await OurUtility.AuditTrail(trans,menu,cst);
        NavigateTo("/gk/1");
    }
    private void NavigateTo(string strURL)
    {
        NavMan.NavigateTo(strURL);
    }

    protected override async Task OnInitializedAsync()
    {
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        pbPcid = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_PCID), ","));
        pbConf = OurUtility.StringToByteArray(OurUtility.strIns(config.Read("EKTP", Config.PARAM_EKTP_CONF), ","));
        OurUtility.Write_Log("=== Step 2. Scan e-KTP Page", "step-action");
        Switcher.UP_eKTP("3000");
    }

    private async Task CheckEKTP()
    {
        if (!IsLoading && !IsSuccess && !IsFail && !IsVisible)
        {
            IsLoading = true;
            await ScanKTP();
        }
        else if (IsVisible)
        {
            IsVisible = false;
        }
    }

    //FIXME: Create as Service
    private async Task ScanKTP()
    {
        OurUtility.Write_Log("==== Switcher.UP_eKTP", "step-action");

        if (intTryCount <= intTryLimit)
        {
            OurUtility.Write_Log("==== Scan e-KTP", "step-action");
            OurUtility.Write_Log("===== 1. Ektp_Sdk.EktpCstablishContext eKTP", "step-action");
            if (Ektp_Sdk.EktpEstablishContext(ref hContext) == 0)
            {
                OurUtility.Write_Log("===== 2. Ektp_Sdk.EktpSetAttrib PCID eKTP", "step-action");
                Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_PCID, pbPcid, pbPcid.Length);
                OurUtility.Write_Log("===== 3. Ektp_Sdk.EktpSetAttrib CONF eKTP", "step-action");
                Ektp_Sdk.EktpSetAttrib(hContext, Ektp_Sdk.EKTP_ATTR_CONFIG, pbConf, pbConf.Length);
            }
            OurUtility.Write_Log("===== 4. Ektp_Sdk.EktpConnect", "step-action");
            await Task.Run(() => Ektp_Sdk.EktpConnect(ref hContext, pbPcid, 16, pbConf, 32));

            int length = 2048;
            byte[] tempBuffer = new byte[length];
            int ret = -1;
            OurUtility.Write_Log("===== 5. Ektp_Sdk.ReadDemographic From eKTP", "step-action");
            ret = await Task.Run(() => Ektp_Sdk.ReadDemographic(hContext, ref length, tempBuffer)).ConfigureAwait(false);
            if (length == 0 || ret != 0)
            {
                trans.AddTrail("SCAN EKTP", "NOT EKTP", "FAILED");
                OurUtility.Write_Log("===== 6. Ektp_Sdk.ReadDemographic Failed", "step-action");
                IsLoading = false;
                if (intTryCount <= intTryLimit)
                {
                    IsVisible = true;
                    intTryCount += 1;
                }
                else
                {
                    IsFail = true;
                }
                return;
            }
            byte[] demoGraphic = new byte[length];
            for (int i = 0; i < length; i++)
            {
                demoGraphic[i] = tempBuffer[i];
            }
            OurUtility.Write_Log("===== 6. Ektp_Sdk.ReadDemographic Success", "step-action");
            ktp.demographic = demoGraphic;
            IsVisible = false;
            IsNext = true;

            if (IsNext)
            {
                int leftLen = 2048, rightLen = 2048;//max size is photo size(about 1700 bytes)
                byte[] leftData = new byte[leftLen];
                byte[] rightData = new byte[rightLen];

                OurUtility.Write_Log("===== 7. Ektp_Sdk.ReadFingerPrints", "step-action");
                ret = await Task.Run(() => Ektp_Sdk.ReadFingerPrints(hContext, ref leftLen, leftData, ref rightLen, rightData)).ConfigureAwait(false);
                if (ret != 0 || leftLen == 0 || rightLen == 0)
                {
                    OurUtility.Write_Log("===== 8. Ektp_Sdk.ReadFingerPrints Failed", "step-action");

                    //Switcher.DOWN_eKTP(config_MyGraPARI.Read("MyGraPARI", Config.PARAM_DELAY_USB_DOWN));
                    return;
                }
                ktp.minutiae1 = leftData;
                ktp.minutiae2 = rightData;
                ktp.minu1len = leftLen;
                ktp.minu2len = rightLen;

                OurUtility.Write_Log("===== 8. Ektp_Sdk.ReadFingerPrints Success", "step-action");

                if (cst.EKTPNumber == ktp.Id)
                {
                    trans.AddTrail("SCAN EKTP", ktp.Id, "SUCCESS");
                    IsLoading = false;
                    IsSuccess = true;
                    Timer.SetTimer(1000);
                    Timer.OnElapsed += TimerElapsedHandler;
                }
                else
                {
                    trans.AddTrail("SCAN EKTP", "NIK SALAH", "FAILED");
                    IsLoading = false;
                    IsSuccess = false;
                    if (intTryCount <= intTryLimit)
                    {
                        IsVisible = true;
                        intTryCount += 1;
                    }
                    else
                    {
                        IsFail = true;
                    }
                    return;
                }
            }
        }
    }

    private void TimerElapsedHandler()
    {
        NavMan.NavigateTo("/gk/3");
    }

    [Microsoft.AspNetCore.Components.Inject]

    protected Microsoft.JSInterop.IJSRuntime theJavaScriptEngine { get; set; }

    [Microsoft.AspNetCore.Components.Inject]

    protected Microsoft.AspNetCore.Components.NavigationManager theNavigationManager { get; set; }

    private bool timer = false;
    protected override void OnAfterRender(bool bFirstRender)
    {
        if (bFirstRender)
        {
            timer = true;
            theJavaScriptEngine.InvokeAsync<System.Object>("setupUserIdleTimer", new object[] { Microsoft.JSInterop.DotNetObjectReference.Create(this), 60000, true });

            this.StateHasChanged();
        }
    }

    [Microsoft.JSInterop.JSInvokable]

    public void theIdleTimeoutFired()
    {
        if (timer)
        {
            timer = false;
            //NavMan.NavigateTo(" ");
        }
    }
}