@page "/gk/4"
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data
@using System.Timers;

@inject Menu menu  
@inject Card_Dispenser cds
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan
@inject Costumer cst
@inject BlazorTimer Timer
@inject Transaction trans
@inject Config config 
<div class="main-panel bg-home">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="col-md-6">
                <div class="input-group no-border">
                    <div class="checklist">
                        @if (isLoading)
                        {
                            <img src="../../assets/image/loader.gif" />
                        }
                        else if (isSuccess)
                        {
                            <img src="../../assets/image/tanda_checklist.png" />
                        }
                        else if (isFail)
                        {
                            <img src="../../assets/image/tanda_x.png" />
                        }
                    </div>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="teks-title">Ganti Kartu Hilang/Rusak</div>
                    @if (isFail)
                    {
                        <p class="teks-center" style="font-weight: bold;">
                            Proses Ganti Kartu Hilang/Rusak <br>
                            Tidak Berhasil
                        </p><br>

                        <p class="teks-footer">
                            Silakan Hubungi Customer Service
                            GraPARI untuk Bantuan
                        </p>
                    }
                    else if (isSuccess)
                    {
                        <p class="teks-status"><span style="font-weight: bold;">Proses Ganti Kartu Hilang/Rusak <span style="color: green;"> Berhasil</span></span></p>
                        <p class="teks-footer">Silakan Ambil Kartu SIM Anda dan Pastikan Melakukan Pengaturan Jaringan 4G pada Perangkat</p>
                    }
                    else
                    {
                        <p class="teks-center">
                            Prose Ganti Kartu Hilang/Rusak <br>
                            sedang berjalan, mohon tunggu <br>
                            beberapa saat
                        </p>
                    }
                </div>

                <div class="col-md-6">
                    <div class="image-center">
                        <img src="../../assets/image/card-01.png" alt="" width="350px" height="200px">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<footer>
    <div class="footer-side1">
        <span class="dot">1</span>
        <span class="dot">2</span>
        <span class="dot">3</span>
        <span class="dot" id="dot-active">4</span>
    </div>
    <div class="footer-side2">
        <!-- <button class="btn-arrow btn" value="">Kembali</button>
        <button class="btn-arrow btn" value="">Menu Utama</button>
        <sup>Powered By </sup>Trilogi Persada -->
    </div>
</footer>

@if (IsInvalid)
{
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">@((MarkupString)strMsgError)</p>
                    <button class="btn btn-danger modal-button" @onclick="MenuUtama">OK</button>
                </div>
            </div>
        </div>
    </div>
}
@if (isVisible)
{
    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">@surveys[CESno].quIndText</p>
                    <button class="btn nps-button" value="1" @onclick="@(() => InputNPS1("1"))">1</button>
                    <button class="btn nps-button" value="2" @onclick="@(() => InputNPS1("2"))">2</button>
                    <button class="btn nps-button" value="3" @onclick="@(() => InputNPS1("3"))">3</button>
                    <button class="btn nps-button" value="4" @onclick="@(() => InputNPS1("4"))">4</button>
                    <button class="btn nps-button" value="5" @onclick="@(() => InputNPS1("5"))">5</button>
                    <button class="btn nps-button" value="6" @onclick="@(() => InputNPS1("6"))">6</button>
                    <button class="btn nps-button" value="7" @onclick="@(() => InputNPS1("7"))">7</button>
                    <button class="btn nps-button" value="8" @onclick="@(() => InputNPS1("8"))">8</button>
                    <button class="btn nps-button" value="9" @onclick="@(() => InputNPS1("9"))">9</button>
                    <button class="btn nps-button" value="10" @onclick="@(() => InputNPS1("10"))">10</button>
                    <button @onclick="NPS" class="btn btn-danger button-nps">OK</button>
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>
    </div>
}

@if (isVisible2)
{
    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">Hal apa yang Anda rasa perlu ditingkatkan pada mesin layanan MyGraPARI? </p>
                    <button class="btn nps-button2">Tampilan/Estetika</button>
                    <button class="btn nps-button2">Kecepatan Proses</button>
                    <button class="btn nps-button2">Kemudahan Penggunaan</button>
                    <button class="btn nps-button2">Kejelasan Bahasa</button>
                    <button @onclick="@(()=>NavigateTo("/main"))" class="btn btn-danger button-nps" value="">OK</button>
                </div>
            </div>
        </div>
    </div>
}

@code{
    public List<CES> surveys = new List<CES>();

    private bool isError = false;
    private bool isVisible = false;
    private bool isVisible2 = false;
    private bool isLoading = false;
    private bool isSuccess = false;
    private bool isFail = false;
    private bool IsInvalid = false;

    private int intTryCount = 1;
    private int intTryLimit = 3;
    private int CESno = 0;

    private string strNPS1Value = string.Empty;
    private string[] strNPS2Value = { "", "", "", "" };

    private string strMsgError = string.Empty;
    private string msg = string.Empty;
    private string errorcode = string.Empty;
    private string strCOM = "COM";
    private string readerName = string.Empty;
    private string strPanjang = string.Empty;
    private string p_icc_id = string.Empty;
    private string mypersoexe = string.Empty;

    private string qu1IndText = string.Empty;
    private string qu1ID = string.Empty;
    private string qu2IndText = string.Empty;
    private string qu2ID = string.Empty;

    private string qu1EngText = string.Empty;
    private string qu2EngText = string.Empty;

    private string quIndText = string.Empty;
    private string quID = string.Empty;
    private string quEngText = string.Empty;
    /*JSON POST
            "transactionId" : "didapat dari init awal",
            "terminalId" : "T0999",
            "noHp" : "no hp yang diinput, depanya ganti 62",
            "nik" : "nik yang didapat dari ektp reader",
            "buid" : "buid yang didapat pas init",
            "serialNumber" : "serial number kartu"
            {\"terminalId\": \"T0999\"}*/
    //private static string _myURL = "https://mygrapari.telkomsel.co.id/trilogi/";
    public string _myURL = string.Empty;
    private static string persoURL = "mygrapari/ganti-kartu/v1/perso";
    private static string updateURL = "mygrapari/perso/v1/update";
    private static string cesURL = "mygrapari/ces/v1/eligibility-check";
    public string saveURL = "mygrapari/log/v1/save";

    private static string myJson = string.Empty;

    private async Task MenuUtama()
    {
        trans.status = "GAGAL";
        await OurUtility.AuditTrail(trans,menu,cst);
        NavigateTo("/main");
    }
    private void NavigateTo(string strURL)
    {
        NavMan.NavigateTo(strURL);
    }

    protected override async Task OnInitializedAsync()
    {
        mypersoexe = config.Read("Dispenser", Config.PARAM_PERSO_EXE);
        strCOM = strCOM + config.Read("Dispenser", Config.PARAM_DEVICE_DISPENSER);
        readerName = config.Read("Dispenser", Config.PARAM_DEVICE_CARD_READER);
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        Switcher.DOWN("500",config.usbEKTP);
        OurUtility.Write_Log("== Step 4. Perso Page", "step-action");
        isLoading = true;
        Switcher.UP("3000",config.usbCardReader);
        await MyPerso();
        if (isError)
        {
            isLoading = false;
            trans.status = "GAGAL";
            await OurUtility.AuditTrail(trans,menu,cst);
            NavMan.NavigateTo("/error");
        }else if(isSuccess)
        {
            isLoading = false;
            trans.status = "BERHASIL";
            trans.errorCode = "BERHASIL GANTI KARTU HILANG/RUSAK";
            await OurUtility.AuditTrail(trans,menu,cst);
            await Print();

            Timer.SetTimer(20000);
            Timer.OnElapsed += TimerElapsedHandler;
            //await CheckNPS("");
        }
        else if(isFail)
        {
            isLoading = false;
            trans.status = "GAGAL";
            await OurUtility.AuditTrail(trans,menu,cst);

            Timer.SetTimer(20000);
            Timer.OnElapsed += TimerElapsedHandler;
        }
    }
    
    private async Task MyPerso()
    {
        while (intTryCount <= intTryLimit)
        {
            if (await Task.Run(() => MoveToICC()))
            {

                if (!cds.Start(ref errorcode, strCOM, ref msg))
                {
                    OurUtility.Write_Log("==== Card_Dispenser.Start, Failed", "step-action");
                    return;
                }
                //ToDO if Reader error
                if (await CardReaderScan())
                {
                    trans.AddTrail("GET SN", p_icc_id, "SUCCESS");
                    string myURL = _myURL + persoURL;
                    //ToDO add if trans.transID != null
                    string myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                    "\"terminalId\" : \"" + trans.termID + "\"," +
                                    "\"noHp\" : \"" + cst.PhoneNumber + "\"," +
                                    "\"nik\" : \"" + cst.EKTPNumber + "\"," +
                                    "\"buid\" : \"" + config.apiBuid + "\"," +
                                    "\"serialNumber\" : \"" + p_icc_id + "\"" +
                                    "}";

                    OurUtility.Write_Log("=== URL : " + myURL, "step-action");
                    OurUtility.Write_Log("=== Request API : " + myJson, "step-action");
                    string strResult = await OurUtility.PostCallAPI(myURL, myJson,menu);
                    OurUtility.Write_Log("=== Response API : " + strResult, "step-action");
                    if (strResult != null)
                    {
                        try
                        {
                            JObject jobjResult = JObject.Parse(strResult);
                            trans.transID = (string)jobjResult["transaction"]["transactionId"];
                            if ((string)jobjResult["transaction"]["statusCode"] == "00")
                            {
                                strPanjang = (string)jobjResult["perso"]["message"];
                                if (strPanjang != null)
                                {
                                    trans.persoID = (string)jobjResult["perso"]["persoId"];
                                    trans.AddTrail("GET STRING PANJANG", trans.persoID, "SUCCESS");
                                    if (await Task.Run(() => OurUtility.MyPerso(mypersoexe, strPanjang, ref msg)))
                                    {
                                        myURL = _myURL + updateURL;
                                        trans.AddTrail("PERSO", trans.persoID, "SUCCESS");
                                        myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                        "\"terminalId\" : \"" + trans.termID + "\"," +
                                        "\"persoId\" : \"" + trans.persoID + "\" ," +
                                        "\"persoStatus\" : \"2\"}";
                                        OurUtility.Write_Log("=== Update Perso Status", "step-action");
                                        OurUtility.Write_Log("=== Request API : " + myJson, "step-action");
                                        strResult = await OurUtility.PostCallAPI(myURL, myJson,menu);
                                        OurUtility.Write_Log("=== Response API : " + strResult, "step-action");
                                        trans.AddTrail("UPDATE PERSO SUCCESS", trans.persoID, "SUCCESS");
                                        isLoading = false;
                                        isSuccess = true;
                                        await Task.Run(() => MoveToTheFront());
                                        break;
                                    }
                                    else
                                    {
                                        trans.AddTrail("PERSO", trans.persoID, "FAILED");
                                        trans.mypersoResponse = msg;
                                        await Task.Run(() => MoveToBin());

                                        myURL = _myURL + updateURL;
                                        myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                            "\"terminalId\" : \"" + trans.termID + "\"," +
                                            "\"persoId\" : \"" + trans.persoID + "\" ," +
                                            "\"persoStatus\" : \"3\"}";
                                        OurUtility.Write_Log("=== Update Perso Status", "step-action");
                                        OurUtility.Write_Log("=== Request API : " + myJson, "step-action");
                                        strResult = await OurUtility.PostCallAPI(myURL, myJson,menu);
                                        trans.AddTrail("UPDATE PERSO FAILED", trans.persoID, "SUCCESS");
                                        OurUtility.Write_Log("=== Response API : " + strResult, "step-action");
                                        if (intTryCount < intTryLimit)
                                            intTryCount += 1;
                                        else
                                        {
                                            isFail = true;
                                            return;
                                        }
                                    }
                                }
                                else
                                {
                                    trans.AddTrail("GET STRING PANJANG", "" , "FAILED");
                                    await Task.Run(() => MoveToBin());
                                    if (intTryCount < intTryLimit)
                                        intTryCount += 1;
                                    else
                                    {
                                        isFail = true;
                                        return;
                                    }
                                }

                            }
                            else if ((string)jobjResult["transaction"]["statusCode"] == "01")
                            {
                                if ((string)jobjResult["transaction"]["errorCode"] != null)
                                {
                                    OurUtility.Write_Log("=== Status Code : " + (string)jobjResult["transaction"]["statusDesc"] + " {Error}", "step-action");
                                    trans.errorCode = (string)jobjResult["transaction"]["statusDesc"];
                                }
                                else
                                {
                                    string _statusDescSub = ((string)jobjResult["transaction"]["statusDesc"]);
                                    if (_statusDescSub != null)
                                    {
                                        string statusDescSub = _statusDescSub.Substring(0, _statusDescSub.IndexOf(":"));
                                        OurUtility.Write_Log("=== Status Code : " + statusDescSub + " {Error}", "step-action");
                                        trans.errorCode = statusDescSub;
                                    }
                                    else
                                    {
                                        OurUtility.Write_Log("=== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Error}", "step-action");
                                        trans.errorCode = (string)jobjResult["transaction"]["statusCode"];
                                    }
                                }
                                trans.AddTrail("GET STRING PANJANG", "", "FAILED");
                                await Task.Run(() => MoveToBin());
                                if (intTryCount < intTryLimit)
                                    intTryCount += 1;
                                else
                                {
                                    isFail = true;
                                    return;
                                }
                            }
                            else if ((string)jobjResult["transaction"]["statusCode"] == "02")
                            {
                                trans.AddTrail("GET STRING PANJANG", "", "FAILED");
                                strMsgError = (string)jobjResult["transaction"]["statusDesc"];
                                isLoading = false;
                                //IsVisible = false;
                                IsInvalid = true;
                                isFail = true;
                                return;
                            }
                        }
                        catch (Exception ex)
                        {
                            trans.AddTrail("PERSO", trans.persoID, "FAILED");
                            OurUtility.Write_Log("=== Status Code : " + strResult + " {Error}", "step-action");
                            trans.errorCode = strResult;
                            isError = true;
                            return;
                        }
                    }
                    else
                    {
                        trans.AddTrail("PERSO", trans.persoID, "FAILED");
                        OurUtility.Write_Log("=== Status Code : " + strResult + " {Error}", "step-action");
                        trans.errorCode = strResult;
                        isError = true;
                        return;
                    }
                }
                else
                {
                    trans.AddTrail("GET SN", "", "FAILED");
                    await Task.Run(() => MoveToBin());
                    if (intTryCount < intTryLimit)
                        intTryCount += 1;
                    else
                    {
                        trans.errorCode = "FAILED GET SN";
                        isFail = true;
                        return;
                    }
                }
            }
            else
            {
                trans.AddTrail("GET SN", "", "FAILED");
                trans.status = "GAGAL";
                trans.errorCode = "KARTU HABIS";
                await OurUtility.AuditTrail(trans,menu,cst);
                OurUtility.Write_Log("=== Card Dispenser Error : Cek Persediaan Kartu", "step-action");
                trans.errorCode = "Maaf Kartu Habis, Harap Hubungi Costumer Service MyGraPARI";
                NavigateTo("/error");
                break;
            }
        }
    }

    private async Task CheckPerso()
    {
        if (!isLoading && !isSuccess && !isFail && !isVisible)
        {
            isLoading = true;
        }
        else if (isLoading && !isSuccess)
        {
            isLoading = false;
            if (intTryCount <= intTryLimit)
                intTryCount += 1;
            else
                isFail = true;
        }
    }

    private void InputNPS1(string strInput)
    {
        strNPS1Value = strInput;
    }

    private async Task NPS()
    {
        surveys[CESno].answValue = strNPS1Value;
        CESno += 1;
        if (CESno>=surveys.Count())
        {
            isVisible = false;
            StateHasChanged();
            await Task.Delay(2000);
            //ToDo Send Answer
            Timer.SetTimer(20000);
            Timer.OnElapsed += TimerElapsedHandler;
        }
    }
    private async Task CheckNPS(string strURL)
    {

        string myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                "\"noHp\" : \"" + cst.PhoneNumber + "\"," +
                                "\"terminalId\" : \"" + trans.termID + "\"" +
                                "}";
        string myURL = _myURL + cesURL;

        OurUtility.Write_Log("== Check CES", "step-action");
        OurUtility.Write_Log("== URL API : " + myURL, "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson,menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != null)
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"]["statusCode"] == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Success}", "step-action");
                    foreach (var question in jobjResult.SelectToken("surveys"))
                    {
                        CES c = new CES();
                        c.quIndText= question.SelectToken("questionTextInd").ToString();
                        c.quEngText= question.SelectToken("questionTextEn").ToString();
                        c.quID= question.SelectToken("questionId").ToString();
                        c.answID= question.SelectToken("answerId").ToString();
                        surveys.Add(c);
                    }
                    isVisible = true;
                    return;
                }
                else if ((string)jobjResult["transaction"]["statusCode"] == "01")
                {
                    if ((string)jobjResult["transaction"]["errorCode"] != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusDesc"] + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"]["statusDesc"];
                    }
                    else
                    {
                        string _statusDescSub = ((string)jobjResult["transaction"]["statusDesc"]);
                        string statusDescSub = _statusDescSub.Substring(0, _statusDescSub.IndexOf(":"));
                        OurUtility.Write_Log("== Status Code : " + statusDescSub + " {Error}", "step-action");
                        trans.errorCode = statusDescSub;
                    }
                    //                    IsLoading = false;
                    //                  IsVisible = false;
                    //                IsInvalid = true;
                    //NavMan.NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"]["statusCode"] == "02")
                {
                    strMsgError = (string)jobjResult["transaction"]["statusDesc"];
                    isVisible = false;
                    IsInvalid = true;
                }
            }
            catch (Exception ex)
            {
                trans.errorCode = strResult;
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                //NavMan.NavigateTo("/error");
            }
        }
        else
        {
            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            //NavMan.NavigateTo("/error");
        }
    }

    private bool MoveToICC()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To IC Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed " + errorcode + "message: " + msg, "step-action");
            return false;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_ICC_Card", "step-action");
        if (!cds.MoveTo_IC_Card(ref errorcode, ref msg))
        {
            OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_ICC_Card, Failed " + errorcode + " message : " + msg, "step-action");
            return false;
        }
        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        return true;
    }

    private void MoveToTheFront()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To The Front Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed", "step-action");
            return;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Front_Hold", "step-action");
        if (!cds.MoveTo_The_Front(ref errorcode, ref msg))
        {
            trans.AddTrail("MOVE TO FRONT", "", "FAILED");
            OurUtility.Write_Log("==== 5. Card_Dispenser.MoveToTheFront, Failed", "step-action");
            return;
        }
        trans.AddTrail("MOVE TO FRONT", "", "SUCCESS");

        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
    }

    private void MoveToBin()
    {
        OurUtility.Write_Log("=== Card Dispenser Move To Bin Position", "step-action");
        OurUtility.Write_Log("==== 1. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
        OurUtility.Write_Log("==== 2. Card_Dispenser.Start", "step-action");
        if (!cds.Start(ref errorcode, strCOM, ref msg))
        {
            OurUtility.Write_Log("==== 3. Card_Dispenser.Start, Failed", "step-action");
            return;
        }
        OurUtility.Write_Log("==== 3. Card_Dispenser.Initialize", "step-action");
        cds.Initialize(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 4. Card_Dispenser.MoveTo_Bin", "step-action");
        cds.MoveTo_Bin(ref errorcode, ref msg);
        OurUtility.Write_Log("==== 5. Card_Dispenser.Stop", "step-action");
        cds.Stop(ref msg);
    }

    private async Task<bool> CardReaderScan()
    {
        bool ret = false;

        OurUtility.Write_Log("=== Card Reader Scan IC", "step-action");
        Card_Reader cdr = new Card_Reader();
        OurUtility.Write_Log("==== 1. Card_Reader.Read", "step-action");
        if (await Task.Run(() => cdr.Read(readerName, ref p_icc_id, ref msg)).ConfigureAwait(true))
        {
            ret = true;
            cdr.DisconnectedCard();
        }
        return ret;
    }

    private async Task Print()
    {
        int height = 0;

        PrintContent prtContent = new PrintContent();
        string msg = string.Empty;
        string logoTsel = "C:\\MyGApps\\wwwroot\\assets\\image\\Logo\\Logo_MyGraPARI_mini.png";

        string content = prtContent.GK(trans, cst, config);
        string header = prtContent.HeaderGK(trans, cst, config);
        string footer = prtContent.FooterGK(trans, cst, config);
        bool result = Printer.Print(config, header, content, logoTsel, footer, ref msg);
    }

    private void TimerElapsedHandler()
    {
        NavMan.NavigateTo("/main");
    }
}
