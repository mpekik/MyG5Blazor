@page "/bth/2"

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Text;
@using System;
@using System.Threading.Tasks;
@using MyG5Blazor.Data

@inject Costumer cst
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan
@inject Transaction trans
@inject Menu menu
@inject Config config 
<div class="main-panel bg-home">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="teks-title">Bayar Tagihan KartuHalo</div>
                    <div id="">
                        <div class="teks-center"> Pilih Metode Pembayaran </div>
                    </div>
                </div>
                <div class="col-md-6" style="text-align: center;">
                    @if (menu.edc == "1")
                    {
                        <img @onclick="@(() => SetPaymentMethod(1))" id="" class="pembayaran" src="../../assets/image/Bayar_Debit.png">
                    }
                    @if (menu.cash == "1")
                    {
                        <img @onclick="@(() => SetPaymentMethod(2))" id="" class="pembayaran" src="../../assets/image/Bayar_Tunai.png">
                    }
                    @if (menu.edc == "1")
                    {
                        <img @onclick="@(() => SetPaymentMethod(3))" id="" class="pembayaran" src="../../assets/image/Bayar_Kredit.png">
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- <div class="centered">Silakan Tekan Menu yang Anda Inginkan</div> -->
    <footer>
        <div class="footer-side1">
            <span class="dot">1</span>
            <span class="dot" id="dot-active">2</span>
            <span class="dot">3</span>
            <span class="dot">4</span>
        </div>
        <div class="footer-side2">
            <button @onclick="@(() => NavigateTo("/bth/2a"))" class="btn-arrow btn" value="">Kembali</button>
            <button @onclick="@(()=>NavigateTo(""))" class="btn-arrow btn" value="">Menu<br>Utama</button>
            <!-- <sup>Powered By </sup>Trilogi Persada -->
        </div>
    </footer>
</div>
@if (isLoading)
{
    <div id="myModal" class="modal">
        <div class="modal-blank">
            <img class="lds-spinner" src="../../assets/image/loader.gif">
            <p><br>Mohon tunggu</p>
            <p>proses sedang berlangsung...</p>
        </div>
    </div>
}
@code
{
    private bool IsInvalid = false;
    private bool isLoading = false;
    //public string _myURL = "https://mygrapari.telkomsel.co.id/trilogi/";
    public string _myURL = string.Empty;

    public string serviceURL = "mygrapari/bayar-halo/v1/get-bill";
    private string _termID = string.Empty;
    private string msg = string.Empty;
    private string errorcode = string.Empty;
    private string strMsgError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
    }
    private void SetPaymentMethod(int _intMPembayaran)
    {
        cst.intMPembayaran = _intMPembayaran;
        trans.intPayment = _intMPembayaran;
        GetPayment("/bth/3");
    }

    private void NavigateTo(string strURL)
    {
        NavMan.NavigateTo(strURL);
    }

    public static async Task<string> PostCallAPI(string url, string jsonString)
    {
        string ret = string.Empty;
        try
        {
            using (var handler = new HttpClientHandler())
            {
                handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; };
                using (HttpClient client = new HttpClient(handler))
                {
                    var content = new StringContent(jsonString, Encoding.UTF8, "application/json");
                    var response = await client.PostAsync(url, content);
                    if (response != null)
                    {
                        if (response.IsSuccessStatusCode || response.StatusCode.ToString() == "BadRequest" || response.StatusCode.ToString() == "InternalServerError")
                        {
                            var jsonStringResult = await response.Content.ReadAsStringAsync();
                            return jsonStringResult;
                        }
                        else
                        {
                            return response.StatusCode.ToString();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("==" + ex.Message, "step-action");
        }
        return ret;
    }

    public async Task GetPayment(string strURL)
    {
        isLoading = true;
        await Task.Delay(10000);
        string myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
            "\"terminalId\" : \"" + trans.termID + "\"," +
            "\"noHp\" : \"" + cst.PhoneNumber + "\"," +
                                "\"paymentMethod\" : \"" + trans.paymentMethod + "\"" +
                                "}";
        string myURL = _myURL + serviceURL;

        OurUtility.Write_Log("== Get Bill", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await PostCallAPI(myURL, myJson);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != null)
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"]["statusCode"] == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Success}", "step-action");
                    foreach (var bill in jobjResult.SelectToken("billPayment").SelectToken("bill"))
                    {
                        Int32.TryParse(bill.SelectToken("amount").ToString(), out int amount);
                        cst.AddlistTagihan(bill.SelectToken("referenceNo").ToString(), amount, bill.SelectToken("custName").ToString());
                    }
                    if ((string)jobjResult["billPayment"]["bit61"] != null)
                        trans.bit = (string)jobjResult["billPayment"]["bit61"];
                    else if ((string)jobjResult["billPayment"]["bit48"] != null)
                        trans.bit = (string)jobjResult["billPayment"]["bit48"];
                    trans.fee = (string)jobjResult["billPayment"]["fee"];

                    //trans.transID = (string)jobjResult["transaction"]["transactionId"];

                    NavMan.NavigateTo(strURL);
                }
                else if ((string)jobjResult["transaction"]["statusCode"] == "01")
                {
                    if ((string)jobjResult["transaction"]["errorCode"] != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"]["statusCode"] + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"]["statusCode"];
                    }
                    else
                    {
                        string _statusDescSub = ((string)jobjResult["transaction"]["statusCode"]);
                        string statusDescSub = _statusDescSub.Substring(0, _statusDescSub.IndexOf(":"));
                        OurUtility.Write_Log("== Status Code : " + statusDescSub + " {Error}", "step-action");
                        trans.errorCode = statusDescSub;
                    }
                    NavMan.NavigateTo("/error");
                }
                else if ((string)jobjResult["transaction"]["statusCode"] == "02")
                {
                    strMsgError = (string)jobjResult["transaction"]["statusDesc"];
                    isLoading = false;
                    //IsVisible = false;
                    IsInvalid = true;
                }
            }
            catch (Exception ex)
            {
                trans.errorCode = strResult;
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                NavMan.NavigateTo("/error");
            }
        }
        else
        {
            trans.errorCode = strResult;
            OurUtility.Write_Log("== Error : Hit WebService {Error}", "step-action");
            NavMan.NavigateTo("/error");
        }
    }
}
