@page "/PB/4"

@using MyG5Blazor.Data
@using System.IO.Ports
@using System.Threading
@using System.Text
@using System
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Net.Http;
@using System.Threading.Tasks;

@inject IJSRuntime JSRuntime
@inject Costumer cst
@inject NavigationManager NavMan
@inject EDC edc
@inject BlazorTimer Timer
@inject BlazorTimer TimerCES
@inject Transaction trans
@inject Config config
@inject Menu menu

<div class=@pageClass>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top ">
        <div class="container-fluid">
            <div class="navbar-wrapper">
                <div class="logo">
                    <img src="../../assets/image/Logo/Logo_MyGraPARI.png" />
                </div>
                <!-- <a class="navbar-brand" href="javascript:;">Dashboard</a> -->
            </div>

            <form class="col-md-6">
                <div class="input-group no-border">
                    <div class="checklist">
                        @if (IsSuccess)
                        {
                            <img src="../../assets/image/tanda_checklist.png" />
                        }
                        else if (IsFail)
                        {
                            <img src="../../assets/image/tanda_x.png" />
                        }
                    </div>
                </div>
            </form>
        </div>
    </nav>
    <!-- End Navbar -->

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                @switch (MetodePembayaran)
                {
                    case 1:
                        {
                            @if (!IsFail && !IsSuccess)
                            {
                                <div id="credit-payment" class="modal-blank-1" style="background-image: url(../image/bg-02.jpg); background-size: cover; background-position: center center;background-attachment: fixed; ">
                                    <img src="../../assets/image/debit.png" class="img-debit" id="myBtn">
                                    <div class="modal-blank-text">
                                        <div class="text1" id="teks-temukan">Temukan mesin EDC pada <br> MyGraPARI seperti gambar di atas</div>
                                        <div class="text2">Gesek Kartu Debit Anda dengan <br> bagian pita hitam menghadap ke <br> arah mesin EDC</div>
                                        <div class="text3">Masukkan PIN dan tekan OK <br> <p class="green">(tombol hijau)</p></div>
                                    </div>
                                </div>
                            }
                            else if (IsSuccess)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Bayar Tagihan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold">Proses Pembayaran Tagihan KartuHalo<br> <b class="green">Berhasil</b></div>
                                </div>

                                <div class="col-md-6">
                                    <div id="image-pulsa" class="image-center2">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px" height="280px">
                                    </div>
                                </div>
                            }
                            else if (IsFail)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Bayar Tagihan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold">
                                        Proses Pembayaran Tagihan KartuHalo<br> <b class="red">FAILED</b><br><br>
                                        @if (IsVoid)
                                        {
                                            <span style="font-weight: normal;">Silahkan <span style="font-weight: bold;"> Tekan ENTER(Tombol Hijau)</span>pada Mesin EDC untuk Proses Pengembalian Uang </span>
                                        }
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div id="image-pulsa" class="image-center2">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px" height="280px">
                                    </div>
                                </div>
                            }
                            break;
                        }
                    case 2:
                        {
                            <div class="col-md-6">
                                @if (!IsFail && !IsSuccess)
                                {
                                    <div class="teks-title">Bayar Tagihan KartuHalo</div>
                                    <div id="teks-silakan">
                                        <div class="teks-top"> Silakan Masukan Uang Kertas pada Alat Penerima Uang Tunai secara Lembar per Lembar </div>
                                    </div>
                                    <div id="teks-pastikan">
                                        <div class="teks-center" style="margin-top: 32%;"> Pastikan Pembayaran Menggunakan <br> Uang Kertas Minimal Pecahan Rp 10.000 </div>
                                    </div>
                                    <div id="bayar2">
                                        <div class="teks-bot" style="text-transform: uppercase; font-weight: bold; margin-top: 45%; line-height: 1;">Bayar Dengan Uang Pas, Mesin <br> Ini tidak mengeluarkan kembalian</div>
                                    </div>
                                    <div id="bayar3">
                                        <div class="teks-bot2" style="text-transform: uppercase; font-weight: bold; margin-top: 70%;">NILAI DARI KELEBIHAN PEMBAYARAN SECARA OTOMATIS AKAN MENGURANGI TAGIHAN KARTUHALO ANDA DI BULAN BERIKUTNYA.</div>
                                    </div>
                                }
                                @if (IsVisible2)
                                {
                                    <div id="teks-sudah-sesuai">
                                        <div class="teks-center" style="margin-top: 38%;"> Uang yang Anda Masukkan Sudah Sesuai dengan Jumlah yang Harus Dibayarkan </div>
                                    </div>
                                }

                                @if (IsFail)
                                {
                                    <div id="status-pay" class="teks-status2">Proses Pembayaran Tagihan KartuHalo <br><b class="red">Tidak Berhasil</b></div>
                                    <div id="nominal-pay" class="teks-center"> Silakan Ambil Struk Transaksi dan <br> Hubungi Kasir GraPARI untuk Bantuan</div>
                                }
                                else if (IsSuccess)
                                {
                                    <div class="teks-title">Bayar Tagihan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold">Proses Pembayaran Tagihan KartuHalo<br> <b class="green">Berhasil</b></div>

                                }
                            </div>

                            <div class="col-md-6" id="proses-bill">
                                @if (!IsFail && !IsSuccess)
                                {
                                    <div id="">
                                        <img class="tunai" onclick="buttonNext()" id="" src="../../assets/image/tunai.png">
                                    </div>
                                    <div>
                                        <div class="jumlah-bayar">Jumlah yang Harus Dibayar</div>
                                        <div class="nominal-rupiah">Rp @intBill.ToString("N0")</div>
                                    </div><br>

                                    <div id="">
                                        <div class="jumlah-bayar">Uang yang telah Anda Masukan</div>
                                        @if (inttotal < intBill)
                                        {
                                            <div class="nominal-rupiah" id="nominal-kurang">Rp @inttotal.ToString("N0")</div>
                                        }
                                        else
                                        {
                                            <div class="nominal-rupiah" id="nominal-pas">Rp @inttotal.ToString("N0")</div>
                                        }
                                    </div><br>
                                }
                                else
                                {
                                    <div id="image-pulsa" class="image-center2">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px" height="280px">
                                    </div>
                                }
                            </div>
                            break;
                        }
                    case 3:
                        {
                            @if (!IsSuccess && !IsFail)
                            {
                                <div id="credit-payment" class="modal-blank-2">
                                    <img src="../../assets/image/credit.png" alt="" width="100%" height="380px" style="padding-top:70px;" id="myBtn">
                                    <div class="modal-blank-text">
                                        <div class="text-1">Temukan mesin EDC pada <br> MyGraPARI seperti gambar di atas</div>
                                        <div class="text-2">Masukkan Kartu Kredit Anda<br> melalui bagian bawah mesin<br> EDC dengan bagian Chip terlebih <br> dahulu</div>
                                        <div class="text-3">Masukkan PIN dan tekan OK <br> <b class="green">(tombol hijau)</b></div>
                                        <div class="text-4">Cabut Kartu Kredit Anda dari <br> Mesin EDC</div>
                                    </div>
                                </div>
                            }
                            else if (IsSuccess)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Bayar Tagihan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold">Proses Pembayaran Tagihan KartuHalo<br> <b class="green">Berhasil</b></div>
                                </div>

                                <div class="col-md-6">
                                    <div id="image-pulsa" class="image-center2">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px" height="280px">
                                    </div>
                                </div>
                            }
                            else if (IsFail)
                            {
                                <div class="col-md-6">
                                    <div class="teks-title">Bayar Tagihan KartuHalo</div>
                                    <div id="status-pay" class="teks-center teks-bold">
                                        Proses Pembayaran Tagihan KartuHalo<br> <b class="red">FAILED</b><br><br>
                                        @if (IsVoid)
                                        {
                                            <span style="font-weight: normal;">Silahkan <span style="font-weight: bold;"> Tekan ENTER(Tombol Hijau)</span>pada Mesin EDC untuk Proses Pengembalian Uang </span>
                                        }
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div id="image-pulsa" class="image-center2">
                                        <img src="../../assets/image/Logo/00_logo_KartuHalo.png" alt="" width="450px" height="280px">
                                    </div>
                                </div>
                            }
                            break;
                        }
                }
            </div>
        </div>
    </div>


    <footer>
        <div class="footer-side1">
            <span class="dot">1</span>
            <span class="dot">2</span>
            <span class="dot">3</span>
            <span class="dot" id="dot-active">4</span>
        </div>
        <div class="footer-side2">
            @if (MetodePembayaran == 2 && !IsFail && !IsSuccess)
            {
                <button @onclick="@(()=>IsExit = true)" class="btn-arrow btn" value="">Menu Utama</button>
            }
            <!--<sup>Powered By </sup>Trilogi Persada -->
        </div>
    </footer>
</div>
@if (IsExit)
{
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-body">Anda belum menyelesaikan proses pembayaran<br>tagihan kartuHalo. Jika Anda keluar dari menu ini,<br>seluruh uang yang Anda masukkan dapat diambil di<br>Kasir GraPARI dengan menunjukkan struk dari<br>MyGraPARI.</p>
                    <button class="btn btn-danger modal-button" @onclick="@(()=>IsExit = false)" id="btn-lanjut">Lanjut Pembayaran</button>
                    <button @onclick="@(()=>InvokeAsync(TunaiExitFail))" class="btn btn-light modal-button">Batal Pembayaran</button>
                </div>
            </div>
        </div>
    </div>
    <!-- end modal -->
}
@if (IsVisible)
{
    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">@surveys[CESno].quIndText</p>
                    <button class="btn nps-button" value="1" @onclick="@(() => InputNPS1("1"))">1</button>
                    <button class="btn nps-button" value="2" @onclick="@(() => InputNPS1("2"))">2</button>
                    <button class="btn nps-button" value="3" @onclick="@(() => InputNPS1("3"))">3</button>
                    <button class="btn nps-button" value="4" @onclick="@(() => InputNPS1("4"))">4</button>
                    <button class="btn nps-button" value="5" @onclick="@(() => InputNPS1("5"))">5</button>
                    <button class="btn nps-button" value="6" @onclick="@(() => InputNPS1("6"))">6</button>
                    <button class="btn nps-button" value="7" @onclick="@(() => InputNPS1("7"))">7</button>
                    <button class="btn nps-button" value="8" @onclick="@(() => InputNPS1("8"))">8</button>
                    <button class="btn nps-button" value="9" @onclick="@(() => InputNPS1("9"))">9</button>
                    <button class="btn nps-button" value="10" @onclick="@(() => InputNPS1("10"))">10</button>
                    <button @onclick="NPS" class="btn btn-danger button-nps">OK</button>
                    <!-- <button class="btn btn-light modal-button">Tidak</button> -->
                </div>
            </div>
        </div>
    </div>
}

@if (IsVisible2)
{
    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-nps">
                <!-- <div class="modal-header">
                  <span class="close">&times;</span>
                </div> -->
                <div class="modal-body">
                    <p class="text-header">Beri Penilaian Layanan MyGrapari</p>
                    <p class="text-nps">Hal apa yang Anda rasa perlu ditingkatkan pada mesin layanan MyGraPARI? </p>
                    <div class="modal-flex">
                        <label>
                            <input type="checkbox">
                            <span class="btn ">Tampilan/Estetika</span>
                        </label>

                        <label>
                            <input type="checkbox">
                            <span class="btn " style="margin-left: 40px;">Kecepatan Proses</span>
                        </label>
                    </div>
                    <div class="modal-flex">
                        <label>
                            <input type="checkbox">
                            <span class="btn ">Kemudahan Penggunaan</span>
                        </label>

                        <label>
                            <input type="checkbox">
                            <span class="btn" style="margin-left: 40px;">Kejelasan Bahasa</span>
                        </label>
                    </div>
                    <button class="btn btn-danger button-nps" value="">OK</button>
                </div>
            </div>
        </div>
    </div>
}
@if (IsLoading)
{
    <div id="myModal" class="modal" style="z-index:999;">
        <div class="modal-blank">
            <img class="lds-spinner" onclick="buttonLoad()" src="../../assets/image/loader.gif" id="myBtn2">
            <p><br>Proses pembayaran tagihan kartuHalo</p>
            <p>sedang berjalan, mohon tunggu beberapa</p>
            <p>saat...</p>
        </div>
    </div>
}
@if (isTunaiComplete)
{
    <div id="myModal" class="modal">
    <div class="modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <p class="text-body">Anda memiliki <span style="font-weight: bold;">KEMBALIAN</span> sebesar<span style="font-weight: bold;"> Rp @intMinus.ToString("N0") </span> yang otomatis akan mengurangi tagihan kartuHalo anda di bulan berikutnya.</p>
                <button class="btn btn-danger modal-button" @onclick="Tunai">Lanjut</button>
                <button class="btn btn-light modal-button" @onclick="TunaiExitFail">Batal</button>
                <!-- <button class="btn btn-light modal-button">Tidak</button> -->
            </div>
        </div>
    </div>
    </div>
}
@code
{
    public List<CES> surveys = new List<CES>();

    private string pageClass = "main-panel bg-edc-process";
    private bool IsVisible = false;
    private bool IsVisible2 = false;
    private bool IsLoading = false;
    private bool IsSuccess = false;
    private bool IsFail = false;
    private bool IsExit = false;
    private bool IsVoid = false;
    private bool IsVoided = false;
    private bool IsInvalid = false;
    private bool IsTunaiExit = false;
    private bool isTunaiComplete = false;

    private int intTryCount = 1;
    private int intTryLimit = 3;
    private int MetodePembayaran = 0;
    private int CESno = 0;
    private int logbank = 0;
    private int logamount = 0;

    private string strNPS1Value = string.Empty;
    private string strMsgError = string.Empty;
    private string strBillCom = string.Empty;

    private int intBill = 0;
    private int intAccBill = 0;
    private int intMinus = 0;

    //public string _myURL = "https://mygrapari.telkomsel.co.id/trilogi/";
    public string _myURL = string.Empty;
    public string serviceURL = "bayar-halo/v1/payment";
    private static string cesURL = "ces/v1/eligibility-check";

    private string qu1IndText = string.Empty;
    private string qu1ID = string.Empty;
    private string qu2IndText = string.Empty;
    private string qu2ID = string.Empty;

    private string qu1EngText = string.Empty;
    private string qu2EngText = string.Empty;

    private string quIndText = string.Empty;
    private string quID = string.Empty;
    private string quEngText = string.Empty;

    private string strBill => intBill.ToString();
    private string strAccBill => intAccBill.ToString();
    private string strMinus => intMinus.ToString();
    private string strInvoice = "1";
    private string strBilling = "2";
    private string strCOM = "COM";
    private string resultPayment = string.Empty;
    private string resultCash = "01";

    string msg = string.Empty;
    string logoTsel = System.IO.Directory.GetCurrentDirectory() + @"\wwwroot\assets\image\Logo\Logo_MyGraPARI_mini.png";

    protected override async Task OnInitializedAsync()
    {
        _myURL = config.Read("URL", Config.PARAM_DEFAULT_URL);
        strCOM = strCOM + config.Read("EDC", Config.PARAM_EDC_PORT);
        MetodePembayaran = cst.intMPembayaran;
        intBill = cst.intTagihan;
        StateHasChanged();
        //intAccBill = 10000;
        //intMinus = intBill - intAccBill;
        switch (MetodePembayaran)
        {
            case 1:
                {
                    pageClass = "main-panel bg-edc-process";

                    //TODO Integrate with EDC Debit Card
                    await Pay(strCOM, strBill, strInvoice, strBilling, MetodePembayaran.ToString());
                    pageClass = "main-panel bg-home";
                    if (edc.intTry < 3)
                    {
                        OurUtility.Write_Log("Trace Number : " + trans.edcTrace, "step-action");
                        IsLoading = true;
                        StateHasChanged();
                        await Task.Delay(200);
                        intAccBill = intBill;
                        await Payment("");

                        if (resultPayment == "00")
                        {
                            trans.edcStatus = "SUCCESS";
                            IsLoading = false;
                            IsFail = false;
                            IsSuccess = true;
                            //Console.WriteLine("Payment Success");
                            StateHasChanged();
                            await Task.Delay(200);

                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintHalo(trans, cst, config, logoTsel, ref msg);

                            await CheckNPS("");

                            trans.status = "00";
                            trans.errorCode = "PEMBAYARAN TAGIHAN VIA DEBIT BERHASIL";
                            trans.kip = "Berhasil, terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrail(trans, menu, cst);

                            Timer.SetTimer(12000);
                            Timer.OnElapsed += TimerElapsedHandler;
                            break;
                        }
                        else
                        {
                            //ToDO Add if Void
                            IsLoading = false;
                            //IsVoid = true;
                            IsFail = true;
                            strInvoice = trans.edcTrace;
                            StateHasChanged();
                            await Task.Delay(200);
                            if (trans.edcresp == "00")
                            {

                                IsFail = false;
                                IsVoid = true;
                                OurUtility.Write_Log("== Void Payment Trace Number = " + strInvoice, "step-action");
                                Void();
                                IsLoading = false;
                                StateHasChanged();
                            }
                            trans.status = "01";
                            trans.kip = "Pembayaran oleh pelanggan berhasil, payment ke Payment Gateway gagal, trx id:" + trans.transID + " , terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrail(trans, menu, cst);
                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintHalo(trans, cst, config, logoTsel, ref msg);

                            if (trans.edcRespVoid == "00")
                            {
                                Printer.PrintEDCVoid(trans, cst, config, logoTsel, ref msg);
                            }

                            Timer.SetTimer(12000);
                            Timer.OnElapsed += TimerElapsedHandler;
                            break;
                        }
                        break;
                    }
                    else
                    {
                        IsFail = true;
                        OurUtility.Write_Log("== Payment EDC Failed ", "step-action");
                        trans.AddTrail("PAYMENT EDC", trans.edcresp, "01");
                        trans.status = "01";
                        await OurUtility.AuditTrail(trans, menu, cst);

                        //Console.WriteLine("Payment Failed");
                    }
                    break;
                }
            case 2:
                {
                    pageClass = "main-panel bg-home";
                    Payout.total = 0;
                    Payout.uangCount = 0;
                    try
                    {
                        logbank = Int32.Parse(config.Read("BILL", Config.PARAM_BILL_BANK_STOK));
                    }
                    catch (Exception ex)
                    {
                        logbank = 0;
                    }
                    try
                    {
                        logamount = Int32.Parse(config.Read("BILL", Config.PARAM_BILL_AMOUNT));
                    }
                    catch (Exception ex)
                    {
                        logamount = 0;
                    }
                    await Task.Delay(2000);
                    await MainLoop(logbank,logamount);
                    intAccBill = Payout.total;
                    cst.intUangCount = Payout.uangCount;
                    cst.intTagihanTerbayar = Payout.total;
                    //logamount = logamount + Payout.total;
                    //logbank = logbank + Payout.uangCount;
                    //config.Write("BILL", Config.PARAM_BILL_AMOUNT, logamount.ToString());
                    //config.Write("BILL", Config.PARAM_BILL_BANK_STOK, logbank.ToString());
                    if (!IsTunaiExit)
                    {
                        intMinus = intAccBill - intBill;
                        isTunaiComplete = true;
                        break;
                    }
                    else { break; }
                }
            case 3:
                {
                    pageClass = "main-panel bg-edc-process";

                    //TODO Integrate with EDC Debit Card
                    await Pay(strCOM, strBill, strInvoice, strBilling, MetodePembayaran.ToString());
                    pageClass = "main-panel bg-home";
                    if (edc.intTry < 3)
                    {
                        OurUtility.Write_Log("Trace Number : " + trans.edcTrace, "step-action");
                        IsLoading = true;
                        await Task.Delay(2000);
                        intAccBill = intBill;
                        await Payment("");

                        if (resultPayment == "00")
                        {
                            trans.edcStatus = "SUCCESS";
                            IsLoading = false;
                            IsSuccess = true;
                            StateHasChanged();
                            //Console.WriteLine("Payment Success");
                            await Task.Delay(200);

                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintHalo(trans, cst, config, logoTsel, ref msg);

                            await CheckNPS("");

                            trans.status = "00";
                            trans.errorCode = "PEMBAYARAN TAGIHAN VIA CC BERHASIL";
                            trans.kip = "Berhasil, terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrail(trans, menu, cst);

                            Timer.SetTimer(12000);
                            Timer.OnElapsed += TimerElapsedHandler;
                            break;
                        }
                        else
                        {
                            //ToDO Add if Void
                            IsLoading = false;
                            //IsVoid = true;
                            IsFail = true;
                            strInvoice = trans.edcTrace;
                            StateHasChanged();
                            await Task.Delay(200);
                            if (trans.edcresp == "00")
                            {

                                IsFail = false;
                                IsVoid = true;
                                OurUtility.Write_Log("== Void Payment Trace Number = " + strInvoice, "step-action");

                                Void();
                                IsLoading = false;
                                StateHasChanged();
                            }
                            trans.status = "01";
                            trans.kip = "Pembayaran oleh pelanggan berhasil, payment ke Payment Gateway gagal, trx id:" + trans.transID + " , terminal id:" + menu.terminalId;
                            await OurUtility.AuditTrail(trans, menu, cst);

                            if (trans.edcresp == "00")
                            {
                                Printer.PrintEDCPay(trans, cst, config, logoTsel, ref msg);
                            }

                            Printer.PrintHalo(trans, cst, config, logoTsel, ref msg);

                            if (trans.edcRespVoid == "00")
                            {
                                Printer.PrintEDCVoid(trans, cst, config, logoTsel, ref msg);
                            }

                            Timer.SetTimer(12000);
                            Timer.OnElapsed += TimerElapsedHandler;
                            break;
                        }
                        break;
                    }
                    else
                    {
                        IsFail = true;
                        OurUtility.Write_Log("== Payment EDC Failed ", "step-action");
                        trans.AddTrail("PAYMENT EDC", trans.edcresp, "01");
                        trans.status = "01";
                        await OurUtility.AuditTrail(trans, menu, cst);

                        //Console.WriteLine("Payment Failed");
                    }
                    break;
                }
        }
    }

    private async Task CancelComplete()
    {
        isTunaiComplete = false;
        //IsExit = true;
    }
    private async Task Tunai()
    {
        isTunaiComplete = false;
        resultCash = "00";

        await Payment("");

        //Console.WriteLine("inttotal = " + inttotal);
        StateHasChanged();
        if (resultPayment == "00")
        {
            trans.edcStatus = "SUCCESS";

            IsVisible2 = false;
            IsLoading = false;
            IsSuccess = true;
            StateHasChanged();
            await Task.Delay(200);

            Printer.PrintHalo(trans, cst, config, logoTsel, ref msg);
            await CheckNPS("");

            //Console.WriteLine("Payment Success");
            StateHasChanged();
            await Task.Delay(200);
            trans.status = "00";
            trans.errorCode = "PEMBAYARAN TAGIHAN VIA CASH BERHASIL";
            trans.kip = "Berhasil, terminal id:" + menu.terminalId;
            await OurUtility.AuditTrail(trans, menu, cst);

            Timer.SetTimer(12000);
            Timer.OnElapsed += TimerElapsedHandler;
        }
        else
        {
            IsLoading = false;
            IsFail = true;

            Printer.PrintHalo(trans, cst, config, logoTsel, ref msg);

            trans.status = "01";
            trans.kip = "Pembayaran oleh pelanggan berhasil, payment ke Payment Gateway gagal, trx id:" + trans.transID + " , terminal id:" + menu.terminalId;
            await OurUtility.AuditTrail(trans, menu, cst);

            Timer.SetTimer(12000);
            Timer.OnElapsed += TimerElapsedHandler;
        }
    }

    private bool translog = true;
    private async Task TunaiExitFail()
    {
        if (translog)
        {
            translog = false;
            intAccBill = Payout.total;
            cst.intTagihanTerbayar = Payout.total;
            cst.intUangCount = Payout.uangCount;
            resultCash = "01";

            IsExit = false;
            IsTunaiExit = true;
            isTunaiComplete = false;
            IsFail = true;
            trans.AddTrail("PAYMENT CASH", "Paid Ammount:" + intAccBill.ToString(), "02");
            Payout.DisableValidator();
            Payout.SSPComms.CloseComPort();

            await Payment("");

            Printer.PrintHalo(trans, cst, config, logoTsel, ref msg); await CheckNPS("");

            Task.Delay(500);

            trans.kip = "Pembayaran tidak dilanjutkan, terminal id:" + menu.terminalId;
            trans.status = "02";
            trans.errorCode = "CANCELED";
            await OurUtility.AuditTrail(trans, menu, cst);

            Timer.SetTimer(12000);
            Timer.OnElapsed += TimerElapsedHandler;
        }
    }

    private async Task Void()
    {
        if (IsVoid)
        {
            IsFail = true;
            await Void(strCOM, strBill, strInvoice, strBilling, MetodePembayaran.ToString());
            await VoidService();
        }
    }
    private async Task VoidService()
    {
        //IsLoading = true;
        string myJson = string.Empty;
        string apiURL = "transaction/v1/void";

        myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
            "\"terminalId\" : \"" + trans.termID + "\"," +
                                "\"ecr\" : \"" + trans.ecr + "\"," +
                                "\"sn\" : \"" + config.snEdc + "\"" +
                                "}";

        string myURL = _myURL + apiURL;

        OurUtility.Write_Log("== VOID Payment", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                resultPayment = (string)jobjResult["transaction"].SelectToken("statusCode");

                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "00");

                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "02");
                }

            }
            catch (Exception ex)
            {
                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                trans.AddTrail(" VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
            }
        }
        else
        {
            trans.errorCode = "Hit Webservice Error {" + strResult + "}";
            OurUtility.Write_Log("== Hit Webservice Error {" + strResult + "}", "step-action");
            trans.AddTrail("VOID PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
        }
    }
    private void CheckPerso()
    {
        if (!IsLoading && !IsSuccess && !IsFail && !IsVisible)
        {
            IsLoading = true;
        }
        else if (IsLoading && !IsSuccess)
        {
            IsLoading = false;
            if (intTryCount <= intTryLimit)
                intTryCount += 1;
            else
                IsFail = true;
        }
    }


    private void InputNPS1(string strInput)
    {
        strNPS1Value = strInput;
    }
    private async Task NPS()
    {
        surveys[CESno].answValue = strNPS1Value;
        CESno += 1;
        if (CESno >= surveys.Count())
        {
            IsVisible = false;
            StateHasChanged();
            await Task.Delay(2000);
            //ToDo Send Answer
        }
    }
    private async Task CheckNPS(string strURL)
    {

        string myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                                "\"noHp\" : \"" + cst.PhoneNumber + "\"," +
                                "\"terminalId\" : \"" + trans.termID + "\"" +
                                "}";
        string myURL = _myURL + cesURL;

        OurUtility.Write_Log("== Check CES", "step-action");
        OurUtility.Write_Log("== URL API : " + myURL, "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult != "NotFound" && strResult != "InternalServerError" && strResult != "BadRequest")
        {
            try
            {
                JObject jobjResult = JObject.Parse(strResult);
                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    foreach (var question in jobjResult.SelectToken("surveys"))
                    {
                        CES c = new CES();
                        c.quIndText = (string)question.SelectToken("questionTextInd");
                        c.quEngText = (string)question.SelectToken("questionTextEn");
                        c.quID = (string)question.SelectToken("questionId");
                        c.answID = (string)question.SelectToken("answerId");
                        surveys.Add(c);
                    }
                    trans.AddTrail("CES", "", "00");
                    IsVisible = true;
                    return;
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        string _statusDescSub = ((string)jobjResult["transaction"].SelectToken("statusDesc"));
                        string statusDescSub = _statusDescSub.Substring(0, _statusDescSub.IndexOf(":"));
                        OurUtility.Write_Log("== Status Code : " + statusDescSub + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("CES", "", "01");

                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    IsVisible = false;
                    IsInvalid = true;
                    trans.AddTrail("CES", "", "02");

                }
            }
            catch (Exception ex)
            {
                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                trans.AddTrail("CES", "", "01");

                //NavMan.NavigateTo("/error");
            }
        }
        else
        {
            trans.errorCode = "Hit Webservice Error {" + strResult + "}";
            OurUtility.Write_Log("== Hit Webservice Error {" + strResult + "}", "step-action");
            trans.AddTrail("CES", "", "01");

            //NavMan.NavigateTo("/error");
        }
    }
    private async Task Pay(string serialPortName, string tagihan, string invoice, string billing, string mPemabayaran)
    {
        try
        {
            InvokeAsync(StateHasChanged);
            OurUtility.Write_Log("== Payment Via EDC", "step-action");
            string _transType = "01";
            cst.intTagihanTerbayar = intBill;
            edc.Clear();
            edc.serialPort = new SerialPort();
            edc.serialPort.PortName = serialPortName;

            //edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceived);
            do
            {
                await Task.Delay(200);
                OurUtility.Write_Log("== Payment EDC : " + edc.serialPort.PortName + " " + tagihan + " "+_transType+" "+invoice +" "+billing+" "+mPemabayaran, "step-action");
                edc.SendCommand(tagihan, edc.serialPort, _transType, invoice, billing, mPemabayaran);

            } while (!edc.mre.WaitOne());
            trans.ecr = edc.ecr;
            trans.edcresp = trans.ecr.Substring(146, 2);
            trans.edcTid = trans.ecr.Substring(2, 8);
            trans.edcMid = trans.ecr.Substring(10, 15);
            trans.edcBatch = trans.ecr.Substring(25, 6);
            trans.edcIssuer = trans.ecr.Substring(31, 15);
            trans.edcRefNo = trans.ecr.Substring(46, 6);
            trans.edcTrace = trans.ecr.Substring(52, 6);
            trans.edcEntryCode = trans.ecr.Substring(58, 1);
            trans.edcAmount = trans.ecr.Substring(59, 12);
            trans.edcTotalAmount = trans.ecr.Substring(71, 12);
            trans.edcCardNo = trans.ecr.Substring(83, 19);
            trans.edcCardName = trans.ecr.Substring(102, 26);
            trans.edcDate = trans.ecr.Substring(128, 6);
            trans.edcTime = trans.ecr.Substring(134, 6);
            trans.edcApproval = trans.ecr.Substring(140, 6);
            await Task.Delay(200);
            if (trans.edcresp == "00")
            {
                OurUtility.Write_Log("== Payment Via EDC Success", "step-action");
                trans.AddTrail("PAYMENT EDC", trans.edcresp, "00");

                IsLoading = true;
                pageClass = "main-panel bg-home";
            }else
            {
                OurUtility.Write_Log("== Payment Via EDC Failed", "step-action");
                trans.AddTrail("PAYMENT EDC", trans.edcresp, "01");
            }
            //Console.WriteLine(trans.edcresp);
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("== Error EDC : "+ex.Message, "step-action");
            trans.AddTrail("PAYMENT EDC", ex.Message, "01");
        }
    }

    private async Task Void(string serialPortName, string tagihan, string invoice, string billing, string mPemabayaran)
    {
        string _transType = "02";
        OurUtility.Write_Log("EDC VOID", "step-action");
        edc.Clear();
        edc.serialPort = new SerialPort();
        edc.serialPort.PortName = serialPortName;
        edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceived);
        do
        {
            await Task.Delay(200);
            edc.SendCommand(tagihan, edc.serialPort, _transType, invoice, billing, mPemabayaran);

        } while (!edc.mre.WaitOne());
        trans.ecrVoid = edc.ecr;
        trans.edcRespVoid = trans.ecrVoid.Substring(146, 2);

        trans.edcTid = trans.ecrVoid.Substring(2, 8);
        trans.edcMid = trans.ecrVoid.Substring(10, 15);
        trans.edcBatch = trans.ecrVoid.Substring(25, 6);
        trans.edcIssuer = trans.ecrVoid.Substring(31, 15);
        trans.edcRefNo = trans.ecrVoid.Substring(46, 6);
        trans.edcTrace = trans.ecrVoid.Substring(52, 6);
        trans.edcCardNo = trans.ecrVoid.Substring(83, 19);
        trans.edcCardName = trans.ecrVoid.Substring(102, 26);
        trans.edcDate = trans.ecrVoid.Substring(128, 6);
        trans.edcTime = trans.ecrVoid.Substring(134, 6);
        trans.edcApproval = trans.ecrVoid.Substring(140, 6);
        trans.edcRefNumber = trans.ecrVoid.Substring(148, 12);
        trans.edcBillingNumber = trans.ecrVoid.Substring(160, 16);
        trans.edcBalance = trans.ecrVoid.Substring(176, 12);
        trans.edcTopUp = trans.ecrVoid.Substring(188, 19);
        trans.edcExp = trans.ecrVoid.Substring(207, 6);
        trans.edcInvoiceLA = trans.ecrVoid.Substring(213, 10);
        trans.edcBankFiller = trans.ecrVoid.Substring(223);

        await Task.Delay(200);
        if (trans.edcRespVoid == "00")
        {
            IsVoided = true;
            trans.edcStatus = "VOIDED";
            OurUtility.Write_Log("== Payment Voided", "step-action");
            trans.AddTrail("VOID EDC", trans.edcRespVoid, "00");
        }
        else
        {
            OurUtility.Write_Log("== Void Failed", "step-action");
            trans.AddTrail("VOID EDC", trans.edcRespVoid, "01");
        }
    }

    private async Task Payment(string strURL)
    {
        IsLoading = true;
        string myJson = string.Empty;
        if (MetodePembayaran == 1 || MetodePembayaran == 3)
        {
            myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                "\"terminalId\" : \"" + trans.termID + "\"," +
                "\"noHp\" : \"" + cst.PhoneNumber + "\"," +
                "\"amount\" : \"" + cst.intTagihan + "\"," +
                "\"accountId\" : \"" + cst.accountId + "\"," +
                "\"submitAmount\" : \"" + strBill + "\"," +
                                    "\"paymentMethod\" : \"" + trans.paymentMethod + "\"," +
                                    "\"fee\" : \"" + trans.fee + "\"," +
                                    "\"bit61\" : \"" + trans.bit + "\"," +
                                    "\"edc\" : {" +
                                    "\"responseCode\" : \"" + trans.edcresp + "\"," +
                                    "\"ecr\" : \"" + trans.ecr + "\"," +
                                    "\"sn\" : \"" + config.snEdc + "\"}" +
                                    "}";
        }
        else
        {
            myJson = "{ \"transactionId\" : \"" + trans.transID + "\"," +
                "\"terminalId\" : \"" + trans.termID + "\"," +
                "\"noHp\" : \"" + cst.PhoneNumber + "\"," +
                "\"amount\" : \"" + cst.intTagihan + "\"," +
                "\"accountId\" : \"" + cst.accountId + "\"," +
                "\"submitAmount\" : \"" + strAccBill + "\"," +
                "\"lembarUang\" : \"" + cst.intUangCount + "\"," +
                                    "\"paymentMethod\" : \"" + trans.paymentMethod + "\"," +
                                    "\"fee\" : \"" + trans.fee + "\"," +
                                    "\"responseCode\" : \"" + resultCash + "\"," +
                                    "\"bit48\" : \"" + trans.bit + "\"" +
                                    "}";
        }
        string myURL = _myURL + serviceURL;

        OurUtility.Write_Log("== Payment", "step-action");
        OurUtility.Write_Log("== Request API : " + myJson, "step-action");
        string strResult = await OurUtility.PostCallAPI(myURL, myJson, menu);
        OurUtility.Write_Log("== Response API : " + strResult, "step-action");
        if (strResult != "" && strResult!="NotFound" && strResult != "InternalServerError" && strResult != "BadRequest")
        {
            try
            {
                IsLoading = false;
                JObject jobjResult = JObject.Parse(strResult);
                resultPayment = (string)jobjResult["transaction"].SelectToken("statusCode");
                trans.resultPayment = resultPayment;

                if ((string)jobjResult["transaction"].SelectToken("statusCode") == "00")
                {
                    OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusCode") + " {Success}", "step-action");
                    trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "00");

                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "01")
                {
                    if ((string)jobjResult["transaction"].SelectToken("errorCode") != null)
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("statusDesc") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("errorCode");
                    }
                    else
                    {
                        OurUtility.Write_Log("== Status Code : " + (string)jobjResult["transaction"].SelectToken("errorCode") + " {Error}", "step-action");
                        trans.errorCode = (string)jobjResult["transaction"].SelectToken("statusCode");
                    }
                    trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
                }
                else if ((string)jobjResult["transaction"].SelectToken("statusCode") == "02")
                {
                    strMsgError = (string)jobjResult["transaction"].SelectToken("statusDesc");
                    IsLoading = false;
                    IsVisible = false;
                    IsInvalid = true;
                    trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "02");
                }

            }
            catch (Exception ex)
            {
                trans.resultPayment = "03";

                trans.errorCode = "Exception Error";
                OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
                trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
            }
        }
        else
        {
            trans.resultPayment = "04";

            trans.errorCode = "Hit Webservice Error {" + strResult + "}";
            OurUtility.Write_Log("== Hit Webservice Error {" + strResult + "}", "step-action");
            trans.AddTrail("PAYMENT", "Payment Method:" + trans.paymentMethod + ",Payment Ammount: " + strAccBill, "01");
        }
    }

    CPayout Payout = new CPayout();
    Global global = new Global();
    int inttotal = 0;

    int reconnectionAttempts = 5;
    bool Running = false;

    private async Task MainLoop(int bankNote, int bankAmount)
    {
        try
        {
            Payout.CommandStructure.ComPort = global.ComPort;
            Payout.CommandStructure.SSPAddress = global.SSPAddress;
            Payout.CommandStructure.Timeout = 3000;
            Payout.HoldNumber = 0;

            if (ConnectToValidator(reconnectionAttempts, 2))
            {
                //Console.WriteLine("1");
                Running = true;
                //Payout.ConfigureBezel(0x00, 0xFF, 0x00);
            }

            while (Payout.total < cst.intTagihan)
            {
                await Task.Delay(1000);
                //Console.WriteLine("2");
                if (!Payout.DoPoll(trans,bankNote,bankAmount))
                {
                    //Console.WriteLine("Poll failed, attempting to reconnect...\r\n");
                    while (true)
                    {
                        Payout.SSPComms.CloseComPort();
                        if (ConnectToValidator(reconnectionAttempts, 2) == true)
                            break;
                        Payout.SSPComms.CloseComPort();
                        return;
                    }
                    //Console.WriteLine("Reconnected\r\n");
                }
                //Console.WriteLine("9");
                inttotal = Payout.total;
                //Console.Write Line("inttotal = " + inttotal);
                StateHasChanged();
                // UpdateUI();
                //if(!bFormSetup)
                //{
                //}
            }
            //Console.WriteLine("10");
            Payout.DisableValidator();
            Payout.SSPComms.CloseComPort();
        }
        catch (Exception ex)
        {
            OurUtility.Write_Log("== Error :" + ex.Message, "step-action");
            trans.errorCode = "Exception Error";
            trans.AddTrail("BILL ACCEPTOR", "BA - 001", "01");
            return;
        }
    }
    private byte FindMaxProtocolVersion()
    {
        byte b = 0x06;
        while (true)
        {
            Payout.SetProtocolVersion(b);
            if (Payout.CommandStructure.ResponseData[0] == CCommands.SSP_RESPONSE_FAIL)
                return --b;
            b++;
            if (b > 12)
                return 0x06; // return default
        }
    }
    private bool IsUnitValid(char unitType)
    {
        if (unitType == (char)0x00) // 0x06 is Payout, no other types supported by this program
            return true;
        return false;
    }
    private bool ConnectToValidator(int attemps, int interval)
    {
        //reconnectionTimer.Interval = interval * 1000;
        Task.Delay(interval * 1000).GetAwaiter();
        for (int i = 0; i < attemps; i++)
        {
            Payout.SSPComms.CloseComPort();
            Payout.CommandStructure.EncryptionStatus = false;
            if (Payout.OpenComPort() && Payout.NegotiateKeys())
            {
                Payout.CommandStructure.EncryptionStatus = true;
                byte maxPVersion = FindMaxProtocolVersion();
                if (maxPVersion >= 6)
                {
                    Payout.SetProtocolVersion(maxPVersion);
                }
                else
                {
                    return false;
                }
                Payout.PayoutSetupRequest();
                if (!IsUnitValid(Payout.UnitType))
                {
                    break;
                    return false;
                }

                Payout.SetInhibits();
                Payout.GetSerialNumber();
                Payout.EnableValidator();
                Payout.EnablePayout();
                return true;
            }
        }
        return false;
    }
    #region printOld
    private async Task Print()
    {
        int height = 0;

        PrintContent prtContent = new PrintContent();
        string msg = string.Empty;
        string logoTsel = System.IO.Directory.GetCurrentDirectory() + @"\wwwroot\assets\image\Logo\Logo_MyGraPARI_mini.png";

        string content = prtContent.BTH(trans, cst, config);
        string header = prtContent.Header(trans, cst, config);
        string footer = prtContent.FOOTER(trans, cst, config);
        bool result = Printer.Print(config, header, content, logoTsel, footer, ref msg);
    }
    #endregion
    private void TimerElapsedHandler()
    {
        NavMan.NavigateTo("/main");
    }


    private void TimerElapsedHandlerCES()
    {
        //CheckNPS("");
        IsLoading = true;
        StateHasChanged();
    }


    private void NavigateTo(string strURL)
    {
        NavMan.NavigateTo(strURL);
    }
} 